
Debug/singelpong:     file format elf32-littlearm


Disassembly of section .text:

20000000 <ascii_startup>:
 #include "delay.h"
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void ascii_startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <ascii_startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 ff5c 	bl	20000ec0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <ascii_startup+0x8>
#define B_E 0x40
#define B_SELECT 4
#define B_RW 2
#define B_RS 1

}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <startup>:
int end_game = 0;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000010:	4802      	ldr	r0, [pc, #8]	; (2000001c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000012:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000014:	f000 ff54 	bl	20000ec0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000018:	e7fe      	b.n	20000018 <startup+0x8>
#define STK_LOAD	((unsigned long *) (STK+0x4))
#define STK_VAL		((unsigned long *)(STK+0x8))



}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	2001c000 	andcs	ip, r1, r0

20000020 <strLength>:

int player1_points = 0;
int player2_points = 0;

// function to get the length of a string
int strLength(char* str) {
20000020:	b580      	push	{r7, lr}
20000022:	b084      	sub	sp, #16
20000024:	af00      	add	r7, sp, #0
20000026:	6078      	str	r0, [r7, #4]
    int len = 0;
20000028:	2300      	movs	r3, #0
2000002a:	60fb      	str	r3, [r7, #12]
    while (*str != '\0') {
2000002c:	e005      	b.n	2000003a <strLength+0x1a>
        len++;
2000002e:	68fb      	ldr	r3, [r7, #12]
20000030:	3301      	adds	r3, #1
20000032:	60fb      	str	r3, [r7, #12]
        str++;
20000034:	687b      	ldr	r3, [r7, #4]
20000036:	3301      	adds	r3, #1
20000038:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
2000003a:	687b      	ldr	r3, [r7, #4]
2000003c:	781b      	ldrb	r3, [r3, #0]
2000003e:	2b00      	cmp	r3, #0
20000040:	d1f5      	bne.n	2000002e <strLength+0xe>
    }
    return len;
20000042:	68fb      	ldr	r3, [r7, #12]
}
20000044:	0018      	movs	r0, r3
20000046:	46bd      	mov	sp, r7
20000048:	b004      	add	sp, #16
2000004a:	bd80      	pop	{r7, pc}

2000004c <intToString>:

// function to convert an integer to a string
void intToString(int num, char* str) {
2000004c:	b580      	push	{r7, lr}
2000004e:	b086      	sub	sp, #24
20000050:	af00      	add	r7, sp, #0
20000052:	6078      	str	r0, [r7, #4]
20000054:	6039      	str	r1, [r7, #0]
    int i = 0, rem, len = 0, n;
20000056:	2300      	movs	r3, #0
20000058:	617b      	str	r3, [r7, #20]
2000005a:	2300      	movs	r3, #0
2000005c:	613b      	str	r3, [r7, #16]

    n = num;
2000005e:	687b      	ldr	r3, [r7, #4]
20000060:	60fb      	str	r3, [r7, #12]

    // count the number of digits in the number
    while (n != 0) {
20000062:	e009      	b.n	20000078 <intToString+0x2c>
        len++;
20000064:	693b      	ldr	r3, [r7, #16]
20000066:	3301      	adds	r3, #1
20000068:	613b      	str	r3, [r7, #16]
        n /= 10;
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	210a      	movs	r1, #10
2000006e:	0018      	movs	r0, r3
20000070:	f001 f808 	bl	20001084 <__divsi3>
20000074:	0003      	movs	r3, r0
20000076:	60fb      	str	r3, [r7, #12]
    while (n != 0) {
20000078:	68fb      	ldr	r3, [r7, #12]
2000007a:	2b00      	cmp	r3, #0
2000007c:	d1f2      	bne.n	20000064 <intToString+0x18>
    }

    // convert the number to a string by extracting the digits
    for (i = 0; i < len; i++) {
2000007e:	2300      	movs	r3, #0
20000080:	617b      	str	r3, [r7, #20]
20000082:	e01c      	b.n	200000be <intToString+0x72>
        rem = num % 10;
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	210a      	movs	r1, #10
20000088:	0018      	movs	r0, r3
2000008a:	f001 f8e1 	bl	20001250 <__aeabi_idivmod>
2000008e:	000b      	movs	r3, r1
20000090:	60bb      	str	r3, [r7, #8]
        num = num / 10;
20000092:	687b      	ldr	r3, [r7, #4]
20000094:	210a      	movs	r1, #10
20000096:	0018      	movs	r0, r3
20000098:	f000 fff4 	bl	20001084 <__divsi3>
2000009c:	0003      	movs	r3, r0
2000009e:	607b      	str	r3, [r7, #4]
        str[len - (i + 1)] = rem + '0';
200000a0:	68bb      	ldr	r3, [r7, #8]
200000a2:	b2da      	uxtb	r2, r3
200000a4:	697b      	ldr	r3, [r7, #20]
200000a6:	3301      	adds	r3, #1
200000a8:	6939      	ldr	r1, [r7, #16]
200000aa:	1acb      	subs	r3, r1, r3
200000ac:	0019      	movs	r1, r3
200000ae:	683b      	ldr	r3, [r7, #0]
200000b0:	185b      	adds	r3, r3, r1
200000b2:	3230      	adds	r2, #48	; 0x30
200000b4:	b2d2      	uxtb	r2, r2
200000b6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
200000b8:	697b      	ldr	r3, [r7, #20]
200000ba:	3301      	adds	r3, #1
200000bc:	617b      	str	r3, [r7, #20]
200000be:	697a      	ldr	r2, [r7, #20]
200000c0:	693b      	ldr	r3, [r7, #16]
200000c2:	429a      	cmp	r2, r3
200000c4:	dbde      	blt.n	20000084 <intToString+0x38>
    }
    str[len] = '\0';  // add null terminator to the end of the string
200000c6:	693b      	ldr	r3, [r7, #16]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	18d3      	adds	r3, r2, r3
200000cc:	2200      	movs	r2, #0
200000ce:	701a      	strb	r2, [r3, #0]
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46bd      	mov	sp, r7
200000d4:	b006      	add	sp, #24
200000d6:	bd80      	pop	{r7, pc}

200000d8 <add_to_string>:

void add_to_string(int* len, char* string, char* text) {
200000d8:	b580      	push	{r7, lr}
200000da:	b086      	sub	sp, #24
200000dc:	af00      	add	r7, sp, #0
200000de:	60f8      	str	r0, [r7, #12]
200000e0:	60b9      	str	r1, [r7, #8]
200000e2:	607a      	str	r2, [r7, #4]
    
    for (int i = 0; i < strLength(string); i++){
200000e4:	2300      	movs	r3, #0
200000e6:	617b      	str	r3, [r7, #20]
200000e8:	e011      	b.n	2000010e <add_to_string+0x36>
        text[(*len)] = string[i];
200000ea:	697b      	ldr	r3, [r7, #20]
200000ec:	68ba      	ldr	r2, [r7, #8]
200000ee:	18d2      	adds	r2, r2, r3
200000f0:	68fb      	ldr	r3, [r7, #12]
200000f2:	681b      	ldr	r3, [r3, #0]
200000f4:	0019      	movs	r1, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	185b      	adds	r3, r3, r1
200000fa:	7812      	ldrb	r2, [r2, #0]
200000fc:	701a      	strb	r2, [r3, #0]
        (*len)++;
200000fe:	68fb      	ldr	r3, [r7, #12]
20000100:	681b      	ldr	r3, [r3, #0]
20000102:	1c5a      	adds	r2, r3, #1
20000104:	68fb      	ldr	r3, [r7, #12]
20000106:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < strLength(string); i++){
20000108:	697b      	ldr	r3, [r7, #20]
2000010a:	3301      	adds	r3, #1
2000010c:	617b      	str	r3, [r7, #20]
2000010e:	68bb      	ldr	r3, [r7, #8]
20000110:	0018      	movs	r0, r3
20000112:	f7ff ff85 	bl	20000020 <strLength>
20000116:	0002      	movs	r2, r0
20000118:	697b      	ldr	r3, [r7, #20]
2000011a:	4293      	cmp	r3, r2
2000011c:	dbe5      	blt.n	200000ea <add_to_string+0x12>
    }
}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	46c0      	nop			; (mov r8, r8)
20000122:	46bd      	mov	sp, r7
20000124:	b006      	add	sp, #24
20000126:	bd80      	pop	{r7, pc}

20000128 <add_points>:

void add_points(int player) {
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	6078      	str	r0, [r7, #4]
    if (player == 1) {
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2b01      	cmp	r3, #1
20000134:	d108      	bne.n	20000148 <add_points+0x20>
        
        player1_points++;
20000136:	4b0d      	ldr	r3, [pc, #52]	; (2000016c <add_points+0x44>)
20000138:	681b      	ldr	r3, [r3, #0]
2000013a:	1c5a      	adds	r2, r3, #1
2000013c:	4b0b      	ldr	r3, [pc, #44]	; (2000016c <add_points+0x44>)
2000013e:	601a      	str	r2, [r3, #0]
        set_player_points(1,0);
20000140:	2100      	movs	r1, #0
20000142:	2001      	movs	r0, #1
20000144:	f000 f89e 	bl	20000284 <set_player_points>
    }
    if (player == 2) {
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	2b02      	cmp	r3, #2
2000014c:	d108      	bne.n	20000160 <add_points+0x38>
        player2_points++;
2000014e:	4b08      	ldr	r3, [pc, #32]	; (20000170 <add_points+0x48>)
20000150:	681b      	ldr	r3, [r3, #0]
20000152:	1c5a      	adds	r2, r3, #1
20000154:	4b06      	ldr	r3, [pc, #24]	; (20000170 <add_points+0x48>)
20000156:	601a      	str	r2, [r3, #0]
        set_player_points(2,0);
20000158:	2100      	movs	r1, #0
2000015a:	2002      	movs	r0, #2
2000015c:	f000 f892 	bl	20000284 <set_player_points>
    }
    
    check_for_winner();
20000160:	f000 f808 	bl	20000174 <check_for_winner>
    

}
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	46bd      	mov	sp, r7
20000168:	b002      	add	sp, #8
2000016a:	bd80      	pop	{r7, pc}
2000016c:	20001508 	andcs	r1, r0, r8, lsl #10
20000170:	2000150c 	andcs	r1, r0, ip, lsl #10

20000174 <check_for_winner>:

void check_for_winner() {
20000174:	b5b0      	push	{r4, r5, r7, lr}
20000176:	b096      	sub	sp, #88	; 0x58
20000178:	af00      	add	r7, sp, #0
    if (player1_points >= 1 || player2_points >= 1){
2000017a:	4b2f      	ldr	r3, [pc, #188]	; (20000238 <check_for_winner+0xc4>)
2000017c:	681b      	ldr	r3, [r3, #0]
2000017e:	2b00      	cmp	r3, #0
20000180:	dc03      	bgt.n	2000018a <check_for_winner+0x16>
20000182:	4b2e      	ldr	r3, [pc, #184]	; (2000023c <check_for_winner+0xc8>)
20000184:	681b      	ldr	r3, [r3, #0]
20000186:	2b00      	cmp	r3, #0
20000188:	dd52      	ble.n	20000230 <check_for_winner+0xbc>
        
        if (player1_points >= (player2_points + 2)) {
2000018a:	4b2c      	ldr	r3, [pc, #176]	; (2000023c <check_for_winner+0xc8>)
2000018c:	681b      	ldr	r3, [r3, #0]
2000018e:	1c5a      	adds	r2, r3, #1
20000190:	4b29      	ldr	r3, [pc, #164]	; (20000238 <check_for_winner+0xc4>)
20000192:	681b      	ldr	r3, [r3, #0]
20000194:	429a      	cmp	r2, r3
20000196:	da22      	bge.n	200001de <check_for_winner+0x6a>
            //PLayer 1 Wins
            end_game = 1;
20000198:	4b29      	ldr	r3, [pc, #164]	; (20000240 <check_for_winner+0xcc>)
2000019a:	2201      	movs	r2, #1
2000019c:	601a      	str	r2, [r3, #0]
            draw_GO();
2000019e:	f000 ff2d 	bl	20000ffc <draw_GO>
            
            char top_row[] = "Player 1 Wins!!   ";
200001a2:	2044      	movs	r0, #68	; 0x44
200001a4:	183b      	adds	r3, r7, r0
200001a6:	4a27      	ldr	r2, [pc, #156]	; (20000244 <check_for_winner+0xd0>)
200001a8:	ca32      	ldmia	r2!, {r1, r4, r5}
200001aa:	c332      	stmia	r3!, {r1, r4, r5}
200001ac:	6811      	ldr	r1, [r2, #0]
200001ae:	6019      	str	r1, [r3, #0]
200001b0:	8891      	ldrh	r1, [r2, #4]
200001b2:	8099      	strh	r1, [r3, #4]
200001b4:	7992      	ldrb	r2, [r2, #6]
200001b6:	719a      	strb	r2, [r3, #6]
            write_top_display(top_row, 5);
200001b8:	183b      	adds	r3, r7, r0
200001ba:	2105      	movs	r1, #5
200001bc:	0018      	movs	r0, r3
200001be:	f000 fc6d 	bl	20000a9c <write_top_display>
             
            char bottom_row[] = "Press 5 for rematch!";
200001c2:	212c      	movs	r1, #44	; 0x2c
200001c4:	187b      	adds	r3, r7, r1
200001c6:	4a20      	ldr	r2, [pc, #128]	; (20000248 <check_for_winner+0xd4>)
200001c8:	ca31      	ldmia	r2!, {r0, r4, r5}
200001ca:	c331      	stmia	r3!, {r0, r4, r5}
200001cc:	ca11      	ldmia	r2!, {r0, r4}
200001ce:	c311      	stmia	r3!, {r0, r4}
200001d0:	7812      	ldrb	r2, [r2, #0]
200001d2:	701a      	strb	r2, [r3, #0]
            write_bottom_display(bottom_row, 5);
200001d4:	187b      	adds	r3, r7, r1
200001d6:	2105      	movs	r1, #5
200001d8:	0018      	movs	r0, r3
200001da:	f000 fc7d 	bl	20000ad8 <write_bottom_display>
            
            
            
        } 
        
        if (player2_points >= (player1_points + 2)) {
200001de:	4b16      	ldr	r3, [pc, #88]	; (20000238 <check_for_winner+0xc4>)
200001e0:	681b      	ldr	r3, [r3, #0]
200001e2:	1c5a      	adds	r2, r3, #1
200001e4:	4b15      	ldr	r3, [pc, #84]	; (2000023c <check_for_winner+0xc8>)
200001e6:	681b      	ldr	r3, [r3, #0]
200001e8:	429a      	cmp	r2, r3
200001ea:	da21      	bge.n	20000230 <check_for_winner+0xbc>
            // Player 2 Wins
            end_game = 1;
200001ec:	4b14      	ldr	r3, [pc, #80]	; (20000240 <check_for_winner+0xcc>)
200001ee:	2201      	movs	r2, #1
200001f0:	601a      	str	r2, [r3, #0]
            draw_GO();
200001f2:	f000 ff03 	bl	20000ffc <draw_GO>
            
            char top_row[] = "Player 2 Wins!!   ";
200001f6:	2018      	movs	r0, #24
200001f8:	183b      	adds	r3, r7, r0
200001fa:	4a14      	ldr	r2, [pc, #80]	; (2000024c <check_for_winner+0xd8>)
200001fc:	ca32      	ldmia	r2!, {r1, r4, r5}
200001fe:	c332      	stmia	r3!, {r1, r4, r5}
20000200:	6811      	ldr	r1, [r2, #0]
20000202:	6019      	str	r1, [r3, #0]
20000204:	8891      	ldrh	r1, [r2, #4]
20000206:	8099      	strh	r1, [r3, #4]
20000208:	7992      	ldrb	r2, [r2, #6]
2000020a:	719a      	strb	r2, [r3, #6]
            write_top_display(top_row, 10);
2000020c:	183b      	adds	r3, r7, r0
2000020e:	210a      	movs	r1, #10
20000210:	0018      	movs	r0, r3
20000212:	f000 fc43 	bl	20000a9c <write_top_display>
             
            char bottom_row[] = "Press 5 for rematch!";
20000216:	003b      	movs	r3, r7
20000218:	4a0b      	ldr	r2, [pc, #44]	; (20000248 <check_for_winner+0xd4>)
2000021a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021c:	c313      	stmia	r3!, {r0, r1, r4}
2000021e:	ca03      	ldmia	r2!, {r0, r1}
20000220:	c303      	stmia	r3!, {r0, r1}
20000222:	7812      	ldrb	r2, [r2, #0]
20000224:	701a      	strb	r2, [r3, #0]
            write_bottom_display(bottom_row, 10);
20000226:	003b      	movs	r3, r7
20000228:	210a      	movs	r1, #10
2000022a:	0018      	movs	r0, r3
2000022c:	f000 fc54 	bl	20000ad8 <write_bottom_display>
            
        }
    }
}
20000230:	46c0      	nop			; (mov r8, r8)
20000232:	46bd      	mov	sp, r7
20000234:	b016      	add	sp, #88	; 0x58
20000236:	bdb0      	pop	{r4, r5, r7, pc}
20000238:	20001508 	andcs	r1, r0, r8, lsl #10
2000023c:	2000150c 	andcs	r1, r0, ip, lsl #10
20000240:	20001510 	andcs	r1, r0, r0, lsl r5
20000244:	20001438 	andcs	r1, r0, r8, lsr r4
20000248:	2000144c 	andcs	r1, r0, ip, asr #8
2000024c:	20001464 	andcs	r1, r0, r4, ror #8

20000250 <initialize_player_points>:

void initialize_player_points() {
20000250:	b580      	push	{r7, lr}
20000252:	af00      	add	r7, sp, #0
    ascii_init();
20000254:	f000 fb7e 	bl	20000954 <ascii_init>
    player1_points = 0;
20000258:	4b08      	ldr	r3, [pc, #32]	; (2000027c <initialize_player_points+0x2c>)
2000025a:	2200      	movs	r2, #0
2000025c:	601a      	str	r2, [r3, #0]
    player2_points = 0;
2000025e:	4b08      	ldr	r3, [pc, #32]	; (20000280 <initialize_player_points+0x30>)
20000260:	2200      	movs	r2, #0
20000262:	601a      	str	r2, [r3, #0]
    
     set_player_points(1, 10);
20000264:	210a      	movs	r1, #10
20000266:	2001      	movs	r0, #1
20000268:	f000 f80c 	bl	20000284 <set_player_points>
     set_player_points(2, 10);
2000026c:	210a      	movs	r1, #10
2000026e:	2002      	movs	r0, #2
20000270:	f000 f808 	bl	20000284 <set_player_points>
}
20000274:	46c0      	nop			; (mov r8, r8)
20000276:	46bd      	mov	sp, r7
20000278:	bd80      	pop	{r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	20001508 	andcs	r1, r0, r8, lsl #10
20000280:	2000150c 	andcs	r1, r0, ip, lsl #10

20000284 <set_player_points>:

void set_player_points(int player, int delay) {
20000284:	b5f0      	push	{r4, r5, r6, r7, lr}
20000286:	b095      	sub	sp, #84	; 0x54
20000288:	af00      	add	r7, sp, #0
2000028a:	6078      	str	r0, [r7, #4]
2000028c:	6039      	str	r1, [r7, #0]
    char initial_text1[] = "Player 1:";
2000028e:	2140      	movs	r1, #64	; 0x40
20000290:	187b      	adds	r3, r7, r1
20000292:	4a3c      	ldr	r2, [pc, #240]	; (20000384 <set_player_points+0x100>)
20000294:	ca11      	ldmia	r2!, {r0, r4}
20000296:	c311      	stmia	r3!, {r0, r4}
20000298:	8812      	ldrh	r2, [r2, #0]
2000029a:	801a      	strh	r2, [r3, #0]
    char initial_text2[] = "Player 2:";
2000029c:	2334      	movs	r3, #52	; 0x34
2000029e:	18fb      	adds	r3, r7, r3
200002a0:	4a39      	ldr	r2, [pc, #228]	; (20000388 <set_player_points+0x104>)
200002a2:	ca11      	ldmia	r2!, {r0, r4}
200002a4:	c311      	stmia	r3!, {r0, r4}
200002a6:	8812      	ldrh	r2, [r2, #0]
200002a8:	801a      	strh	r2, [r3, #0]
    char player_text[20];
    int len = 0;
200002aa:	2300      	movs	r3, #0
200002ac:	61fb      	str	r3, [r7, #28]
    
    if (player == 1) add_to_string(&len, initial_text1, player_text);
200002ae:	687b      	ldr	r3, [r7, #4]
200002b0:	2b01      	cmp	r3, #1
200002b2:	d107      	bne.n	200002c4 <set_player_points+0x40>
200002b4:	2320      	movs	r3, #32
200002b6:	18fa      	adds	r2, r7, r3
200002b8:	1879      	adds	r1, r7, r1
200002ba:	231c      	movs	r3, #28
200002bc:	18fb      	adds	r3, r7, r3
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff0a 	bl	200000d8 <add_to_string>
    if (player == 2) add_to_string(&len, initial_text2, player_text);
200002c4:	687b      	ldr	r3, [r7, #4]
200002c6:	2b02      	cmp	r3, #2
200002c8:	d108      	bne.n	200002dc <set_player_points+0x58>
200002ca:	2320      	movs	r3, #32
200002cc:	18fa      	adds	r2, r7, r3
200002ce:	2334      	movs	r3, #52	; 0x34
200002d0:	18f9      	adds	r1, r7, r3
200002d2:	231c      	movs	r3, #28
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	0018      	movs	r0, r3
200002d8:	f7ff fefe 	bl	200000d8 <add_to_string>

    //add_to_string(&len, initial_text, player_text);
    
    char s_points[5];
    int p_points;
    if (player == 1) p_points = player1_points;
200002dc:	687b      	ldr	r3, [r7, #4]
200002de:	2b01      	cmp	r3, #1
200002e0:	d102      	bne.n	200002e8 <set_player_points+0x64>
200002e2:	4b2a      	ldr	r3, [pc, #168]	; (2000038c <set_player_points+0x108>)
200002e4:	681b      	ldr	r3, [r3, #0]
200002e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (player == 2) p_points = player2_points;
200002e8:	687b      	ldr	r3, [r7, #4]
200002ea:	2b02      	cmp	r3, #2
200002ec:	d102      	bne.n	200002f4 <set_player_points+0x70>
200002ee:	4b28      	ldr	r3, [pc, #160]	; (20000390 <set_player_points+0x10c>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    if (p_points == 0) {
200002f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200002f6:	2b00      	cmp	r3, #0
200002f8:	d107      	bne.n	2000030a <set_player_points+0x86>
        s_points[0] = '0';
200002fa:	2114      	movs	r1, #20
200002fc:	187b      	adds	r3, r7, r1
200002fe:	2230      	movs	r2, #48	; 0x30
20000300:	701a      	strb	r2, [r3, #0]
        s_points[1] = '\0';
20000302:	187b      	adds	r3, r7, r1
20000304:	2200      	movs	r2, #0
20000306:	705a      	strb	r2, [r3, #1]
20000308:	e006      	b.n	20000318 <set_player_points+0x94>
    } else {
        intToString(p_points, s_points);
2000030a:	2314      	movs	r3, #20
2000030c:	18fa      	adds	r2, r7, r3
2000030e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000310:	0011      	movs	r1, r2
20000312:	0018      	movs	r0, r3
20000314:	f7ff fe9a 	bl	2000004c <intToString>
    }
    
    
    player_text[len] = ' ';
20000318:	69fb      	ldr	r3, [r7, #28]
2000031a:	2420      	movs	r4, #32
2000031c:	193a      	adds	r2, r7, r4
2000031e:	2120      	movs	r1, #32
20000320:	54d1      	strb	r1, [r2, r3]
    len++;
20000322:	69fb      	ldr	r3, [r7, #28]
20000324:	3301      	adds	r3, #1
20000326:	61fb      	str	r3, [r7, #28]
    add_to_string(&len, s_points, player_text); 
20000328:	193a      	adds	r2, r7, r4
2000032a:	2314      	movs	r3, #20
2000032c:	18f9      	adds	r1, r7, r3
2000032e:	251c      	movs	r5, #28
20000330:	197b      	adds	r3, r7, r5
20000332:	0018      	movs	r0, r3
20000334:	f7ff fed0 	bl	200000d8 <add_to_string>
    
    char end_string[] = " points";
20000338:	210c      	movs	r1, #12
2000033a:	187b      	adds	r3, r7, r1
2000033c:	4a15      	ldr	r2, [pc, #84]	; (20000394 <set_player_points+0x110>)
2000033e:	ca41      	ldmia	r2!, {r0, r6}
20000340:	c341      	stmia	r3!, {r0, r6}
    add_to_string(&len, end_string, player_text);
20000342:	193a      	adds	r2, r7, r4
20000344:	1879      	adds	r1, r7, r1
20000346:	197b      	adds	r3, r7, r5
20000348:	0018      	movs	r0, r3
2000034a:	f7ff fec5 	bl	200000d8 <add_to_string>
    
    player_text[len] = '\0';
2000034e:	69fb      	ldr	r3, [r7, #28]
20000350:	193a      	adds	r2, r7, r4
20000352:	2100      	movs	r1, #0
20000354:	54d1      	strb	r1, [r2, r3]
    
    
    if (player == 1) write_top_display(player_text, delay);
20000356:	687b      	ldr	r3, [r7, #4]
20000358:	2b01      	cmp	r3, #1
2000035a:	d105      	bne.n	20000368 <set_player_points+0xe4>
2000035c:	683a      	ldr	r2, [r7, #0]
2000035e:	193b      	adds	r3, r7, r4
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f000 fb9a 	bl	20000a9c <write_top_display>
    if (player == 2) write_bottom_display(player_text, delay);
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	2b02      	cmp	r3, #2
2000036c:	d106      	bne.n	2000037c <set_player_points+0xf8>
2000036e:	683a      	ldr	r2, [r7, #0]
20000370:	2320      	movs	r3, #32
20000372:	18fb      	adds	r3, r7, r3
20000374:	0011      	movs	r1, r2
20000376:	0018      	movs	r0, r3
20000378:	f000 fbae 	bl	20000ad8 <write_bottom_display>
    //return 0;
}
2000037c:	46c0      	nop			; (mov r8, r8)
2000037e:	46bd      	mov	sp, r7
20000380:	b015      	add	sp, #84	; 0x54
20000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000384:	20001478 	andcs	r1, r0, r8, ror r4
20000388:	20001484 	andcs	r1, r0, r4, lsl #9
2000038c:	20001508 	andcs	r1, r0, r8, lsl #10
20000390:	2000150c 	andcs	r1, r0, ip, lsl #10
20000394:	20001490 	mulcs	r0, r0, r4

20000398 <generate_text>:




int generate_text(int p1_points, int p2_points) {
20000398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000039a:	b091      	sub	sp, #68	; 0x44
2000039c:	af00      	add	r7, sp, #0
2000039e:	6078      	str	r0, [r7, #4]
200003a0:	6039      	str	r1, [r7, #0]
    

    
    
    char initial_text[] = "Player 1:";
200003a2:	2134      	movs	r1, #52	; 0x34
200003a4:	187b      	adds	r3, r7, r1
200003a6:	4a1b      	ldr	r2, [pc, #108]	; (20000414 <generate_text+0x7c>)
200003a8:	ca11      	ldmia	r2!, {r0, r4}
200003aa:	c311      	stmia	r3!, {r0, r4}
200003ac:	8812      	ldrh	r2, [r2, #0]
200003ae:	801a      	strh	r2, [r3, #0]
    char my_text[20];
    
    int len = 0;
200003b0:	2300      	movs	r3, #0
200003b2:	61fb      	str	r3, [r7, #28]
    //for (int i = 0; i < strLength(my_text1); i++){
    //    my_text[i] = my_text1[i];
    //    len++;
    //}
    add_to_string(&len, initial_text, my_text);
200003b4:	2420      	movs	r4, #32
200003b6:	193a      	adds	r2, r7, r4
200003b8:	1879      	adds	r1, r7, r1
200003ba:	251c      	movs	r5, #28
200003bc:	197b      	adds	r3, r7, r5
200003be:	0018      	movs	r0, r3
200003c0:	f7ff fe8a 	bl	200000d8 <add_to_string>
    
    char s_points[5];
    //intToString(p_points, s_points);
    
    my_text[len] = ' ';
200003c4:	69fb      	ldr	r3, [r7, #28]
200003c6:	193a      	adds	r2, r7, r4
200003c8:	2120      	movs	r1, #32
200003ca:	54d1      	strb	r1, [r2, r3]
    len++;
200003cc:	69fb      	ldr	r3, [r7, #28]
200003ce:	3301      	adds	r3, #1
200003d0:	61fb      	str	r3, [r7, #28]
    
    add_to_string(&len, s_points, my_text);
200003d2:	193a      	adds	r2, r7, r4
200003d4:	2314      	movs	r3, #20
200003d6:	18f9      	adds	r1, r7, r3
200003d8:	197b      	adds	r3, r7, r5
200003da:	0018      	movs	r0, r3
200003dc:	f7ff fe7c 	bl	200000d8 <add_to_string>
    //    my_text[len] = s_points[i];
    //    len++;
    //}
     
    
    char end_string[] = " points";
200003e0:	210c      	movs	r1, #12
200003e2:	187b      	adds	r3, r7, r1
200003e4:	4a0c      	ldr	r2, [pc, #48]	; (20000418 <generate_text+0x80>)
200003e6:	ca41      	ldmia	r2!, {r0, r6}
200003e8:	c341      	stmia	r3!, {r0, r6}
    add_to_string(&len, end_string, my_text);
200003ea:	193a      	adds	r2, r7, r4
200003ec:	1879      	adds	r1, r7, r1
200003ee:	197b      	adds	r3, r7, r5
200003f0:	0018      	movs	r0, r3
200003f2:	f7ff fe71 	bl	200000d8 <add_to_string>
    //    len++;
    //}
    
    //my_text[len] = '0';
    //len++;
    my_text[len] = '\0';
200003f6:	69fb      	ldr	r3, [r7, #28]
200003f8:	193a      	adds	r2, r7, r4
200003fa:	2100      	movs	r1, #0
200003fc:	54d1      	strb	r1, [r2, r3]
    
    write_bottom_display(my_text, 0);
200003fe:	193b      	adds	r3, r7, r4
20000400:	2100      	movs	r1, #0
20000402:	0018      	movs	r0, r3
20000404:	f000 fb68 	bl	20000ad8 <write_bottom_display>
    return 0;
20000408:	2300      	movs	r3, #0
    //printf("\n");
    //write_bottom_display(points_str, 0);
    

    //return 0;
}
2000040a:	0018      	movs	r0, r3
2000040c:	46bd      	mov	sp, r7
2000040e:	b011      	add	sp, #68	; 0x44
20000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000412:	46c0      	nop			; (mov r8, r8)
20000414:	20001478 	andcs	r1, r0, r8, ror r4
20000418:	20001490 	mulcs	r0, r0, r4

2000041c <new_game>:

 #include "player_points.h"
 #include "game_logic.h"
 //#include "delay.h"

void new_game(POBJECT paddle1, POBJECT paddle2, POBJECT ball) {
2000041c:	b580      	push	{r7, lr}
2000041e:	b084      	sub	sp, #16
20000420:	af00      	add	r7, sp, #0
20000422:	60f8      	str	r0, [r7, #12]
20000424:	60b9      	str	r1, [r7, #8]
20000426:	607a      	str	r2, [r7, #4]
    player1_points = 0;
20000428:	4b19      	ldr	r3, [pc, #100]	; (20000490 <new_game+0x74>)
2000042a:	2200      	movs	r2, #0
2000042c:	601a      	str	r2, [r3, #0]
    player2_points = 0;
2000042e:	4b19      	ldr	r3, [pc, #100]	; (20000494 <new_game+0x78>)
20000430:	2200      	movs	r2, #0
20000432:	601a      	str	r2, [r3, #0]
    
    
    end_game = 0;
20000434:	4b18      	ldr	r3, [pc, #96]	; (20000498 <new_game+0x7c>)
20000436:	2200      	movs	r2, #0
20000438:	601a      	str	r2, [r3, #0]
    
    // RESET PADDLE POSITION
    paddle1->clear(paddle1);
2000043a:	68fb      	ldr	r3, [r7, #12]
2000043c:	699b      	ldr	r3, [r3, #24]
2000043e:	68fa      	ldr	r2, [r7, #12]
20000440:	0010      	movs	r0, r2
20000442:	4798      	blx	r3
    paddle1->posy = 30;
20000444:	68fb      	ldr	r3, [r7, #12]
20000446:	221e      	movs	r2, #30
20000448:	611a      	str	r2, [r3, #16]
    paddle1->draw(paddle1);
2000044a:	68fb      	ldr	r3, [r7, #12]
2000044c:	695b      	ldr	r3, [r3, #20]
2000044e:	68fa      	ldr	r2, [r7, #12]
20000450:	0010      	movs	r0, r2
20000452:	4798      	blx	r3
    
    paddle2->clear(paddle2);
20000454:	68bb      	ldr	r3, [r7, #8]
20000456:	699b      	ldr	r3, [r3, #24]
20000458:	68ba      	ldr	r2, [r7, #8]
2000045a:	0010      	movs	r0, r2
2000045c:	4798      	blx	r3
    paddle2->posy= 30;
2000045e:	68bb      	ldr	r3, [r7, #8]
20000460:	221e      	movs	r2, #30
20000462:	611a      	str	r2, [r3, #16]
    paddle2->draw(paddle2);
20000464:	68bb      	ldr	r3, [r7, #8]
20000466:	695b      	ldr	r3, [r3, #20]
20000468:	68ba      	ldr	r2, [r7, #8]
2000046a:	0010      	movs	r0, r2
2000046c:	4798      	blx	r3
    
    
   
    remove_GO();
2000046e:	f000 fdf1 	bl	20001054 <remove_GO>
    
    initialize_player_points();
20000472:	f7ff feed 	bl	20000250 <initialize_player_points>
    
    delay_mikro(10);
20000476:	200a      	movs	r0, #10
20000478:	f000 fba2 	bl	20000bc0 <delay_mikro>
    
    restart_game(paddle1, ball);
2000047c:	687a      	ldr	r2, [r7, #4]
2000047e:	68fb      	ldr	r3, [r7, #12]
20000480:	0011      	movs	r1, r2
20000482:	0018      	movs	r0, r3
20000484:	f000 f80a 	bl	2000049c <restart_game>
    
}
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	46bd      	mov	sp, r7
2000048c:	b004      	add	sp, #16
2000048e:	bd80      	pop	{r7, pc}
20000490:	20001508 	andcs	r1, r0, r8, lsl #10
20000494:	2000150c 	andcs	r1, r0, ip, lsl #10
20000498:	20001510 	andcs	r1, r0, r0, lsl r5

2000049c <restart_game>:

void restart_game(POBJECT p, POBJECT o) {
2000049c:	b580      	push	{r7, lr}
2000049e:	b084      	sub	sp, #16
200004a0:	af00      	add	r7, sp, #0
200004a2:	6078      	str	r0, [r7, #4]
200004a4:	6039      	str	r1, [r7, #0]
    int newx,newy;
        
    o-> clear(o);
200004a6:	683b      	ldr	r3, [r7, #0]
200004a8:	699b      	ldr	r3, [r3, #24]
200004aa:	683a      	ldr	r2, [r7, #0]
200004ac:	0010      	movs	r0, r2
200004ae:	4798      	blx	r3
    newx=o->dirx+o->posx;
200004b0:	683b      	ldr	r3, [r7, #0]
200004b2:	685a      	ldr	r2, [r3, #4]
200004b4:	683b      	ldr	r3, [r7, #0]
200004b6:	68db      	ldr	r3, [r3, #12]
200004b8:	18d3      	adds	r3, r2, r3
200004ba:	60fb      	str	r3, [r7, #12]
    newy=o->diry+o->posy;
200004bc:	683b      	ldr	r3, [r7, #0]
200004be:	689a      	ldr	r2, [r3, #8]
200004c0:	683b      	ldr	r3, [r7, #0]
200004c2:	691b      	ldr	r3, [r3, #16]
200004c4:	18d3      	adds	r3, r2, r3
200004c6:	60bb      	str	r3, [r7, #8]
    
    newx = 60;
200004c8:	233c      	movs	r3, #60	; 0x3c
200004ca:	60fb      	str	r3, [r7, #12]
    newy = 10;
200004cc:	230a      	movs	r3, #10
200004ce:	60bb      	str	r3, [r7, #8]
    
    //int random_number = rand();
    
    o->posx = newx;
200004d0:	683b      	ldr	r3, [r7, #0]
200004d2:	68fa      	ldr	r2, [r7, #12]
200004d4:	60da      	str	r2, [r3, #12]
    o->posy = newy;
200004d6:	683b      	ldr	r3, [r7, #0]
200004d8:	68ba      	ldr	r2, [r7, #8]
200004da:	611a      	str	r2, [r3, #16]
    o-> draw(o);
200004dc:	683b      	ldr	r3, [r7, #0]
200004de:	695b      	ldr	r3, [r3, #20]
200004e0:	683a      	ldr	r2, [r7, #0]
200004e2:	0010      	movs	r0, r2
200004e4:	4798      	blx	r3
    
    if (player1_points > player2_points) {
200004e6:	4b0d      	ldr	r3, [pc, #52]	; (2000051c <restart_game+0x80>)
200004e8:	681a      	ldr	r2, [r3, #0]
200004ea:	4b0d      	ldr	r3, [pc, #52]	; (20000520 <restart_game+0x84>)
200004ec:	681b      	ldr	r3, [r3, #0]
200004ee:	429a      	cmp	r2, r3
200004f0:	dd06      	ble.n	20000500 <restart_game+0x64>
        o->set_speed(o,4,2);
200004f2:	683b      	ldr	r3, [r7, #0]
200004f4:	6a1b      	ldr	r3, [r3, #32]
200004f6:	6838      	ldr	r0, [r7, #0]
200004f8:	2202      	movs	r2, #2
200004fa:	2104      	movs	r1, #4
200004fc:	4798      	blx	r3
200004fe:	e006      	b.n	2000050e <restart_game+0x72>
    } else {
        o->set_speed(o,-4,2);
20000500:	683b      	ldr	r3, [r7, #0]
20000502:	6a1b      	ldr	r3, [r3, #32]
20000504:	2204      	movs	r2, #4
20000506:	4251      	negs	r1, r2
20000508:	6838      	ldr	r0, [r7, #0]
2000050a:	2202      	movs	r2, #2
2000050c:	4798      	blx	r3
    }
    //o->set_speed(o,-4,2);
    
    remove_GO();
2000050e:	f000 fda1 	bl	20001054 <remove_GO>
}
20000512:	46c0      	nop			; (mov r8, r8)
20000514:	46bd      	mov	sp, r7
20000516:	b004      	add	sp, #16
20000518:	bd80      	pop	{r7, pc}
2000051a:	46c0      	nop			; (mov r8, r8)
2000051c:	20001508 	andcs	r1, r0, r8, lsl #10
20000520:	2000150c 	andcs	r1, r0, ip, lsl #10

20000524 <kbdActivate>:

void kbdActivate(unsigned int row)
{
20000524:	b580      	push	{r7, lr}
20000526:	b082      	sub	sp, #8
20000528:	af00      	add	r7, sp, #0
2000052a:	6078      	str	r0, [r7, #4]
2000052c:	687b      	ldr	r3, [r7, #4]
2000052e:	2b04      	cmp	r3, #4
20000530:	d819      	bhi.n	20000566 <kbdActivate+0x42>
20000532:	687b      	ldr	r3, [r7, #4]
20000534:	009a      	lsls	r2, r3, #2
20000536:	4b0e      	ldr	r3, [pc, #56]	; (20000570 <kbdActivate+0x4c>)
20000538:	18d3      	adds	r3, r2, r3
2000053a:	681b      	ldr	r3, [r3, #0]
2000053c:	469f      	mov	pc, r3
    switch (row)
    {
        case 1:
            *GPIO_ODR_HIGH = 0x10;
2000053e:	4b0d      	ldr	r3, [pc, #52]	; (20000574 <kbdActivate+0x50>)
20000540:	2210      	movs	r2, #16
20000542:	701a      	strb	r2, [r3, #0]
            break;
20000544:	e00f      	b.n	20000566 <kbdActivate+0x42>
        case 2:
            *GPIO_ODR_HIGH = 0x20;
20000546:	4b0b      	ldr	r3, [pc, #44]	; (20000574 <kbdActivate+0x50>)
20000548:	2220      	movs	r2, #32
2000054a:	701a      	strb	r2, [r3, #0]
            break;
2000054c:	e00b      	b.n	20000566 <kbdActivate+0x42>
        case 3:
            *GPIO_ODR_HIGH = 0x40;
2000054e:	4b09      	ldr	r3, [pc, #36]	; (20000574 <kbdActivate+0x50>)
20000550:	2240      	movs	r2, #64	; 0x40
20000552:	701a      	strb	r2, [r3, #0]
            break;
20000554:	e007      	b.n	20000566 <kbdActivate+0x42>
        case 4:
            *GPIO_ODR_HIGH = 0x80;
20000556:	4b07      	ldr	r3, [pc, #28]	; (20000574 <kbdActivate+0x50>)
20000558:	2280      	movs	r2, #128	; 0x80
2000055a:	701a      	strb	r2, [r3, #0]
            break;
2000055c:	e003      	b.n	20000566 <kbdActivate+0x42>
        case 0:
            *GPIO_ODR_HIGH = 0x00;
2000055e:	4b05      	ldr	r3, [pc, #20]	; (20000574 <kbdActivate+0x50>)
20000560:	2200      	movs	r2, #0
20000562:	701a      	strb	r2, [r3, #0]
            break;
20000564:	46c0      	nop			; (mov r8, r8)
    }
}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	46bd      	mov	sp, r7
2000056a:	b002      	add	sp, #8
2000056c:	bd80      	pop	{r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	20001498 	mulcs	r0, r8, r4
20000574:	40020c15 	andmi	r0, r2, r5, lsl ip

20000578 <kbdGetCol>:

// from slides
int kbdGetCol(void)
{
20000578:	b580      	push	{r7, lr}
2000057a:	b082      	sub	sp, #8
2000057c:	af00      	add	r7, sp, #0
    unsigned int c;
    c = *GPIO_IDR_HIGH;
2000057e:	4b10      	ldr	r3, [pc, #64]	; (200005c0 <kbdGetCol+0x48>)
20000580:	781b      	ldrb	r3, [r3, #0]
20000582:	b2db      	uxtb	r3, r3
20000584:	607b      	str	r3, [r7, #4]
    if (c & 0x8) return 4;
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	2208      	movs	r2, #8
2000058a:	4013      	ands	r3, r2
2000058c:	d001      	beq.n	20000592 <kbdGetCol+0x1a>
2000058e:	2304      	movs	r3, #4
20000590:	e012      	b.n	200005b8 <kbdGetCol+0x40>
    if (c & 0x4) return 3;
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	2204      	movs	r2, #4
20000596:	4013      	ands	r3, r2
20000598:	d001      	beq.n	2000059e <kbdGetCol+0x26>
2000059a:	2303      	movs	r3, #3
2000059c:	e00c      	b.n	200005b8 <kbdGetCol+0x40>
    if (c & 0x2) return 2;
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	2202      	movs	r2, #2
200005a2:	4013      	ands	r3, r2
200005a4:	d001      	beq.n	200005aa <kbdGetCol+0x32>
200005a6:	2302      	movs	r3, #2
200005a8:	e006      	b.n	200005b8 <kbdGetCol+0x40>
    if (c & 0x1) return 1;
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	2201      	movs	r2, #1
200005ae:	4013      	ands	r3, r2
200005b0:	d001      	beq.n	200005b6 <kbdGetCol+0x3e>
200005b2:	2301      	movs	r3, #1
200005b4:	e000      	b.n	200005b8 <kbdGetCol+0x40>
    return 0;
200005b6:	2300      	movs	r3, #0
}
200005b8:	0018      	movs	r0, r3
200005ba:	46bd      	mov	sp, r7
200005bc:	b002      	add	sp, #8
200005be:	bd80      	pop	{r7, pc}
200005c0:	40020c11 	andmi	r0, r2, r1, lsl ip

200005c4 <keyb>:

unsigned char keyb(void)
{
200005c4:	b590      	push	{r4, r7, lr}
200005c6:	b087      	sub	sp, #28
200005c8:	af00      	add	r7, sp, #0
    unsigned char key[] = { 1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD
200005ca:	003b      	movs	r3, r7
200005cc:	4a14      	ldr	r2, [pc, #80]	; (20000620 <keyb+0x5c>)
200005ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200005d0:	c313      	stmia	r3!, {r0, r1, r4}
200005d2:	6812      	ldr	r2, [r2, #0]
200005d4:	601a      	str	r2, [r3, #0]
    };

    int row, col;
    for (row = 1; row <= 4; row++)
200005d6:	2301      	movs	r3, #1
200005d8:	617b      	str	r3, [r7, #20]
200005da:	e016      	b.n	2000060a <keyb+0x46>
    {
        kbdActivate(row);
200005dc:	697b      	ldr	r3, [r7, #20]
200005de:	0018      	movs	r0, r3
200005e0:	f7ff ffa0 	bl	20000524 <kbdActivate>
        if ((col = kbdGetCol()))
200005e4:	f7ff ffc8 	bl	20000578 <kbdGetCol>
200005e8:	0003      	movs	r3, r0
200005ea:	613b      	str	r3, [r7, #16]
200005ec:	693b      	ldr	r3, [r7, #16]
200005ee:	2b00      	cmp	r3, #0
200005f0:	d008      	beq.n	20000604 <keyb+0x40>
        {
            return key[4 *(row - 1) + (col - 1)];
200005f2:	697b      	ldr	r3, [r7, #20]
200005f4:	3b01      	subs	r3, #1
200005f6:	009a      	lsls	r2, r3, #2
200005f8:	693b      	ldr	r3, [r7, #16]
200005fa:	3b01      	subs	r3, #1
200005fc:	18d3      	adds	r3, r2, r3
200005fe:	003a      	movs	r2, r7
20000600:	5cd3      	ldrb	r3, [r2, r3]
20000602:	e009      	b.n	20000618 <keyb+0x54>
    for (row = 1; row <= 4; row++)
20000604:	697b      	ldr	r3, [r7, #20]
20000606:	3301      	adds	r3, #1
20000608:	617b      	str	r3, [r7, #20]
2000060a:	697b      	ldr	r3, [r7, #20]
2000060c:	2b04      	cmp	r3, #4
2000060e:	dde5      	ble.n	200005dc <keyb+0x18>
        }
    }

    kbdActivate(0);
20000610:	2000      	movs	r0, #0
20000612:	f7ff ff87 	bl	20000524 <kbdActivate>
    return 0xFF;
20000616:	23ff      	movs	r3, #255	; 0xff
}
20000618:	0018      	movs	r0, r3
2000061a:	46bd      	mov	sp, r7
2000061c:	b007      	add	sp, #28
2000061e:	bd90      	pop	{r4, r7, pc}
20000620:	200014ac 	andcs	r1, r0, ip, lsr #9

20000624 <object_intersect>:



int object_intersect(POBJECT p, POBJECT b) {
20000624:	b580      	push	{r7, lr}
20000626:	b088      	sub	sp, #32
20000628:	af00      	add	r7, sp, #0
2000062a:	6078      	str	r0, [r7, #4]
2000062c:	6039      	str	r1, [r7, #0]
    
    int paddle_x = p->posx;
2000062e:	687b      	ldr	r3, [r7, #4]
20000630:	68db      	ldr	r3, [r3, #12]
20000632:	61bb      	str	r3, [r7, #24]
    int paddle_min_x = p->posx + p->geo->sizex;
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	68da      	ldr	r2, [r3, #12]
20000638:	687b      	ldr	r3, [r7, #4]
2000063a:	681b      	ldr	r3, [r3, #0]
2000063c:	685b      	ldr	r3, [r3, #4]
2000063e:	18d3      	adds	r3, r2, r3
20000640:	617b      	str	r3, [r7, #20]
    int paddle_max_y = p->geo->sizey + p->posy;
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	681b      	ldr	r3, [r3, #0]
20000646:	689a      	ldr	r2, [r3, #8]
20000648:	687b      	ldr	r3, [r7, #4]
2000064a:	691b      	ldr	r3, [r3, #16]
2000064c:	18d3      	adds	r3, r2, r3
2000064e:	613b      	str	r3, [r7, #16]
    int paddle_min_y = p->posy;
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	691b      	ldr	r3, [r3, #16]
20000654:	60fb      	str	r3, [r7, #12]
    
    for (int i = 0; i < b->geo->numpoints; i++) {
20000656:	2300      	movs	r3, #0
20000658:	61fb      	str	r3, [r7, #28]
2000065a:	e03b      	b.n	200006d4 <object_intersect+0xb0>
        POINT ball_p = {b->geo->px[i].x + b->posx, b->geo->px[i].y+b->posy};
2000065c:	683b      	ldr	r3, [r7, #0]
2000065e:	681a      	ldr	r2, [r3, #0]
20000660:	69fb      	ldr	r3, [r7, #28]
20000662:	3304      	adds	r3, #4
20000664:	005b      	lsls	r3, r3, #1
20000666:	18d3      	adds	r3, r2, r3
20000668:	3304      	adds	r3, #4
2000066a:	781a      	ldrb	r2, [r3, #0]
2000066c:	683b      	ldr	r3, [r7, #0]
2000066e:	68db      	ldr	r3, [r3, #12]
20000670:	b2db      	uxtb	r3, r3
20000672:	18d3      	adds	r3, r2, r3
20000674:	b2da      	uxtb	r2, r3
20000676:	2108      	movs	r1, #8
20000678:	187b      	adds	r3, r7, r1
2000067a:	701a      	strb	r2, [r3, #0]
2000067c:	683b      	ldr	r3, [r7, #0]
2000067e:	681a      	ldr	r2, [r3, #0]
20000680:	69fb      	ldr	r3, [r7, #28]
20000682:	3304      	adds	r3, #4
20000684:	005b      	lsls	r3, r3, #1
20000686:	18d3      	adds	r3, r2, r3
20000688:	3305      	adds	r3, #5
2000068a:	781a      	ldrb	r2, [r3, #0]
2000068c:	683b      	ldr	r3, [r7, #0]
2000068e:	691b      	ldr	r3, [r3, #16]
20000690:	b2db      	uxtb	r3, r3
20000692:	18d3      	adds	r3, r2, r3
20000694:	b2da      	uxtb	r2, r3
20000696:	187b      	adds	r3, r7, r1
20000698:	705a      	strb	r2, [r3, #1]
        
        if (ball_p.x >= paddle_x && ball_p.x <= paddle_min_x && ball_p.y <= paddle_max_y && ball_p.y >= paddle_min_y) {
2000069a:	187b      	adds	r3, r7, r1
2000069c:	781b      	ldrb	r3, [r3, #0]
2000069e:	001a      	movs	r2, r3
200006a0:	69bb      	ldr	r3, [r7, #24]
200006a2:	4293      	cmp	r3, r2
200006a4:	dc13      	bgt.n	200006ce <object_intersect+0xaa>
200006a6:	187b      	adds	r3, r7, r1
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	001a      	movs	r2, r3
200006ac:	697b      	ldr	r3, [r7, #20]
200006ae:	4293      	cmp	r3, r2
200006b0:	db0d      	blt.n	200006ce <object_intersect+0xaa>
200006b2:	187b      	adds	r3, r7, r1
200006b4:	785b      	ldrb	r3, [r3, #1]
200006b6:	001a      	movs	r2, r3
200006b8:	693b      	ldr	r3, [r7, #16]
200006ba:	4293      	cmp	r3, r2
200006bc:	db07      	blt.n	200006ce <object_intersect+0xaa>
200006be:	187b      	adds	r3, r7, r1
200006c0:	785b      	ldrb	r3, [r3, #1]
200006c2:	001a      	movs	r2, r3
200006c4:	68fb      	ldr	r3, [r7, #12]
200006c6:	4293      	cmp	r3, r2
200006c8:	dc01      	bgt.n	200006ce <object_intersect+0xaa>
            return 1;
200006ca:	2301      	movs	r3, #1
200006cc:	e009      	b.n	200006e2 <object_intersect+0xbe>
    for (int i = 0; i < b->geo->numpoints; i++) {
200006ce:	69fb      	ldr	r3, [r7, #28]
200006d0:	3301      	adds	r3, #1
200006d2:	61fb      	str	r3, [r7, #28]
200006d4:	683b      	ldr	r3, [r7, #0]
200006d6:	681b      	ldr	r3, [r3, #0]
200006d8:	681b      	ldr	r3, [r3, #0]
200006da:	69fa      	ldr	r2, [r7, #28]
200006dc:	429a      	cmp	r2, r3
200006de:	dbbd      	blt.n	2000065c <object_intersect+0x38>
        }
      
    }
    
    return 0;
200006e0:	2300      	movs	r3, #0
}
200006e2:	0018      	movs	r0, r3
200006e4:	46bd      	mov	sp, r7
200006e6:	b008      	add	sp, #32
200006e8:	bd80      	pop	{r7, pc}

200006ea <compare_points>:

int compare_points(POINT p1, POINT p2) {
200006ea:	b580      	push	{r7, lr}
200006ec:	b082      	sub	sp, #8
200006ee:	af00      	add	r7, sp, #0
200006f0:	1d3b      	adds	r3, r7, #4
200006f2:	8018      	strh	r0, [r3, #0]
200006f4:	003b      	movs	r3, r7
200006f6:	8019      	strh	r1, [r3, #0]
    if (p1.x == p2.x && p1.y == p2.y) {
200006f8:	1d3b      	adds	r3, r7, #4
200006fa:	781a      	ldrb	r2, [r3, #0]
200006fc:	003b      	movs	r3, r7
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	429a      	cmp	r2, r3
20000702:	d107      	bne.n	20000714 <compare_points+0x2a>
20000704:	1d3b      	adds	r3, r7, #4
20000706:	785a      	ldrb	r2, [r3, #1]
20000708:	003b      	movs	r3, r7
2000070a:	785b      	ldrb	r3, [r3, #1]
2000070c:	429a      	cmp	r2, r3
2000070e:	d101      	bne.n	20000714 <compare_points+0x2a>
        return 1;
20000710:	2301      	movs	r3, #1
20000712:	e000      	b.n	20000716 <compare_points+0x2c>
    } else {
        return 0;
20000714:	2300      	movs	r3, #0
    }
20000716:	0018      	movs	r0, r3
20000718:	46bd      	mov	sp, r7
2000071a:	b002      	add	sp, #8
2000071c:	bd80      	pop	{r7, pc}
2000071e:	46c0      	nop			; (mov r8, r8)

20000720 <init_ascii_app>:



void init_ascii_app(void) {
20000720:	b580      	push	{r7, lr}
20000722:	af00      	add	r7, sp, #0


    // starta klockor port D och E 
//((unsigned long *) (0x40023830)) = 0x18;
*((unsigned long *) (0x40023830)) = 0x18;
20000724:	4b0b      	ldr	r3, [pc, #44]	; (20000754 <init_ascii_app+0x34>)
20000726:	2218      	movs	r2, #24
20000728:	601a      	str	r2, [r3, #0]


// port D medium speed
*((volatile unsigned int *)0x40020C08) = 0x55555555;
2000072a:	4b0b      	ldr	r3, [pc, #44]	; (20000758 <init_ascii_app+0x38>)
2000072c:	4a0b      	ldr	r2, [pc, #44]	; (2000075c <init_ascii_app+0x3c>)
2000072e:	601a      	str	r2, [r3, #0]

    *GPIO_MODER= 0x55555555;// alla ut
20000730:	4b0b      	ldr	r3, [pc, #44]	; (20000760 <init_ascii_app+0x40>)
20000732:	4a0a      	ldr	r2, [pc, #40]	; (2000075c <init_ascii_app+0x3c>)
20000734:	601a      	str	r2, [r3, #0]
	*GPIO_PUPDR= 0x55550000;//input ports pullup
20000736:	4b0b      	ldr	r3, [pc, #44]	; (20000764 <init_ascii_app+0x44>)
20000738:	4a0b      	ldr	r2, [pc, #44]	; (20000768 <init_ascii_app+0x48>)
2000073a:	601a      	str	r2, [r3, #0]
	*GPIO_OTYPER &= 0xFFFF0000;
2000073c:	4b0b      	ldr	r3, [pc, #44]	; (2000076c <init_ascii_app+0x4c>)
2000073e:	881b      	ldrh	r3, [r3, #0]
20000740:	4b0a      	ldr	r3, [pc, #40]	; (2000076c <init_ascii_app+0x4c>)
20000742:	2200      	movs	r2, #0
20000744:	801a      	strh	r2, [r3, #0]
    *GPIO_OSPEEDR = 0x55555555;
20000746:	4b0a      	ldr	r3, [pc, #40]	; (20000770 <init_ascii_app+0x50>)
20000748:	4a04      	ldr	r2, [pc, #16]	; (2000075c <init_ascii_app+0x3c>)
2000074a:	601a      	str	r2, [r3, #0]
}
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	bd80      	pop	{r7, pc}
20000752:	46c0      	nop			; (mov r8, r8)
20000754:	40023830 	andmi	r3, r2, r0, lsr r8
20000758:	40020c08 	andmi	r0, r2, r8, lsl #24
2000075c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000760:	40021000 	andmi	r1, r2, r0
20000764:	4002100c 	andmi	r1, r2, ip
20000768:	55550000 	ldrbpl	r0, [r5, #-0]
2000076c:	40021004 	andmi	r1, r2, r4
20000770:	40021008 	andmi	r1, r2, r8

20000774 <ascii_ctrl_bit_set>:



// From Slides
void ascii_ctrl_bit_set( char x ) {
20000774:	b580      	push	{r7, lr}
20000776:	b084      	sub	sp, #16
20000778:	af00      	add	r7, sp, #0
2000077a:	0002      	movs	r2, r0
2000077c:	1dfb      	adds	r3, r7, #7
2000077e:	701a      	strb	r2, [r3, #0]
    char c;
    c = *GPIO_ODRLSB;
20000780:	4a09      	ldr	r2, [pc, #36]	; (200007a8 <ascii_ctrl_bit_set+0x34>)
20000782:	210f      	movs	r1, #15
20000784:	187b      	adds	r3, r7, r1
20000786:	7812      	ldrb	r2, [r2, #0]
20000788:	701a      	strb	r2, [r3, #0]
    *GPIO_ODRLSB = B_SELECT | x | c;
2000078a:	1dfa      	adds	r2, r7, #7
2000078c:	187b      	adds	r3, r7, r1
2000078e:	7812      	ldrb	r2, [r2, #0]
20000790:	781b      	ldrb	r3, [r3, #0]
20000792:	4313      	orrs	r3, r2
20000794:	b2db      	uxtb	r3, r3
20000796:	4a04      	ldr	r2, [pc, #16]	; (200007a8 <ascii_ctrl_bit_set+0x34>)
20000798:	2104      	movs	r1, #4
2000079a:	430b      	orrs	r3, r1
2000079c:	b2db      	uxtb	r3, r3
2000079e:	7013      	strb	r3, [r2, #0]
}
200007a0:	46c0      	nop			; (mov r8, r8)
200007a2:	46bd      	mov	sp, r7
200007a4:	b004      	add	sp, #16
200007a6:	bd80      	pop	{r7, pc}
200007a8:	40021014 	andmi	r1, r2, r4, lsl r0

200007ac <ascii_ctrl_bit_clear>:

// From Slides
void ascii_ctrl_bit_clear(char x) {
200007ac:	b580      	push	{r7, lr}
200007ae:	b084      	sub	sp, #16
200007b0:	af00      	add	r7, sp, #0
200007b2:	0002      	movs	r2, r0
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	701a      	strb	r2, [r3, #0]
    char c;
    c = *GPIO_ODRLSB;
200007b8:	4a0d      	ldr	r2, [pc, #52]	; (200007f0 <ascii_ctrl_bit_clear+0x44>)
200007ba:	210f      	movs	r1, #15
200007bc:	187b      	adds	r3, r7, r1
200007be:	7812      	ldrb	r2, [r2, #0]
200007c0:	701a      	strb	r2, [r3, #0]
    c = c & ~x;
200007c2:	1dfb      	adds	r3, r7, #7
200007c4:	781b      	ldrb	r3, [r3, #0]
200007c6:	b25b      	sxtb	r3, r3
200007c8:	43db      	mvns	r3, r3
200007ca:	b25b      	sxtb	r3, r3
200007cc:	187a      	adds	r2, r7, r1
200007ce:	7812      	ldrb	r2, [r2, #0]
200007d0:	b252      	sxtb	r2, r2
200007d2:	4013      	ands	r3, r2
200007d4:	b25a      	sxtb	r2, r3
200007d6:	187b      	adds	r3, r7, r1
200007d8:	701a      	strb	r2, [r3, #0]
    *GPIO_ODRLSB = B_SELECT | c;
200007da:	4a05      	ldr	r2, [pc, #20]	; (200007f0 <ascii_ctrl_bit_clear+0x44>)
200007dc:	187b      	adds	r3, r7, r1
200007de:	781b      	ldrb	r3, [r3, #0]
200007e0:	2104      	movs	r1, #4
200007e2:	430b      	orrs	r3, r1
200007e4:	b2db      	uxtb	r3, r3
200007e6:	7013      	strb	r3, [r2, #0]
}
200007e8:	46c0      	nop			; (mov r8, r8)
200007ea:	46bd      	mov	sp, r7
200007ec:	b004      	add	sp, #16
200007ee:	bd80      	pop	{r7, pc}
200007f0:	40021014 	andmi	r1, r2, r4, lsl r0

200007f4 <ascii_read_controller>:

// From Slides
char ascii_read_controller(void) {
200007f4:	b580      	push	{r7, lr}
200007f6:	b082      	sub	sp, #8
200007f8:	af00      	add	r7, sp, #0
    char c;
    ascii_ctrl_bit_set(B_E);
200007fa:	2040      	movs	r0, #64	; 0x40
200007fc:	f7ff ffba 	bl	20000774 <ascii_ctrl_bit_set>
    
    delay_250ns();
20000800:	f000 f9bc 	bl	20000b7c <delay_250ns>
    delay_250ns();
20000804:	f000 f9ba 	bl	20000b7c <delay_250ns>
    
    c = *GPIO_IDRLSB;
20000808:	4a06      	ldr	r2, [pc, #24]	; (20000824 <ascii_read_controller+0x30>)
2000080a:	1dfb      	adds	r3, r7, #7
2000080c:	7812      	ldrb	r2, [r2, #0]
2000080e:	701a      	strb	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_E);
20000810:	2040      	movs	r0, #64	; 0x40
20000812:	f7ff ffcb 	bl	200007ac <ascii_ctrl_bit_clear>
    
    return c;
20000816:	1dfb      	adds	r3, r7, #7
20000818:	781b      	ldrb	r3, [r3, #0]
}
2000081a:	0018      	movs	r0, r3
2000081c:	46bd      	mov	sp, r7
2000081e:	b002      	add	sp, #8
20000820:	bd80      	pop	{r7, pc}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	40021010 	andmi	r1, r2, r0, lsl r0

20000828 <ascii_write_controller>:

// From Slides
void ascii_write_controller(char c) {
20000828:	b580      	push	{r7, lr}
2000082a:	b082      	sub	sp, #8
2000082c:	af00      	add	r7, sp, #0
2000082e:	0002      	movs	r2, r0
20000830:	1dfb      	adds	r3, r7, #7
20000832:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
20000834:	2040      	movs	r0, #64	; 0x40
20000836:	f7ff ff9d 	bl	20000774 <ascii_ctrl_bit_set>
    *GPIO_ODRMSB = c;
2000083a:	4a06      	ldr	r2, [pc, #24]	; (20000854 <ascii_write_controller+0x2c>)
2000083c:	1dfb      	adds	r3, r7, #7
2000083e:	781b      	ldrb	r3, [r3, #0]
20000840:	7013      	strb	r3, [r2, #0]
    delay_250ns();
20000842:	f000 f99b 	bl	20000b7c <delay_250ns>
    ascii_ctrl_bit_clear(B_E);
20000846:	2040      	movs	r0, #64	; 0x40
20000848:	f7ff ffb0 	bl	200007ac <ascii_ctrl_bit_clear>
    
}
2000084c:	46c0      	nop			; (mov r8, r8)
2000084e:	46bd      	mov	sp, r7
20000850:	b002      	add	sp, #8
20000852:	bd80      	pop	{r7, pc}
20000854:	40021015 	andmi	r1, r2, r5, lsl r0

20000858 <ascii_read_status>:

// From Slides
char ascii_read_status(void) {
20000858:	b590      	push	{r4, r7, lr}
2000085a:	b083      	sub	sp, #12
2000085c:	af00      	add	r7, sp, #0
    char c;
    *GPIO_MODER = 0x00005555;
2000085e:	4b0b      	ldr	r3, [pc, #44]	; (2000088c <ascii_read_status+0x34>)
20000860:	4a0b      	ldr	r2, [pc, #44]	; (20000890 <ascii_read_status+0x38>)
20000862:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RW);
20000864:	2002      	movs	r0, #2
20000866:	f7ff ff85 	bl	20000774 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
2000086a:	2001      	movs	r0, #1
2000086c:	f7ff ff9e 	bl	200007ac <ascii_ctrl_bit_clear>
    c = ascii_read_controller();
20000870:	1dfc      	adds	r4, r7, #7
20000872:	f7ff ffbf 	bl	200007f4 <ascii_read_controller>
20000876:	0003      	movs	r3, r0
20000878:	7023      	strb	r3, [r4, #0]
    
    *GPIO_MODER = 0x55555555;
2000087a:	4b04      	ldr	r3, [pc, #16]	; (2000088c <ascii_read_status+0x34>)
2000087c:	4a05      	ldr	r2, [pc, #20]	; (20000894 <ascii_read_status+0x3c>)
2000087e:	601a      	str	r2, [r3, #0]
    return c;
20000880:	1dfb      	adds	r3, r7, #7
20000882:	781b      	ldrb	r3, [r3, #0]
}
20000884:	0018      	movs	r0, r3
20000886:	46bd      	mov	sp, r7
20000888:	b003      	add	sp, #12
2000088a:	bd90      	pop	{r4, r7, pc}
2000088c:	40021000 	andmi	r1, r2, r0
20000890:	00005555 	andeq	r5, r0, r5, asr r5
20000894:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000898 <ascii_read_data>:


//Implementation (Book)
unsigned char ascii_read_data(void) {
20000898:	b580      	push	{r7, lr}
2000089a:	af00      	add	r7, sp, #0
    *GPIO_MODER = 0x00005555;
2000089c:	4b06      	ldr	r3, [pc, #24]	; (200008b8 <ascii_read_data+0x20>)
2000089e:	4a07      	ldr	r2, [pc, #28]	; (200008bc <ascii_read_data+0x24>)
200008a0:	601a      	str	r2, [r3, #0]
    
    ascii_ctrl_bit_set(B_RW);
200008a2:	2002      	movs	r0, #2
200008a4:	f7ff ff66 	bl	20000774 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
200008a8:	2001      	movs	r0, #1
200008aa:	f7ff ff7f 	bl	200007ac <ascii_ctrl_bit_clear>
}
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	0018      	movs	r0, r3
200008b2:	46bd      	mov	sp, r7
200008b4:	bd80      	pop	{r7, pc}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	40021000 	andmi	r1, r2, r0
200008bc:	00005555 	andeq	r5, r0, r5, asr r5

200008c0 <ascii_write_cmd>:

//Implementation (Book)
void ascii_write_cmd(unsigned char command) {
200008c0:	b580      	push	{r7, lr}
200008c2:	b082      	sub	sp, #8
200008c4:	af00      	add	r7, sp, #0
200008c6:	0002      	movs	r2, r0
200008c8:	1dfb      	adds	r3, r7, #7
200008ca:	701a      	strb	r2, [r3, #0]
    
    ascii_ctrl_bit_clear(B_RS);
200008cc:	2001      	movs	r0, #1
200008ce:	f7ff ff6d 	bl	200007ac <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
200008d2:	2002      	movs	r0, #2
200008d4:	f7ff ff6a 	bl	200007ac <ascii_ctrl_bit_clear>
    
    ascii_write_controller(command);
200008d8:	1dfb      	adds	r3, r7, #7
200008da:	781b      	ldrb	r3, [r3, #0]
200008dc:	0018      	movs	r0, r3
200008de:	f7ff ffa3 	bl	20000828 <ascii_write_controller>
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b002      	add	sp, #8
200008e8:	bd80      	pop	{r7, pc}

200008ea <ascii_write_data>:

//Implementation (Book)
void ascii_write_data(unsigned char data) {
200008ea:	b580      	push	{r7, lr}
200008ec:	b082      	sub	sp, #8
200008ee:	af00      	add	r7, sp, #0
200008f0:	0002      	movs	r2, r0
200008f2:	1dfb      	adds	r3, r7, #7
200008f4:	701a      	strb	r2, [r3, #0]
    
    ascii_ctrl_bit_set(B_RS);
200008f6:	2001      	movs	r0, #1
200008f8:	f7ff ff3c 	bl	20000774 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
200008fc:	2002      	movs	r0, #2
200008fe:	f7ff ff55 	bl	200007ac <ascii_ctrl_bit_clear>
    
    ascii_write_controller(data);
20000902:	1dfb      	adds	r3, r7, #7
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	0018      	movs	r0, r3
20000908:	f7ff ff8e 	bl	20000828 <ascii_write_controller>
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	b002      	add	sp, #8
20000912:	bd80      	pop	{r7, pc}

20000914 <ascii_write_char>:

void ascii_write_char(unsigned char c, int delay)
{
20000914:	b580      	push	{r7, lr}
20000916:	b082      	sub	sp, #8
20000918:	af00      	add	r7, sp, #0
2000091a:	0002      	movs	r2, r0
2000091c:	6039      	str	r1, [r7, #0]
2000091e:	1dfb      	adds	r3, r7, #7
20000920:	701a      	strb	r2, [r3, #0]
    while ((ascii_read_status() &0x80) == 0x80) {}
20000922:	46c0      	nop			; (mov r8, r8)
20000924:	f7ff ff98 	bl	20000858 <ascii_read_status>
20000928:	0003      	movs	r3, r0
2000092a:	001a      	movs	r2, r3
2000092c:	2380      	movs	r3, #128	; 0x80
2000092e:	4013      	ands	r3, r2
20000930:	2b80      	cmp	r3, #128	; 0x80
20000932:	d0f7      	beq.n	20000924 <ascii_write_char+0x10>
    delay_mikro(8); /*latenstid för kommando */
20000934:	2008      	movs	r0, #8
20000936:	f000 f943 	bl	20000bc0 <delay_mikro>
	
    ascii_write_data(c);
2000093a:	1dfb      	adds	r3, r7, #7
2000093c:	781b      	ldrb	r3, [r3, #0]
2000093e:	0018      	movs	r0, r3
20000940:	f7ff ffd3 	bl	200008ea <ascii_write_data>
    delay_mikro(delay);
20000944:	683b      	ldr	r3, [r7, #0]
20000946:	0018      	movs	r0, r3
20000948:	f000 f93a 	bl	20000bc0 <delay_mikro>
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b002      	add	sp, #8
20000952:	bd80      	pop	{r7, pc}

20000954 <ascii_init>:

void ascii_init()
{
20000954:	b580      	push	{r7, lr}
20000956:	af00      	add	r7, sp, #0
   	// function
    while ((ascii_read_status() &0x80) == 0x80) {}
20000958:	46c0      	nop			; (mov r8, r8)
2000095a:	f7ff ff7d 	bl	20000858 <ascii_read_status>
2000095e:	0003      	movs	r3, r0
20000960:	001a      	movs	r2, r3
20000962:	2380      	movs	r3, #128	; 0x80
20000964:	4013      	ands	r3, r2
20000966:	2b80      	cmp	r3, #128	; 0x80
20000968:	d0f7      	beq.n	2000095a <ascii_init+0x6>
    delay_mikro(8); /*latenstid för kommando */
2000096a:	2008      	movs	r0, #8
2000096c:	f000 f928 	bl	20000bc0 <delay_mikro>
	
    ascii_write_cmd(0x38);
20000970:	2038      	movs	r0, #56	; 0x38
20000972:	f7ff ffa5 	bl	200008c0 <ascii_write_cmd>
    delay_mikro(39);
20000976:	2027      	movs	r0, #39	; 0x27
20000978:	f000 f922 	bl	20000bc0 <delay_mikro>
    while ((ascii_read_status() &0x80) == 0x80) {}
2000097c:	46c0      	nop			; (mov r8, r8)
2000097e:	f7ff ff6b 	bl	20000858 <ascii_read_status>
20000982:	0003      	movs	r3, r0
20000984:	001a      	movs	r2, r3
20000986:	2380      	movs	r3, #128	; 0x80
20000988:	4013      	ands	r3, r2
2000098a:	2b80      	cmp	r3, #128	; 0x80
2000098c:	d0f7      	beq.n	2000097e <ascii_init+0x2a>
    delay_mikro(8); /*latenstid för kommando */
2000098e:	2008      	movs	r0, #8
20000990:	f000 f916 	bl	20000bc0 <delay_mikro>

   	// activate display
    ascii_write_cmd(0x0C);
20000994:	200c      	movs	r0, #12
20000996:	f7ff ff93 	bl	200008c0 <ascii_write_cmd>
    delay_mikro(39);
2000099a:	2027      	movs	r0, #39	; 0x27
2000099c:	f000 f910 	bl	20000bc0 <delay_mikro>
    while ((ascii_read_status() &0x80) == 0x80) {}
200009a0:	46c0      	nop			; (mov r8, r8)
200009a2:	f7ff ff59 	bl	20000858 <ascii_read_status>
200009a6:	0003      	movs	r3, r0
200009a8:	001a      	movs	r2, r3
200009aa:	2380      	movs	r3, #128	; 0x80
200009ac:	4013      	ands	r3, r2
200009ae:	2b80      	cmp	r3, #128	; 0x80
200009b0:	d0f7      	beq.n	200009a2 <ascii_init+0x4e>

    delay_mikro(8); /*latenstid för kommando */
200009b2:	2008      	movs	r0, #8
200009b4:	f000 f904 	bl	20000bc0 <delay_mikro>

   	// from slides
    /*vänta tills display är klar att ta emot kommando */
    while ((ascii_read_status() &0x80) == 0x80) {}
200009b8:	46c0      	nop			; (mov r8, r8)
200009ba:	f7ff ff4d 	bl	20000858 <ascii_read_status>
200009be:	0003      	movs	r3, r0
200009c0:	001a      	movs	r2, r3
200009c2:	2380      	movs	r3, #128	; 0x80
200009c4:	4013      	ands	r3, r2
200009c6:	2b80      	cmp	r3, #128	; 0x80
200009c8:	d0f7      	beq.n	200009ba <ascii_init+0x66>

    delay_mikro(8); /*latenstid för kommando */
200009ca:	2008      	movs	r0, #8
200009cc:	f000 f8f8 	bl	20000bc0 <delay_mikro>
    ascii_write_cmd(1); /*kommando: "Clear display" */
200009d0:	2001      	movs	r0, #1
200009d2:	f7ff ff75 	bl	200008c0 <ascii_write_cmd>
    delay_milli(2); /*i stället för 1,53 ms */
200009d6:	2002      	movs	r0, #2
200009d8:	f000 f90d 	bl	20000bf6 <delay_milli>

   	// entry mode
    ascii_write_cmd(6);
200009dc:	2006      	movs	r0, #6
200009de:	f7ff ff6f 	bl	200008c0 <ascii_write_cmd>
    //delay_mikro(39);
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	bd80      	pop	{r7, pc}

200009e8 <ascii_gotoxy1>:

void ascii_gotoxy1(char x, char y)
{
200009e8:	b580      	push	{r7, lr}
200009ea:	b084      	sub	sp, #16
200009ec:	af00      	add	r7, sp, #0
200009ee:	0002      	movs	r2, r0
200009f0:	1dfb      	adds	r3, r7, #7
200009f2:	701a      	strb	r2, [r3, #0]
200009f4:	1dbb      	adds	r3, r7, #6
200009f6:	1c0a      	adds	r2, r1, #0
200009f8:	701a      	strb	r2, [r3, #0]
    char address;

    if (y != 1)
200009fa:	1dbb      	adds	r3, r7, #6
200009fc:	781b      	ldrb	r3, [r3, #0]
200009fe:	2b01      	cmp	r3, #1
20000a00:	d00b      	beq.n	20000a1a <ascii_gotoxy1+0x32>
    {
       	// why tho??
        address = 0x40 | (x - 1);
20000a02:	1dfb      	adds	r3, r7, #7
20000a04:	781b      	ldrb	r3, [r3, #0]
20000a06:	3b01      	subs	r3, #1
20000a08:	b2db      	uxtb	r3, r3
20000a0a:	b25b      	sxtb	r3, r3
20000a0c:	2240      	movs	r2, #64	; 0x40
20000a0e:	4313      	orrs	r3, r2
20000a10:	b25a      	sxtb	r2, r3
20000a12:	230f      	movs	r3, #15
20000a14:	18fb      	adds	r3, r7, r3
20000a16:	701a      	strb	r2, [r3, #0]
20000a18:	e005      	b.n	20000a26 <ascii_gotoxy1+0x3e>
    }
    else
    {
        address = x - 1;
20000a1a:	230f      	movs	r3, #15
20000a1c:	18fb      	adds	r3, r7, r3
20000a1e:	1dfa      	adds	r2, r7, #7
20000a20:	7812      	ldrb	r2, [r2, #0]
20000a22:	3a01      	subs	r2, #1
20000a24:	701a      	strb	r2, [r3, #0]
    }

    ascii_write_cmd(0x80 | address);
20000a26:	230f      	movs	r3, #15
20000a28:	18fb      	adds	r3, r7, r3
20000a2a:	781b      	ldrb	r3, [r3, #0]
20000a2c:	2280      	movs	r2, #128	; 0x80
20000a2e:	4252      	negs	r2, r2
20000a30:	4313      	orrs	r3, r2
20000a32:	b2db      	uxtb	r3, r3
20000a34:	0018      	movs	r0, r3
20000a36:	f7ff ff43 	bl	200008c0 <ascii_write_cmd>
}
20000a3a:	46c0      	nop			; (mov r8, r8)
20000a3c:	46bd      	mov	sp, r7
20000a3e:	b004      	add	sp, #16
20000a40:	bd80      	pop	{r7, pc}

20000a42 <ascii_gotoxy>:

void ascii_gotoxy(char x, char y)
{
20000a42:	b580      	push	{r7, lr}
20000a44:	b084      	sub	sp, #16
20000a46:	af00      	add	r7, sp, #0
20000a48:	0002      	movs	r2, r0
20000a4a:	1dfb      	adds	r3, r7, #7
20000a4c:	701a      	strb	r2, [r3, #0]
20000a4e:	1dbb      	adds	r3, r7, #6
20000a50:	1c0a      	adds	r2, r1, #0
20000a52:	701a      	strb	r2, [r3, #0]
    char address;
    
    //if ( y == 2) address = address + 0x40;
    if ( y == 2) address = 0x40 | (x - 1);
20000a54:	1dbb      	adds	r3, r7, #6
20000a56:	781b      	ldrb	r3, [r3, #0]
20000a58:	2b02      	cmp	r3, #2
20000a5a:	d10b      	bne.n	20000a74 <ascii_gotoxy+0x32>
20000a5c:	1dfb      	adds	r3, r7, #7
20000a5e:	781b      	ldrb	r3, [r3, #0]
20000a60:	3b01      	subs	r3, #1
20000a62:	b2db      	uxtb	r3, r3
20000a64:	b25b      	sxtb	r3, r3
20000a66:	2240      	movs	r2, #64	; 0x40
20000a68:	4313      	orrs	r3, r2
20000a6a:	b25a      	sxtb	r2, r3
20000a6c:	230f      	movs	r3, #15
20000a6e:	18fb      	adds	r3, r7, r3
20000a70:	701a      	strb	r2, [r3, #0]
20000a72:	e005      	b.n	20000a80 <ascii_gotoxy+0x3e>
    else address = x-1;
20000a74:	230f      	movs	r3, #15
20000a76:	18fb      	adds	r3, r7, r3
20000a78:	1dfa      	adds	r2, r7, #7
20000a7a:	7812      	ldrb	r2, [r2, #0]
20000a7c:	3a01      	subs	r2, #1
20000a7e:	701a      	strb	r2, [r3, #0]

    ascii_write_cmd(0x80 | address);
20000a80:	230f      	movs	r3, #15
20000a82:	18fb      	adds	r3, r7, r3
20000a84:	781b      	ldrb	r3, [r3, #0]
20000a86:	2280      	movs	r2, #128	; 0x80
20000a88:	4252      	negs	r2, r2
20000a8a:	4313      	orrs	r3, r2
20000a8c:	b2db      	uxtb	r3, r3
20000a8e:	0018      	movs	r0, r3
20000a90:	f7ff ff16 	bl	200008c0 <ascii_write_cmd>
    
}
20000a94:	46c0      	nop			; (mov r8, r8)
20000a96:	46bd      	mov	sp, r7
20000a98:	b004      	add	sp, #16
20000a9a:	bd80      	pop	{r7, pc}

20000a9c <write_top_display>:

void write_top_display(char text[], int delay) {
20000a9c:	b580      	push	{r7, lr}
20000a9e:	b084      	sub	sp, #16
20000aa0:	af00      	add	r7, sp, #0
20000aa2:	6078      	str	r0, [r7, #4]
20000aa4:	6039      	str	r1, [r7, #0]
    //ascii_init();
    ascii_gotoxy(1,1);
20000aa6:	2101      	movs	r1, #1
20000aa8:	2001      	movs	r0, #1
20000aaa:	f7ff ffca 	bl	20000a42 <ascii_gotoxy>
    char *s;
    s = text;
20000aae:	687b      	ldr	r3, [r7, #4]
20000ab0:	60fb      	str	r3, [r7, #12]
    while(*s) {
20000ab2:	e008      	b.n	20000ac6 <write_top_display+0x2a>
        ascii_write_char(*s++, delay);
20000ab4:	68fb      	ldr	r3, [r7, #12]
20000ab6:	1c5a      	adds	r2, r3, #1
20000ab8:	60fa      	str	r2, [r7, #12]
20000aba:	781b      	ldrb	r3, [r3, #0]
20000abc:	683a      	ldr	r2, [r7, #0]
20000abe:	0011      	movs	r1, r2
20000ac0:	0018      	movs	r0, r3
20000ac2:	f7ff ff27 	bl	20000914 <ascii_write_char>
    while(*s) {
20000ac6:	68fb      	ldr	r3, [r7, #12]
20000ac8:	781b      	ldrb	r3, [r3, #0]
20000aca:	2b00      	cmp	r3, #0
20000acc:	d1f2      	bne.n	20000ab4 <write_top_display+0x18>
    }
}
20000ace:	46c0      	nop			; (mov r8, r8)
20000ad0:	46c0      	nop			; (mov r8, r8)
20000ad2:	46bd      	mov	sp, r7
20000ad4:	b004      	add	sp, #16
20000ad6:	bd80      	pop	{r7, pc}

20000ad8 <write_bottom_display>:

void write_bottom_display(char text[], int delay) {
20000ad8:	b580      	push	{r7, lr}
20000ada:	b084      	sub	sp, #16
20000adc:	af00      	add	r7, sp, #0
20000ade:	6078      	str	r0, [r7, #4]
20000ae0:	6039      	str	r1, [r7, #0]
    
    ascii_gotoxy(1,2);
20000ae2:	2102      	movs	r1, #2
20000ae4:	2001      	movs	r0, #1
20000ae6:	f7ff ffac 	bl	20000a42 <ascii_gotoxy>
    char *s;
    s = text;
20000aea:	687b      	ldr	r3, [r7, #4]
20000aec:	60fb      	str	r3, [r7, #12]
    while(*s) {
20000aee:	e008      	b.n	20000b02 <write_bottom_display+0x2a>
        ascii_write_char(*s++, delay);
20000af0:	68fb      	ldr	r3, [r7, #12]
20000af2:	1c5a      	adds	r2, r3, #1
20000af4:	60fa      	str	r2, [r7, #12]
20000af6:	781b      	ldrb	r3, [r3, #0]
20000af8:	683a      	ldr	r2, [r7, #0]
20000afa:	0011      	movs	r1, r2
20000afc:	0018      	movs	r0, r3
20000afe:	f7ff ff09 	bl	20000914 <ascii_write_char>
    while(*s) {
20000b02:	68fb      	ldr	r3, [r7, #12]
20000b04:	781b      	ldrb	r3, [r3, #0]
20000b06:	2b00      	cmp	r3, #0
20000b08:	d1f2      	bne.n	20000af0 <write_bottom_display+0x18>
    }
}
20000b0a:	46c0      	nop			; (mov r8, r8)
20000b0c:	46c0      	nop			; (mov r8, r8)
20000b0e:	46bd      	mov	sp, r7
20000b10:	b004      	add	sp, #16
20000b12:	bd80      	pop	{r7, pc}

20000b14 <main_1>:

void main_1(void)
{
20000b14:	b5b0      	push	{r4, r5, r7, lr}
20000b16:	b08a      	sub	sp, #40	; 0x28
20000b18:	af00      	add	r7, sp, #0
	
    char *s;
    char test1[] = "How is 8+8=4?";
20000b1a:	2414      	movs	r4, #20
20000b1c:	193b      	adds	r3, r7, r4
20000b1e:	4a15      	ldr	r2, [pc, #84]	; (20000b74 <main_1+0x60>)
20000b20:	ca23      	ldmia	r2!, {r0, r1, r5}
20000b22:	c323      	stmia	r3!, {r0, r1, r5}
20000b24:	8812      	ldrh	r2, [r2, #0]
20000b26:	801a      	strh	r2, [r3, #0]
    char test2[] = "Rotate the clock.";
20000b28:	003b      	movs	r3, r7
20000b2a:	4a13      	ldr	r2, [pc, #76]	; (20000b78 <main_1+0x64>)
20000b2c:	ca23      	ldmia	r2!, {r0, r1, r5}
20000b2e:	c323      	stmia	r3!, {r0, r1, r5}
20000b30:	6811      	ldr	r1, [r2, #0]
20000b32:	6019      	str	r1, [r3, #0]
20000b34:	8892      	ldrh	r2, [r2, #4]
20000b36:	809a      	strh	r2, [r3, #4]
    
    init_app();
20000b38:	f000 f880 	bl	20000c3c <init_app>
    
    ascii_init();
20000b3c:	f7ff ff0a 	bl	20000954 <ascii_init>
    ascii_gotoxy(1,1);
20000b40:	2101      	movs	r1, #1
20000b42:	2001      	movs	r0, #1
20000b44:	f7ff ff7d 	bl	20000a42 <ascii_gotoxy>
    s = test1;
20000b48:	193b      	adds	r3, r7, r4
20000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    while(*s) {
20000b4c:	46c0      	nop			; (mov r8, r8)
20000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b50:	781b      	ldrb	r3, [r3, #0]
20000b52:	2b00      	cmp	r3, #0
20000b54:	d1fb      	bne.n	20000b4e <main_1+0x3a>
        //ascii_write_char(*s++);
    }
    ascii_gotoxy(1,2);
20000b56:	2102      	movs	r1, #2
20000b58:	2001      	movs	r0, #1
20000b5a:	f7ff ff72 	bl	20000a42 <ascii_gotoxy>
    s=test2;
20000b5e:	003b      	movs	r3, r7
20000b60:	627b      	str	r3, [r7, #36]	; 0x24
    while(*s) {
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b66:	781b      	ldrb	r3, [r3, #0]
20000b68:	2b00      	cmp	r3, #0
20000b6a:	d1fb      	bne.n	20000b64 <main_1+0x50>
        ///ascii_write_char(*s++);
    }
    return 0;
20000b6c:	46c0      	nop			; (mov r8, r8)
}
20000b6e:	46bd      	mov	sp, r7
20000b70:	b00a      	add	sp, #40	; 0x28
20000b72:	bdb0      	pop	{r4, r5, r7, pc}
20000b74:	200014bc 			; <UNDEFINED> instruction: 0x200014bc
20000b78:	200014cc 	andcs	r1, r0, ip, asr #9

20000b7c <delay_250ns>:
#include "delay.h"

void delay_250ns(void){
20000b7c:	b580      	push	{r7, lr}
20000b7e:	af00      	add	r7, sp, #0
	
	*STK_CTRL = 0;
20000b80:	4b0c      	ldr	r3, [pc, #48]	; (20000bb4 <delay_250ns+0x38>)
20000b82:	2200      	movs	r2, #0
20000b84:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (0x2A-1);
20000b86:	4b0c      	ldr	r3, [pc, #48]	; (20000bb8 <delay_250ns+0x3c>)
20000b88:	2229      	movs	r2, #41	; 0x29
20000b8a:	601a      	str	r2, [r3, #0]
	*STK_VAL=0;
20000b8c:	4b0b      	ldr	r3, [pc, #44]	; (20000bbc <delay_250ns+0x40>)
20000b8e:	2200      	movs	r2, #0
20000b90:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 1;
20000b92:	4b08      	ldr	r3, [pc, #32]	; (20000bb4 <delay_250ns+0x38>)
20000b94:	2201      	movs	r2, #1
20000b96:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0) {}
20000b98:	46c0      	nop			; (mov r8, r8)
20000b9a:	4b06      	ldr	r3, [pc, #24]	; (20000bb4 <delay_250ns+0x38>)
20000b9c:	681a      	ldr	r2, [r3, #0]
20000b9e:	2380      	movs	r3, #128	; 0x80
20000ba0:	025b      	lsls	r3, r3, #9
20000ba2:	4013      	ands	r3, r2
20000ba4:	d0f9      	beq.n	20000b9a <delay_250ns+0x1e>
		*STK_CTRL = 0;
20000ba6:	4b03      	ldr	r3, [pc, #12]	; (20000bb4 <delay_250ns+0x38>)
20000ba8:	2200      	movs	r2, #0
20000baa:	601a      	str	r2, [r3, #0]
	
}
20000bac:	46c0      	nop			; (mov r8, r8)
20000bae:	46bd      	mov	sp, r7
20000bb0:	bd80      	pop	{r7, pc}
20000bb2:	46c0      	nop			; (mov r8, r8)
20000bb4:	e000e010 	and	lr, r0, r0, lsl r0
20000bb8:	e000e014 	and	lr, r0, r4, lsl r0
20000bbc:	e000e018 	and	lr, r0, r8, lsl r0

20000bc0 <delay_mikro>:

void delay_mikro(unsigned int us){
20000bc0:	b580      	push	{r7, lr}
20000bc2:	b084      	sub	sp, #16
20000bc4:	af00      	add	r7, sp, #0
20000bc6:	6078      	str	r0, [r7, #4]
	
	for (us;us>0;us--){
20000bc8:	e00d      	b.n	20000be6 <delay_mikro+0x26>
		for(int i=0;i<4;i++){
20000bca:	2300      	movs	r3, #0
20000bcc:	60fb      	str	r3, [r7, #12]
20000bce:	e004      	b.n	20000bda <delay_mikro+0x1a>
			delay_250ns();
20000bd0:	f7ff ffd4 	bl	20000b7c <delay_250ns>
		for(int i=0;i<4;i++){
20000bd4:	68fb      	ldr	r3, [r7, #12]
20000bd6:	3301      	adds	r3, #1
20000bd8:	60fb      	str	r3, [r7, #12]
20000bda:	68fb      	ldr	r3, [r7, #12]
20000bdc:	2b03      	cmp	r3, #3
20000bde:	ddf7      	ble.n	20000bd0 <delay_mikro+0x10>
	for (us;us>0;us--){
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	3b01      	subs	r3, #1
20000be4:	607b      	str	r3, [r7, #4]
20000be6:	687b      	ldr	r3, [r7, #4]
20000be8:	2b00      	cmp	r3, #0
20000bea:	d1ee      	bne.n	20000bca <delay_mikro+0xa>
		}
	}
}
20000bec:	46c0      	nop			; (mov r8, r8)
20000bee:	46c0      	nop			; (mov r8, r8)
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b004      	add	sp, #16
20000bf4:	bd80      	pop	{r7, pc}

20000bf6 <delay_milli>:
	
void delay_milli(unsigned int ms){
20000bf6:	b580      	push	{r7, lr}
20000bf8:	b084      	sub	sp, #16
20000bfa:	af00      	add	r7, sp, #0
20000bfc:	6078      	str	r0, [r7, #4]
    int us=100;// ändrad från 1000 till 100
20000bfe:	2364      	movs	r3, #100	; 0x64
20000c00:	60fb      	str	r3, [r7, #12]
        ms/=10000;
        ms++;
        us/=4;
    #endif
    
    for(ms;ms>0;ms--){
20000c02:	e006      	b.n	20000c12 <delay_milli+0x1c>
        delay_mikro(us);
20000c04:	68fb      	ldr	r3, [r7, #12]
20000c06:	0018      	movs	r0, r3
20000c08:	f7ff ffda 	bl	20000bc0 <delay_mikro>
    for(ms;ms>0;ms--){
20000c0c:	687b      	ldr	r3, [r7, #4]
20000c0e:	3b01      	subs	r3, #1
20000c10:	607b      	str	r3, [r7, #4]
20000c12:	687b      	ldr	r3, [r7, #4]
20000c14:	2b00      	cmp	r3, #0
20000c16:	d1f5      	bne.n	20000c04 <delay_milli+0xe>
    }
20000c18:	46c0      	nop			; (mov r8, r8)
20000c1a:	46c0      	nop			; (mov r8, r8)
20000c1c:	46bd      	mov	sp, r7
20000c1e:	b004      	add	sp, #16
20000c20:	bd80      	pop	{r7, pc}
20000c22:	46c0      	nop			; (mov r8, r8)

20000c24 <graphic_initalize>:



__attribute__((naked))
void graphic_initalize(void){
20000c24:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile (".HWORD 0xDFF0\n");
	__asm volatile ("BX LR \n");
}
20000c28:	46c0      	nop			; (mov r8, r8)

20000c2a <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void){
20000c2a:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile (".HWORD 0xDFF1\n");
	__asm volatile ("BX LR \n");
}
20000c2e:	46c0      	nop			; (mov r8, r8)

20000c30 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x,int y){
20000c30:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile (".HWORD 0xDFF2\n");
	__asm volatile ("BX LR \n");
}
20000c34:	46c0      	nop			; (mov r8, r8)

20000c36 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y){
20000c36:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile (".HWORD 0xDFF3\n");
	__asm volatile ("BX LR \n");
}
20000c3a:	46c0      	nop			; (mov r8, r8)

20000c3c <init_app>:

void init_app(void)
{
20000c3c:	b580      	push	{r7, lr}
20000c3e:	af00      	add	r7, sp, #0
    /* starta klockor port D och E */
    *((unsigned long *) 0x40023830) = 0x18;
20000c40:	4b06      	ldr	r3, [pc, #24]	; (20000c5c <init_app+0x20>)
20000c42:	2218      	movs	r2, #24
20000c44:	601a      	str	r2, [r3, #0]

    *GPIO_MODER = 0x55005555;
20000c46:	4b06      	ldr	r3, [pc, #24]	; (20000c60 <init_app+0x24>)
20000c48:	4a06      	ldr	r2, [pc, #24]	; (20000c64 <init_app+0x28>)
20000c4a:	601a      	str	r2, [r3, #0]
   	// pull down inputs 
    *GPIO_PUPDR = 0x00AA0000;
20000c4c:	4b06      	ldr	r3, [pc, #24]	; (20000c68 <init_app+0x2c>)
20000c4e:	22aa      	movs	r2, #170	; 0xaa
20000c50:	0412      	lsls	r2, r2, #16
20000c52:	601a      	str	r2, [r3, #0]
}
20000c54:	46c0      	nop			; (mov r8, r8)
20000c56:	46bd      	mov	sp, r7
20000c58:	bd80      	pop	{r7, pc}
20000c5a:	46c0      	nop			; (mov r8, r8)
20000c5c:	40023830 	andmi	r3, r2, r0, lsr r8
20000c60:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c64:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000c68:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000c6c <draw_ballobject>:


    

	
	void draw_ballobject (POBJECT o){
20000c6c:	b580      	push	{r7, lr}
20000c6e:	b084      	sub	sp, #16
20000c70:	af00      	add	r7, sp, #0
20000c72:	6078      	str	r0, [r7, #4]
		
		for (int i=0; o->geo->numpoints > i; i++){
20000c74:	2300      	movs	r3, #0
20000c76:	60fb      	str	r3, [r7, #12]
20000c78:	e01d      	b.n	20000cb6 <draw_ballobject+0x4a>
		graphic_pixel_set(o -> geo->px[i].x+o->posx,o->geo->px[i].y+o->posy);	
20000c7a:	687b      	ldr	r3, [r7, #4]
20000c7c:	681a      	ldr	r2, [r3, #0]
20000c7e:	68fb      	ldr	r3, [r7, #12]
20000c80:	3304      	adds	r3, #4
20000c82:	005b      	lsls	r3, r3, #1
20000c84:	18d3      	adds	r3, r2, r3
20000c86:	3304      	adds	r3, #4
20000c88:	781b      	ldrb	r3, [r3, #0]
20000c8a:	001a      	movs	r2, r3
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	68db      	ldr	r3, [r3, #12]
20000c90:	18d0      	adds	r0, r2, r3
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	681a      	ldr	r2, [r3, #0]
20000c96:	68fb      	ldr	r3, [r7, #12]
20000c98:	3304      	adds	r3, #4
20000c9a:	005b      	lsls	r3, r3, #1
20000c9c:	18d3      	adds	r3, r2, r3
20000c9e:	3305      	adds	r3, #5
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	001a      	movs	r2, r3
20000ca4:	687b      	ldr	r3, [r7, #4]
20000ca6:	691b      	ldr	r3, [r3, #16]
20000ca8:	18d3      	adds	r3, r2, r3
20000caa:	0019      	movs	r1, r3
20000cac:	f7ff ffc0 	bl	20000c30 <graphic_pixel_set>
		for (int i=0; o->geo->numpoints > i; i++){
20000cb0:	68fb      	ldr	r3, [r7, #12]
20000cb2:	3301      	adds	r3, #1
20000cb4:	60fb      	str	r3, [r7, #12]
20000cb6:	687b      	ldr	r3, [r7, #4]
20000cb8:	681b      	ldr	r3, [r3, #0]
20000cba:	681b      	ldr	r3, [r3, #0]
20000cbc:	68fa      	ldr	r2, [r7, #12]
20000cbe:	429a      	cmp	r2, r3
20000cc0:	dbdb      	blt.n	20000c7a <draw_ballobject+0xe>
		}
	}
20000cc2:	46c0      	nop			; (mov r8, r8)
20000cc4:	46c0      	nop			; (mov r8, r8)
20000cc6:	46bd      	mov	sp, r7
20000cc8:	b004      	add	sp, #16
20000cca:	bd80      	pop	{r7, pc}

20000ccc <clear_ballobject>:
	
	void clear_ballobject (POBJECT o){
20000ccc:	b580      	push	{r7, lr}
20000cce:	b084      	sub	sp, #16
20000cd0:	af00      	add	r7, sp, #0
20000cd2:	6078      	str	r0, [r7, #4]
		for (int i =0; o->geo->numpoints > i; i++){
20000cd4:	2300      	movs	r3, #0
20000cd6:	60fb      	str	r3, [r7, #12]
20000cd8:	e01d      	b.n	20000d16 <clear_ballobject+0x4a>
			graphic_pixel_clear( o-> geo ->px[i].x+o->posx,o->geo->px[i].y+o->posy);
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	681a      	ldr	r2, [r3, #0]
20000cde:	68fb      	ldr	r3, [r7, #12]
20000ce0:	3304      	adds	r3, #4
20000ce2:	005b      	lsls	r3, r3, #1
20000ce4:	18d3      	adds	r3, r2, r3
20000ce6:	3304      	adds	r3, #4
20000ce8:	781b      	ldrb	r3, [r3, #0]
20000cea:	001a      	movs	r2, r3
20000cec:	687b      	ldr	r3, [r7, #4]
20000cee:	68db      	ldr	r3, [r3, #12]
20000cf0:	18d0      	adds	r0, r2, r3
20000cf2:	687b      	ldr	r3, [r7, #4]
20000cf4:	681a      	ldr	r2, [r3, #0]
20000cf6:	68fb      	ldr	r3, [r7, #12]
20000cf8:	3304      	adds	r3, #4
20000cfa:	005b      	lsls	r3, r3, #1
20000cfc:	18d3      	adds	r3, r2, r3
20000cfe:	3305      	adds	r3, #5
20000d00:	781b      	ldrb	r3, [r3, #0]
20000d02:	001a      	movs	r2, r3
20000d04:	687b      	ldr	r3, [r7, #4]
20000d06:	691b      	ldr	r3, [r3, #16]
20000d08:	18d3      	adds	r3, r2, r3
20000d0a:	0019      	movs	r1, r3
20000d0c:	f7ff ff93 	bl	20000c36 <graphic_pixel_clear>
		for (int i =0; o->geo->numpoints > i; i++){
20000d10:	68fb      	ldr	r3, [r7, #12]
20000d12:	3301      	adds	r3, #1
20000d14:	60fb      	str	r3, [r7, #12]
20000d16:	687b      	ldr	r3, [r7, #4]
20000d18:	681b      	ldr	r3, [r3, #0]
20000d1a:	681b      	ldr	r3, [r3, #0]
20000d1c:	68fa      	ldr	r2, [r7, #12]
20000d1e:	429a      	cmp	r2, r3
20000d20:	dbdb      	blt.n	20000cda <clear_ballobject+0xe>
		}
	}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	46c0      	nop			; (mov r8, r8)
20000d26:	46bd      	mov	sp, r7
20000d28:	b004      	add	sp, #16
20000d2a:	bd80      	pop	{r7, pc}

20000d2c <move_ballobject>:
	
    //void draw_GO();
    
	void move_ballobject(OBJECT *o){
20000d2c:	b580      	push	{r7, lr}
20000d2e:	b084      	sub	sp, #16
20000d30:	af00      	add	r7, sp, #0
20000d32:	6078      	str	r0, [r7, #4]
		
		int newx,newy;
		o-> clear(o);
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	699b      	ldr	r3, [r3, #24]
20000d38:	687a      	ldr	r2, [r7, #4]
20000d3a:	0010      	movs	r0, r2
20000d3c:	4798      	blx	r3
		newx=o->dirx+o->posx;
20000d3e:	687b      	ldr	r3, [r7, #4]
20000d40:	685a      	ldr	r2, [r3, #4]
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	68db      	ldr	r3, [r3, #12]
20000d46:	18d3      	adds	r3, r2, r3
20000d48:	60fb      	str	r3, [r7, #12]
		newy=o->diry+o->posy;
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	689a      	ldr	r2, [r3, #8]
20000d4e:	687b      	ldr	r3, [r7, #4]
20000d50:	691b      	ldr	r3, [r3, #16]
20000d52:	18d3      	adds	r3, r2, r3
20000d54:	60bb      	str	r3, [r7, #8]
		
		if(newx<1){
20000d56:	68fb      	ldr	r3, [r7, #12]
20000d58:	2b00      	cmp	r3, #0
20000d5a:	dc0c      	bgt.n	20000d76 <move_ballobject+0x4a>
			//o->dirx=-o->dirx;
			//newx=1;
            o->set_speed(o,0,0);
20000d5c:	687b      	ldr	r3, [r7, #4]
20000d5e:	6a1b      	ldr	r3, [r3, #32]
20000d60:	6878      	ldr	r0, [r7, #4]
20000d62:	2200      	movs	r2, #0
20000d64:	2100      	movs	r1, #0
20000d66:	4798      	blx	r3
            //draw_GO();
            add_points(2);
20000d68:	2002      	movs	r0, #2
20000d6a:	f7ff f9dd 	bl	20000128 <add_points>
            //reset_ball(o);
            //o->posx = 60;
            //o->posy = 10;
            
            newx = 60;
20000d6e:	233c      	movs	r3, #60	; 0x3c
20000d70:	60fb      	str	r3, [r7, #12]
            newy = 10;
20000d72:	230a      	movs	r3, #10
20000d74:	60bb      	str	r3, [r7, #8]
            
            // POSITION X AND Y CHANGES AT THE BOTTOM
		}
		
		if(newx>128){
20000d76:	68fb      	ldr	r3, [r7, #12]
20000d78:	2b80      	cmp	r3, #128	; 0x80
20000d7a:	dd0c      	ble.n	20000d96 <move_ballobject+0x6a>
			//o->dirx=-o->dirx;
			//newx=128;
            o->set_speed(o,0,0); // BALL STOPS MOVING. YOU LOST
20000d7c:	687b      	ldr	r3, [r7, #4]
20000d7e:	6a1b      	ldr	r3, [r3, #32]
20000d80:	6878      	ldr	r0, [r7, #4]
20000d82:	2200      	movs	r2, #0
20000d84:	2100      	movs	r1, #0
20000d86:	4798      	blx	r3
            //draw_GO();
            add_points(1);
20000d88:	2001      	movs	r0, #1
20000d8a:	f7ff f9cd 	bl	20000128 <add_points>
            newx = 60;
20000d8e:	233c      	movs	r3, #60	; 0x3c
20000d90:	60fb      	str	r3, [r7, #12]
            newy = 10;
20000d92:	230a      	movs	r3, #10
20000d94:	60bb      	str	r3, [r7, #8]
            //reset_ball(o);
            
		}
		
		if(newy<1){
20000d96:	68bb      	ldr	r3, [r7, #8]
20000d98:	2b00      	cmp	r3, #0
20000d9a:	dc06      	bgt.n	20000daa <move_ballobject+0x7e>
			o->diry=-o->diry;
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	689b      	ldr	r3, [r3, #8]
20000da0:	425a      	negs	r2, r3
20000da2:	687b      	ldr	r3, [r7, #4]
20000da4:	609a      	str	r2, [r3, #8]
			newy=1;
20000da6:	2301      	movs	r3, #1
20000da8:	60bb      	str	r3, [r7, #8]
		}
		if(newy>64){
20000daa:	68bb      	ldr	r3, [r7, #8]
20000dac:	2b40      	cmp	r3, #64	; 0x40
20000dae:	dd06      	ble.n	20000dbe <move_ballobject+0x92>
			o->diry=-o->diry;
20000db0:	687b      	ldr	r3, [r7, #4]
20000db2:	689b      	ldr	r3, [r3, #8]
20000db4:	425a      	negs	r2, r3
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	609a      	str	r2, [r3, #8]
			newy=64;
20000dba:	2340      	movs	r3, #64	; 0x40
20000dbc:	60bb      	str	r3, [r7, #8]
		}
		o->posx = newx;
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	68fa      	ldr	r2, [r7, #12]
20000dc2:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000dc4:	687b      	ldr	r3, [r7, #4]
20000dc6:	68ba      	ldr	r2, [r7, #8]
20000dc8:	611a      	str	r2, [r3, #16]
		o-> draw(o);
20000dca:	687b      	ldr	r3, [r7, #4]
20000dcc:	695b      	ldr	r3, [r3, #20]
20000dce:	687a      	ldr	r2, [r7, #4]
20000dd0:	0010      	movs	r0, r2
20000dd2:	4798      	blx	r3
		
	}
20000dd4:	46c0      	nop			; (mov r8, r8)
20000dd6:	46bd      	mov	sp, r7
20000dd8:	b004      	add	sp, #16
20000dda:	bd80      	pop	{r7, pc}

20000ddc <reverse_object_directon>:


void reverse_object_directon(POBJECT o) {
20000ddc:	b580      	push	{r7, lr}
20000dde:	b084      	sub	sp, #16
20000de0:	af00      	add	r7, sp, #0
20000de2:	6078      	str	r0, [r7, #4]
    int newx,newy;
    o-> clear(o);
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	699b      	ldr	r3, [r3, #24]
20000de8:	687a      	ldr	r2, [r7, #4]
20000dea:	0010      	movs	r0, r2
20000dec:	4798      	blx	r3
    newx=o->dirx+o->posx;
20000dee:	687b      	ldr	r3, [r7, #4]
20000df0:	685a      	ldr	r2, [r3, #4]
20000df2:	687b      	ldr	r3, [r7, #4]
20000df4:	68db      	ldr	r3, [r3, #12]
20000df6:	18d3      	adds	r3, r2, r3
20000df8:	60fb      	str	r3, [r7, #12]
    newy=o->diry+o->posy;
20000dfa:	687b      	ldr	r3, [r7, #4]
20000dfc:	689a      	ldr	r2, [r3, #8]
20000dfe:	687b      	ldr	r3, [r7, #4]
20000e00:	691b      	ldr	r3, [r3, #16]
20000e02:	18d3      	adds	r3, r2, r3
20000e04:	60bb      	str	r3, [r7, #8]
    
    o->dirx=-o->dirx;
20000e06:	687b      	ldr	r3, [r7, #4]
20000e08:	685b      	ldr	r3, [r3, #4]
20000e0a:	425a      	negs	r2, r3
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	605a      	str	r2, [r3, #4]
    //o->diry=-o->diry;
    
    //o->posx = newx;
    //o->posy = newy;
    o-> draw(o);
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	695b      	ldr	r3, [r3, #20]
20000e14:	687a      	ldr	r2, [r7, #4]
20000e16:	0010      	movs	r0, r2
20000e18:	4798      	blx	r3
    
}
20000e1a:	46c0      	nop			; (mov r8, r8)
20000e1c:	46bd      	mov	sp, r7
20000e1e:	b004      	add	sp, #16
20000e20:	bd80      	pop	{r7, pc}

20000e22 <move_paddleobject>:
    
void move_paddleobject(POBJECT o){
20000e22:	b580      	push	{r7, lr}
20000e24:	b084      	sub	sp, #16
20000e26:	af00      	add	r7, sp, #0
20000e28:	6078      	str	r0, [r7, #4]
		
		int newx,newy;
        
		o-> clear(o);
20000e2a:	687b      	ldr	r3, [r7, #4]
20000e2c:	699b      	ldr	r3, [r3, #24]
20000e2e:	687a      	ldr	r2, [r7, #4]
20000e30:	0010      	movs	r0, r2
20000e32:	4798      	blx	r3
        
		newx=o->dirx+o->posx;
20000e34:	687b      	ldr	r3, [r7, #4]
20000e36:	685a      	ldr	r2, [r3, #4]
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	68db      	ldr	r3, [r3, #12]
20000e3c:	18d3      	adds	r3, r2, r3
20000e3e:	60bb      	str	r3, [r7, #8]
		newy=o->diry+o->posy;
20000e40:	687b      	ldr	r3, [r7, #4]
20000e42:	689a      	ldr	r2, [r3, #8]
20000e44:	687b      	ldr	r3, [r7, #4]
20000e46:	691b      	ldr	r3, [r3, #16]
20000e48:	18d3      	adds	r3, r2, r3
20000e4a:	60fb      	str	r3, [r7, #12]
		
		
		if(newy<1){
20000e4c:	68fb      	ldr	r3, [r7, #12]
20000e4e:	2b00      	cmp	r3, #0
20000e50:	dc06      	bgt.n	20000e60 <move_paddleobject+0x3e>
			o->diry=-o->diry;
20000e52:	687b      	ldr	r3, [r7, #4]
20000e54:	689b      	ldr	r3, [r3, #8]
20000e56:	425a      	negs	r2, r3
20000e58:	687b      	ldr	r3, [r7, #4]
20000e5a:	609a      	str	r2, [r3, #8]
			newy=1;
20000e5c:	2301      	movs	r3, #1
20000e5e:	60fb      	str	r3, [r7, #12]
		}
		if(newy>64){
20000e60:	68fb      	ldr	r3, [r7, #12]
20000e62:	2b40      	cmp	r3, #64	; 0x40
20000e64:	dd06      	ble.n	20000e74 <move_paddleobject+0x52>
			o->diry=-o->diry;
20000e66:	687b      	ldr	r3, [r7, #4]
20000e68:	689b      	ldr	r3, [r3, #8]
20000e6a:	425a      	negs	r2, r3
20000e6c:	687b      	ldr	r3, [r7, #4]
20000e6e:	609a      	str	r2, [r3, #8]
			newy=64;
20000e70:	2340      	movs	r3, #64	; 0x40
20000e72:	60fb      	str	r3, [r7, #12]
		}
		o->posx = newx;
20000e74:	687b      	ldr	r3, [r7, #4]
20000e76:	68ba      	ldr	r2, [r7, #8]
20000e78:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000e7a:	687b      	ldr	r3, [r7, #4]
20000e7c:	68fa      	ldr	r2, [r7, #12]
20000e7e:	611a      	str	r2, [r3, #16]
		o-> draw(o);
20000e80:	687b      	ldr	r3, [r7, #4]
20000e82:	695b      	ldr	r3, [r3, #20]
20000e84:	687a      	ldr	r2, [r7, #4]
20000e86:	0010      	movs	r0, r2
20000e88:	4798      	blx	r3
        
        o->set_speed(o,0,0); //Så att den slutar röra sig om man släpper tangenten.
20000e8a:	687b      	ldr	r3, [r7, #4]
20000e8c:	6a1b      	ldr	r3, [r3, #32]
20000e8e:	6878      	ldr	r0, [r7, #4]
20000e90:	2200      	movs	r2, #0
20000e92:	2100      	movs	r1, #0
20000e94:	4798      	blx	r3
		
}
20000e96:	46c0      	nop			; (mov r8, r8)
20000e98:	46bd      	mov	sp, r7
20000e9a:	b004      	add	sp, #16
20000e9c:	bd80      	pop	{r7, pc}

20000e9e <set_ballobject_speed>:

set_ballobject_speed(POBJECT o, int speedx,int speedy){
20000e9e:	b580      	push	{r7, lr}
20000ea0:	b084      	sub	sp, #16
20000ea2:	af00      	add	r7, sp, #0
20000ea4:	60f8      	str	r0, [r7, #12]
20000ea6:	60b9      	str	r1, [r7, #8]
20000ea8:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000eaa:	68fb      	ldr	r3, [r7, #12]
20000eac:	68ba      	ldr	r2, [r7, #8]
20000eae:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000eb0:	68fb      	ldr	r3, [r7, #12]
20000eb2:	687a      	ldr	r2, [r7, #4]
20000eb4:	609a      	str	r2, [r3, #8]
    
    //o->set_speed(o,0,0); //Så att den slutar röra sig.
}
20000eb6:	46c0      	nop			; (mov r8, r8)
20000eb8:	0018      	movs	r0, r3
20000eba:	46bd      	mov	sp, r7
20000ebc:	b004      	add	sp, #16
20000ebe:	bd80      	pop	{r7, pc}

20000ec0 <main>:
	move_ballobject,
	set_ballobject_speed
};


void main (void) {
20000ec0:	b590      	push	{r4, r7, lr}
20000ec2:	b087      	sub	sp, #28
20000ec4:	af00      	add	r7, sp, #0
    
char c;
POBJECT p = &ball_object;
20000ec6:	4b45      	ldr	r3, [pc, #276]	; (20000fdc <main+0x11c>)
20000ec8:	617b      	str	r3, [r7, #20]
POBJECT paddle = &paddle_object;
20000eca:	4b45      	ldr	r3, [pc, #276]	; (20000fe0 <main+0x120>)
20000ecc:	613b      	str	r3, [r7, #16]

POBJECT paddle2 = &paddle2_object;
20000ece:	4b45      	ldr	r3, [pc, #276]	; (20000fe4 <main+0x124>)
20000ed0:	60fb      	str	r3, [r7, #12]

init_app();
20000ed2:	f7ff feb3 	bl	20000c3c <init_app>
graphic_initalize();
20000ed6:	f7ff fea5 	bl	20000c24 <graphic_initalize>
graphic_clear_screen();
20000eda:	f7ff fea6 	bl	20000c2a <graphic_clear_screen>

paddle_object.move = &move_paddleobject;
20000ede:	4b40      	ldr	r3, [pc, #256]	; (20000fe0 <main+0x120>)
20000ee0:	4a41      	ldr	r2, [pc, #260]	; (20000fe8 <main+0x128>)
20000ee2:	61da      	str	r2, [r3, #28]
paddle_object.draw = &draw_ballobject;
20000ee4:	4b3e      	ldr	r3, [pc, #248]	; (20000fe0 <main+0x120>)
20000ee6:	4a41      	ldr	r2, [pc, #260]	; (20000fec <main+0x12c>)
20000ee8:	615a      	str	r2, [r3, #20]

paddle2_object.move = &move_paddleobject;
20000eea:	4b3e      	ldr	r3, [pc, #248]	; (20000fe4 <main+0x124>)
20000eec:	4a3e      	ldr	r2, [pc, #248]	; (20000fe8 <main+0x128>)
20000eee:	61da      	str	r2, [r3, #28]
paddle2_object.draw = &draw_ballobject;
20000ef0:	4b3c      	ldr	r3, [pc, #240]	; (20000fe4 <main+0x124>)
20000ef2:	4a3e      	ldr	r2, [pc, #248]	; (20000fec <main+0x12c>)
20000ef4:	615a      	str	r2, [r3, #20]

ball_object.move = &move_ballobject;
20000ef6:	4b39      	ldr	r3, [pc, #228]	; (20000fdc <main+0x11c>)
20000ef8:	4a3d      	ldr	r2, [pc, #244]	; (20000ff0 <main+0x130>)
20000efa:	61da      	str	r2, [r3, #28]
ball_object.draw = &draw_ballobject;
20000efc:	4b37      	ldr	r3, [pc, #220]	; (20000fdc <main+0x11c>)
20000efe:	4a3b      	ldr	r2, [pc, #236]	; (20000fec <main+0x12c>)
20000f00:	615a      	str	r2, [r3, #20]

 //char test1[] = "Player 1: 0pts";
 //write_top_display(test1, 0);
 //generate_text();
 initialize_player_points();
20000f02:	f7ff f9a5 	bl	20000250 <initialize_player_points>
 
    while(1){
        

        
        p->move (p);
20000f06:	697b      	ldr	r3, [r7, #20]
20000f08:	69db      	ldr	r3, [r3, #28]
20000f0a:	697a      	ldr	r2, [r7, #20]
20000f0c:	0010      	movs	r0, r2
20000f0e:	4798      	blx	r3
        delay_milli(1); //ORG=20
20000f10:	2001      	movs	r0, #1
20000f12:	f7ff fe70 	bl	20000bf6 <delay_milli>
        paddle->move(paddle);
20000f16:	693b      	ldr	r3, [r7, #16]
20000f18:	69db      	ldr	r3, [r3, #28]
20000f1a:	693a      	ldr	r2, [r7, #16]
20000f1c:	0010      	movs	r0, r2
20000f1e:	4798      	blx	r3
        paddle2->move(paddle2);
20000f20:	68fb      	ldr	r3, [r7, #12]
20000f22:	69db      	ldr	r3, [r3, #28]
20000f24:	68fa      	ldr	r2, [r7, #12]
20000f26:	0010      	movs	r0, r2
20000f28:	4798      	blx	r3
        
        int intersect1 = object_intersect(paddle, p);
20000f2a:	697a      	ldr	r2, [r7, #20]
20000f2c:	693b      	ldr	r3, [r7, #16]
20000f2e:	0011      	movs	r1, r2
20000f30:	0018      	movs	r0, r3
20000f32:	f7ff fb77 	bl	20000624 <object_intersect>
20000f36:	0003      	movs	r3, r0
20000f38:	60bb      	str	r3, [r7, #8]
        int intersect2 = object_intersect(paddle2, p);
20000f3a:	697a      	ldr	r2, [r7, #20]
20000f3c:	68fb      	ldr	r3, [r7, #12]
20000f3e:	0011      	movs	r1, r2
20000f40:	0018      	movs	r0, r3
20000f42:	f7ff fb6f 	bl	20000624 <object_intersect>
20000f46:	0003      	movs	r3, r0
20000f48:	607b      	str	r3, [r7, #4]
        //int intersect = 0;
        if (intersect1 || intersect2) reverse_object_directon(p);
20000f4a:	68bb      	ldr	r3, [r7, #8]
20000f4c:	2b00      	cmp	r3, #0
20000f4e:	d102      	bne.n	20000f56 <main+0x96>
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	2b00      	cmp	r3, #0
20000f54:	d003      	beq.n	20000f5e <main+0x9e>
20000f56:	697b      	ldr	r3, [r7, #20]
20000f58:	0018      	movs	r0, r3
20000f5a:	f7ff ff3f 	bl	20000ddc <reverse_object_directon>
        
        c=keyb();
20000f5e:	1cfc      	adds	r4, r7, #3
20000f60:	f7ff fb30 	bl	200005c4 <keyb>
20000f64:	0003      	movs	r3, r0
20000f66:	7023      	strb	r3, [r4, #0]
            switch(c){
20000f68:	1cfb      	adds	r3, r7, #3
20000f6a:	781b      	ldrb	r3, [r3, #0]
20000f6c:	2b09      	cmp	r3, #9
20000f6e:	d8ca      	bhi.n	20000f06 <main+0x46>
20000f70:	009a      	lsls	r2, r3, #2
20000f72:	4b20      	ldr	r3, [pc, #128]	; (20000ff4 <main+0x134>)
20000f74:	18d3      	adds	r3, r2, r3
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	469f      	mov	pc, r3
            //case 6: p->set_speed(p,3,0);break;
            //case 4: p->set_speed(p,-3,0);break;
            //case 6: paddle->set_speed(paddle,0,0);break;
            
            case 5: 
                if (end_game) new_game(paddle, paddle2, p);
20000f7a:	4b1f      	ldr	r3, [pc, #124]	; (20000ff8 <main+0x138>)
20000f7c:	681b      	ldr	r3, [r3, #0]
20000f7e:	2b00      	cmp	r3, #0
20000f80:	d006      	beq.n	20000f90 <main+0xd0>
20000f82:	697a      	ldr	r2, [r7, #20]
20000f84:	68f9      	ldr	r1, [r7, #12]
20000f86:	693b      	ldr	r3, [r7, #16]
20000f88:	0018      	movs	r0, r3
20000f8a:	f7ff fa47 	bl	2000041c <new_game>
                else restart_game(paddle, p);
                break;
20000f8e:	e024      	b.n	20000fda <main+0x11a>
                else restart_game(paddle, p);
20000f90:	697a      	ldr	r2, [r7, #20]
20000f92:	693b      	ldr	r3, [r7, #16]
20000f94:	0011      	movs	r1, r2
20000f96:	0018      	movs	r0, r3
20000f98:	f7ff fa80 	bl	2000049c <restart_game>
                break;
20000f9c:	e01d      	b.n	20000fda <main+0x11a>
            
            case 1: paddle2->set_speed(paddle2,0,-3);break;
20000f9e:	68fb      	ldr	r3, [r7, #12]
20000fa0:	6a1b      	ldr	r3, [r3, #32]
20000fa2:	2203      	movs	r2, #3
20000fa4:	4252      	negs	r2, r2
20000fa6:	68f8      	ldr	r0, [r7, #12]
20000fa8:	2100      	movs	r1, #0
20000faa:	4798      	blx	r3
20000fac:	e015      	b.n	20000fda <main+0x11a>
            case 7: paddle2->set_speed(paddle2,0,3);break;
20000fae:	68fb      	ldr	r3, [r7, #12]
20000fb0:	6a1b      	ldr	r3, [r3, #32]
20000fb2:	68f8      	ldr	r0, [r7, #12]
20000fb4:	2203      	movs	r2, #3
20000fb6:	2100      	movs	r1, #0
20000fb8:	4798      	blx	r3
20000fba:	e00e      	b.n	20000fda <main+0x11a>
            
            case 3: paddle->set_speed(paddle,0,-3);break;
20000fbc:	693b      	ldr	r3, [r7, #16]
20000fbe:	6a1b      	ldr	r3, [r3, #32]
20000fc0:	2203      	movs	r2, #3
20000fc2:	4252      	negs	r2, r2
20000fc4:	6938      	ldr	r0, [r7, #16]
20000fc6:	2100      	movs	r1, #0
20000fc8:	4798      	blx	r3
20000fca:	e006      	b.n	20000fda <main+0x11a>
            case 9: paddle->set_speed(paddle,0,3);break;
20000fcc:	693b      	ldr	r3, [r7, #16]
20000fce:	6a1b      	ldr	r3, [r3, #32]
20000fd0:	6938      	ldr	r0, [r7, #16]
20000fd2:	2203      	movs	r2, #3
20000fd4:	2100      	movs	r1, #0
20000fd6:	4798      	blx	r3
20000fd8:	46c0      	nop			; (mov r8, r8)
    while(1){
20000fda:	e794      	b.n	20000f06 <main+0x46>
20000fdc:	2000137c 	andcs	r1, r0, ip, ror r3
20000fe0:	200013a0 	andcs	r1, r0, r0, lsr #7
20000fe4:	200013c4 	andcs	r1, r0, r4, asr #7
20000fe8:	20000e23 	andcs	r0, r0, r3, lsr #28
20000fec:	20000c6d 	andcs	r0, r0, sp, ror #24
20000ff0:	20000d2d 	andcs	r0, r0, sp, lsr #26
20000ff4:	200014e0 	andcs	r1, r0, r0, ror #9
20000ff8:	20001510 	andcs	r1, r0, r0, lsl r5

20000ffc <draw_GO>:
 }

POBJECT g_l = &object_G;
POBJECT o_l = &object_O;

draw_GO() {
20000ffc:	b580      	push	{r7, lr}
20000ffe:	af00      	add	r7, sp, #0
   //POBJECT g = &object_G;
   object_G.move = &move_ballobject;
20001000:	4b0e      	ldr	r3, [pc, #56]	; (2000103c <draw_GO+0x40>)
20001002:	4a0f      	ldr	r2, [pc, #60]	; (20001040 <draw_GO+0x44>)
20001004:	61da      	str	r2, [r3, #28]
   object_G.draw = &draw_ballobject;
20001006:	4b0d      	ldr	r3, [pc, #52]	; (2000103c <draw_GO+0x40>)
20001008:	4a0e      	ldr	r2, [pc, #56]	; (20001044 <draw_GO+0x48>)
2000100a:	615a      	str	r2, [r3, #20]
   g_l->move(g_l);
2000100c:	4b0e      	ldr	r3, [pc, #56]	; (20001048 <draw_GO+0x4c>)
2000100e:	681b      	ldr	r3, [r3, #0]
20001010:	69da      	ldr	r2, [r3, #28]
20001012:	4b0d      	ldr	r3, [pc, #52]	; (20001048 <draw_GO+0x4c>)
20001014:	681b      	ldr	r3, [r3, #0]
20001016:	0018      	movs	r0, r3
20001018:	4790      	blx	r2
   
   //POBJECT o = &object_O;
   object_O.move = &move_ballobject;
2000101a:	4b0c      	ldr	r3, [pc, #48]	; (2000104c <draw_GO+0x50>)
2000101c:	4a08      	ldr	r2, [pc, #32]	; (20001040 <draw_GO+0x44>)
2000101e:	61da      	str	r2, [r3, #28]
   object_O.draw = &draw_ballobject;
20001020:	4b0a      	ldr	r3, [pc, #40]	; (2000104c <draw_GO+0x50>)
20001022:	4a08      	ldr	r2, [pc, #32]	; (20001044 <draw_GO+0x48>)
20001024:	615a      	str	r2, [r3, #20]
   o_l->move(o_l);
20001026:	4b0a      	ldr	r3, [pc, #40]	; (20001050 <draw_GO+0x54>)
20001028:	681b      	ldr	r3, [r3, #0]
2000102a:	69da      	ldr	r2, [r3, #28]
2000102c:	4b08      	ldr	r3, [pc, #32]	; (20001050 <draw_GO+0x54>)
2000102e:	681b      	ldr	r3, [r3, #0]
20001030:	0018      	movs	r0, r3
20001032:	4790      	blx	r2
}
20001034:	46c0      	nop			; (mov r8, r8)
20001036:	0018      	movs	r0, r3
20001038:	46bd      	mov	sp, r7
2000103a:	bd80      	pop	{r7, pc}
2000103c:	200013e8 	andcs	r1, r0, r8, ror #7
20001040:	20000d2d 	andcs	r0, r0, sp, lsr #26
20001044:	20000c6d 	andcs	r0, r0, sp, ror #24
20001048:	20001430 	andcs	r1, r0, r0, lsr r4
2000104c:	2000140c 	andcs	r1, r0, ip, lsl #8
20001050:	20001434 	andcs	r1, r0, r4, lsr r4

20001054 <remove_GO>:

remove_GO() {
20001054:	b580      	push	{r7, lr}
20001056:	af00      	add	r7, sp, #0
    g_l-> clear(g_l);
20001058:	4b08      	ldr	r3, [pc, #32]	; (2000107c <remove_GO+0x28>)
2000105a:	681b      	ldr	r3, [r3, #0]
2000105c:	699a      	ldr	r2, [r3, #24]
2000105e:	4b07      	ldr	r3, [pc, #28]	; (2000107c <remove_GO+0x28>)
20001060:	681b      	ldr	r3, [r3, #0]
20001062:	0018      	movs	r0, r3
20001064:	4790      	blx	r2
    o_l->clear(o_l);
20001066:	4b06      	ldr	r3, [pc, #24]	; (20001080 <remove_GO+0x2c>)
20001068:	681b      	ldr	r3, [r3, #0]
2000106a:	699a      	ldr	r2, [r3, #24]
2000106c:	4b04      	ldr	r3, [pc, #16]	; (20001080 <remove_GO+0x2c>)
2000106e:	681b      	ldr	r3, [r3, #0]
20001070:	0018      	movs	r0, r3
20001072:	4790      	blx	r2
}
20001074:	46c0      	nop			; (mov r8, r8)
20001076:	0018      	movs	r0, r3
20001078:	46bd      	mov	sp, r7
2000107a:	bd80      	pop	{r7, pc}
2000107c:	20001430 	andcs	r1, r0, r0, lsr r4
20001080:	20001434 	andcs	r1, r0, r4, lsr r4

20001084 <__divsi3>:
20001084:	4603      	mov	r3, r0
20001086:	430b      	orrs	r3, r1
20001088:	d47f      	bmi.n	2000118a <__divsi3+0x106>
2000108a:	2200      	movs	r2, #0
2000108c:	0843      	lsrs	r3, r0, #1
2000108e:	428b      	cmp	r3, r1
20001090:	d374      	bcc.n	2000117c <__divsi3+0xf8>
20001092:	0903      	lsrs	r3, r0, #4
20001094:	428b      	cmp	r3, r1
20001096:	d35f      	bcc.n	20001158 <__divsi3+0xd4>
20001098:	0a03      	lsrs	r3, r0, #8
2000109a:	428b      	cmp	r3, r1
2000109c:	d344      	bcc.n	20001128 <__divsi3+0xa4>
2000109e:	0b03      	lsrs	r3, r0, #12
200010a0:	428b      	cmp	r3, r1
200010a2:	d328      	bcc.n	200010f6 <__divsi3+0x72>
200010a4:	0c03      	lsrs	r3, r0, #16
200010a6:	428b      	cmp	r3, r1
200010a8:	d30d      	bcc.n	200010c6 <__divsi3+0x42>
200010aa:	22ff      	movs	r2, #255	; 0xff
200010ac:	0209      	lsls	r1, r1, #8
200010ae:	ba12      	rev	r2, r2
200010b0:	0c03      	lsrs	r3, r0, #16
200010b2:	428b      	cmp	r3, r1
200010b4:	d302      	bcc.n	200010bc <__divsi3+0x38>
200010b6:	1212      	asrs	r2, r2, #8
200010b8:	0209      	lsls	r1, r1, #8
200010ba:	d065      	beq.n	20001188 <__divsi3+0x104>
200010bc:	0b03      	lsrs	r3, r0, #12
200010be:	428b      	cmp	r3, r1
200010c0:	d319      	bcc.n	200010f6 <__divsi3+0x72>
200010c2:	e000      	b.n	200010c6 <__divsi3+0x42>
200010c4:	0a09      	lsrs	r1, r1, #8
200010c6:	0bc3      	lsrs	r3, r0, #15
200010c8:	428b      	cmp	r3, r1
200010ca:	d301      	bcc.n	200010d0 <__divsi3+0x4c>
200010cc:	03cb      	lsls	r3, r1, #15
200010ce:	1ac0      	subs	r0, r0, r3
200010d0:	4152      	adcs	r2, r2
200010d2:	0b83      	lsrs	r3, r0, #14
200010d4:	428b      	cmp	r3, r1
200010d6:	d301      	bcc.n	200010dc <__divsi3+0x58>
200010d8:	038b      	lsls	r3, r1, #14
200010da:	1ac0      	subs	r0, r0, r3
200010dc:	4152      	adcs	r2, r2
200010de:	0b43      	lsrs	r3, r0, #13
200010e0:	428b      	cmp	r3, r1
200010e2:	d301      	bcc.n	200010e8 <__divsi3+0x64>
200010e4:	034b      	lsls	r3, r1, #13
200010e6:	1ac0      	subs	r0, r0, r3
200010e8:	4152      	adcs	r2, r2
200010ea:	0b03      	lsrs	r3, r0, #12
200010ec:	428b      	cmp	r3, r1
200010ee:	d301      	bcc.n	200010f4 <__divsi3+0x70>
200010f0:	030b      	lsls	r3, r1, #12
200010f2:	1ac0      	subs	r0, r0, r3
200010f4:	4152      	adcs	r2, r2
200010f6:	0ac3      	lsrs	r3, r0, #11
200010f8:	428b      	cmp	r3, r1
200010fa:	d301      	bcc.n	20001100 <__divsi3+0x7c>
200010fc:	02cb      	lsls	r3, r1, #11
200010fe:	1ac0      	subs	r0, r0, r3
20001100:	4152      	adcs	r2, r2
20001102:	0a83      	lsrs	r3, r0, #10
20001104:	428b      	cmp	r3, r1
20001106:	d301      	bcc.n	2000110c <__divsi3+0x88>
20001108:	028b      	lsls	r3, r1, #10
2000110a:	1ac0      	subs	r0, r0, r3
2000110c:	4152      	adcs	r2, r2
2000110e:	0a43      	lsrs	r3, r0, #9
20001110:	428b      	cmp	r3, r1
20001112:	d301      	bcc.n	20001118 <__divsi3+0x94>
20001114:	024b      	lsls	r3, r1, #9
20001116:	1ac0      	subs	r0, r0, r3
20001118:	4152      	adcs	r2, r2
2000111a:	0a03      	lsrs	r3, r0, #8
2000111c:	428b      	cmp	r3, r1
2000111e:	d301      	bcc.n	20001124 <__divsi3+0xa0>
20001120:	020b      	lsls	r3, r1, #8
20001122:	1ac0      	subs	r0, r0, r3
20001124:	4152      	adcs	r2, r2
20001126:	d2cd      	bcs.n	200010c4 <__divsi3+0x40>
20001128:	09c3      	lsrs	r3, r0, #7
2000112a:	428b      	cmp	r3, r1
2000112c:	d301      	bcc.n	20001132 <__divsi3+0xae>
2000112e:	01cb      	lsls	r3, r1, #7
20001130:	1ac0      	subs	r0, r0, r3
20001132:	4152      	adcs	r2, r2
20001134:	0983      	lsrs	r3, r0, #6
20001136:	428b      	cmp	r3, r1
20001138:	d301      	bcc.n	2000113e <__divsi3+0xba>
2000113a:	018b      	lsls	r3, r1, #6
2000113c:	1ac0      	subs	r0, r0, r3
2000113e:	4152      	adcs	r2, r2
20001140:	0943      	lsrs	r3, r0, #5
20001142:	428b      	cmp	r3, r1
20001144:	d301      	bcc.n	2000114a <__divsi3+0xc6>
20001146:	014b      	lsls	r3, r1, #5
20001148:	1ac0      	subs	r0, r0, r3
2000114a:	4152      	adcs	r2, r2
2000114c:	0903      	lsrs	r3, r0, #4
2000114e:	428b      	cmp	r3, r1
20001150:	d301      	bcc.n	20001156 <__divsi3+0xd2>
20001152:	010b      	lsls	r3, r1, #4
20001154:	1ac0      	subs	r0, r0, r3
20001156:	4152      	adcs	r2, r2
20001158:	08c3      	lsrs	r3, r0, #3
2000115a:	428b      	cmp	r3, r1
2000115c:	d301      	bcc.n	20001162 <__divsi3+0xde>
2000115e:	00cb      	lsls	r3, r1, #3
20001160:	1ac0      	subs	r0, r0, r3
20001162:	4152      	adcs	r2, r2
20001164:	0883      	lsrs	r3, r0, #2
20001166:	428b      	cmp	r3, r1
20001168:	d301      	bcc.n	2000116e <__divsi3+0xea>
2000116a:	008b      	lsls	r3, r1, #2
2000116c:	1ac0      	subs	r0, r0, r3
2000116e:	4152      	adcs	r2, r2
20001170:	0843      	lsrs	r3, r0, #1
20001172:	428b      	cmp	r3, r1
20001174:	d301      	bcc.n	2000117a <__divsi3+0xf6>
20001176:	004b      	lsls	r3, r1, #1
20001178:	1ac0      	subs	r0, r0, r3
2000117a:	4152      	adcs	r2, r2
2000117c:	1a41      	subs	r1, r0, r1
2000117e:	d200      	bcs.n	20001182 <__divsi3+0xfe>
20001180:	4601      	mov	r1, r0
20001182:	4152      	adcs	r2, r2
20001184:	4610      	mov	r0, r2
20001186:	4770      	bx	lr
20001188:	e05d      	b.n	20001246 <__divsi3+0x1c2>
2000118a:	0fca      	lsrs	r2, r1, #31
2000118c:	d000      	beq.n	20001190 <__divsi3+0x10c>
2000118e:	4249      	negs	r1, r1
20001190:	1003      	asrs	r3, r0, #32
20001192:	d300      	bcc.n	20001196 <__divsi3+0x112>
20001194:	4240      	negs	r0, r0
20001196:	4053      	eors	r3, r2
20001198:	2200      	movs	r2, #0
2000119a:	469c      	mov	ip, r3
2000119c:	0903      	lsrs	r3, r0, #4
2000119e:	428b      	cmp	r3, r1
200011a0:	d32d      	bcc.n	200011fe <__divsi3+0x17a>
200011a2:	0a03      	lsrs	r3, r0, #8
200011a4:	428b      	cmp	r3, r1
200011a6:	d312      	bcc.n	200011ce <__divsi3+0x14a>
200011a8:	22fc      	movs	r2, #252	; 0xfc
200011aa:	0189      	lsls	r1, r1, #6
200011ac:	ba12      	rev	r2, r2
200011ae:	0a03      	lsrs	r3, r0, #8
200011b0:	428b      	cmp	r3, r1
200011b2:	d30c      	bcc.n	200011ce <__divsi3+0x14a>
200011b4:	0189      	lsls	r1, r1, #6
200011b6:	1192      	asrs	r2, r2, #6
200011b8:	428b      	cmp	r3, r1
200011ba:	d308      	bcc.n	200011ce <__divsi3+0x14a>
200011bc:	0189      	lsls	r1, r1, #6
200011be:	1192      	asrs	r2, r2, #6
200011c0:	428b      	cmp	r3, r1
200011c2:	d304      	bcc.n	200011ce <__divsi3+0x14a>
200011c4:	0189      	lsls	r1, r1, #6
200011c6:	d03a      	beq.n	2000123e <__divsi3+0x1ba>
200011c8:	1192      	asrs	r2, r2, #6
200011ca:	e000      	b.n	200011ce <__divsi3+0x14a>
200011cc:	0989      	lsrs	r1, r1, #6
200011ce:	09c3      	lsrs	r3, r0, #7
200011d0:	428b      	cmp	r3, r1
200011d2:	d301      	bcc.n	200011d8 <__divsi3+0x154>
200011d4:	01cb      	lsls	r3, r1, #7
200011d6:	1ac0      	subs	r0, r0, r3
200011d8:	4152      	adcs	r2, r2
200011da:	0983      	lsrs	r3, r0, #6
200011dc:	428b      	cmp	r3, r1
200011de:	d301      	bcc.n	200011e4 <__divsi3+0x160>
200011e0:	018b      	lsls	r3, r1, #6
200011e2:	1ac0      	subs	r0, r0, r3
200011e4:	4152      	adcs	r2, r2
200011e6:	0943      	lsrs	r3, r0, #5
200011e8:	428b      	cmp	r3, r1
200011ea:	d301      	bcc.n	200011f0 <__divsi3+0x16c>
200011ec:	014b      	lsls	r3, r1, #5
200011ee:	1ac0      	subs	r0, r0, r3
200011f0:	4152      	adcs	r2, r2
200011f2:	0903      	lsrs	r3, r0, #4
200011f4:	428b      	cmp	r3, r1
200011f6:	d301      	bcc.n	200011fc <__divsi3+0x178>
200011f8:	010b      	lsls	r3, r1, #4
200011fa:	1ac0      	subs	r0, r0, r3
200011fc:	4152      	adcs	r2, r2
200011fe:	08c3      	lsrs	r3, r0, #3
20001200:	428b      	cmp	r3, r1
20001202:	d301      	bcc.n	20001208 <__divsi3+0x184>
20001204:	00cb      	lsls	r3, r1, #3
20001206:	1ac0      	subs	r0, r0, r3
20001208:	4152      	adcs	r2, r2
2000120a:	0883      	lsrs	r3, r0, #2
2000120c:	428b      	cmp	r3, r1
2000120e:	d301      	bcc.n	20001214 <__divsi3+0x190>
20001210:	008b      	lsls	r3, r1, #2
20001212:	1ac0      	subs	r0, r0, r3
20001214:	4152      	adcs	r2, r2
20001216:	d2d9      	bcs.n	200011cc <__divsi3+0x148>
20001218:	0843      	lsrs	r3, r0, #1
2000121a:	428b      	cmp	r3, r1
2000121c:	d301      	bcc.n	20001222 <__divsi3+0x19e>
2000121e:	004b      	lsls	r3, r1, #1
20001220:	1ac0      	subs	r0, r0, r3
20001222:	4152      	adcs	r2, r2
20001224:	1a41      	subs	r1, r0, r1
20001226:	d200      	bcs.n	2000122a <__divsi3+0x1a6>
20001228:	4601      	mov	r1, r0
2000122a:	4663      	mov	r3, ip
2000122c:	4152      	adcs	r2, r2
2000122e:	105b      	asrs	r3, r3, #1
20001230:	4610      	mov	r0, r2
20001232:	d301      	bcc.n	20001238 <__divsi3+0x1b4>
20001234:	4240      	negs	r0, r0
20001236:	2b00      	cmp	r3, #0
20001238:	d500      	bpl.n	2000123c <__divsi3+0x1b8>
2000123a:	4249      	negs	r1, r1
2000123c:	4770      	bx	lr
2000123e:	4663      	mov	r3, ip
20001240:	105b      	asrs	r3, r3, #1
20001242:	d300      	bcc.n	20001246 <__divsi3+0x1c2>
20001244:	4240      	negs	r0, r0
20001246:	b501      	push	{r0, lr}
20001248:	2000      	movs	r0, #0
2000124a:	f000 f805 	bl	20001258 <__aeabi_idiv0>
2000124e:	bd02      	pop	{r1, pc}

20001250 <__aeabi_idivmod>:
20001250:	2900      	cmp	r1, #0
20001252:	d0f8      	beq.n	20001246 <__divsi3+0x1c2>
20001254:	e716      	b.n	20001084 <__divsi3>
20001256:	4770      	bx	lr

20001258 <__aeabi_idiv0>:
20001258:	4770      	bx	lr
2000125a:	46c0      	nop			; (mov r8, r8)

2000125c <ball_geometry>:
2000125c:	0000000c 	andeq	r0, r0, ip
20001260:	00000004 	andeq	r0, r0, r4
20001264:	00000004 	andeq	r0, r0, r4
20001268:	02000100 	andeq	r0, r0, #0
2000126c:	01010001 	tsteq	r1, r1
20001270:	03010201 	movweq	r0, #4609	; 0x1201
20001274:	01020002 	tsteq	r2, r2
20001278:	03020202 	movweq	r0, #8706	; 0x2202
2000127c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200012a4 <paddle_geometry>:
200012a4:	0000001b 	andeq	r0, r0, fp, lsl r0
200012a8:	00000005 	andeq	r0, r0, r5
200012ac:	00000009 	andeq	r0, r0, r9
200012b0:	02000100 	andeq	r0, r0, #0
200012b4:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
200012b8:	06000500 	streq	r0, [r0], -r0, lsl #10
200012bc:	08000700 	stmdaeq	r0, {r8, r9, sl}
200012c0:	00010000 	andeq	r0, r1, r0
200012c4:	00030002 	andeq	r0, r3, r2
200012c8:	03020004 	movweq	r0, #8196	; 0x2004
200012cc:	05020402 	streq	r0, [r2, #-1026]	; 0xfffffbfe
200012d0:	02040104 	andeq	r0, r4, #1
200012d4:	04040304 	streq	r0, [r4], #-772	; 0xfffffcfc
200012d8:	06040504 	streq	r0, [r4], -r4, lsl #10
200012dc:	08040704 	stmdaeq	r4, {r2, r8, r9, sl}
200012e0:	08010800 	stmdaeq	r1, {fp}
200012e4:	08030802 	stmdaeq	r3, {r1, fp}
200012e8:	00000804 	andeq	r0, r0, r4, lsl #16

200012ec <geometry_G>:
200012ec:	0000000c 	andeq	r0, r0, ip
200012f0:	00000004 	andeq	r0, r0, r4
200012f4:	00000005 	andeq	r0, r0, r5
200012f8:	00020001 	andeq	r0, r2, r1
200012fc:	01000003 	tsteq	r0, r3
20001300:	02020200 	andeq	r0, r2, #0, 4
20001304:	03000203 	movweq	r0, #515	; 0x203
20001308:	04010303 	streq	r0, [r1], #-771	; 0xfffffcfd
2000130c:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
	...

20001334 <geometry_O>:
20001334:	0000000c 	andeq	r0, r0, ip
20001338:	00000004 	andeq	r0, r0, r4
2000133c:	00000005 	andeq	r0, r0, r5
20001340:	00020001 	andeq	r0, r2, r1
20001344:	01000003 	tsteq	r0, r3
20001348:	02000104 	andeq	r0, r0, #1
2000134c:	03000204 	movweq	r0, #516	; 0x204
20001350:	04010304 	streq	r0, [r1], #-772	; 0xfffffcfc
20001354:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
	...

2000137c <ball_object>:
2000137c:	2000125c 	andcs	r1, r0, ip, asr r2
20001380:	00000004 	andeq	r0, r0, r4
20001384:	00000002 	andeq	r0, r0, r2
20001388:	0000003c 	andeq	r0, r0, ip, lsr r0
2000138c:	00000014 	andeq	r0, r0, r4, lsl r0
20001390:	20000c6d 	andcs	r0, r0, sp, ror #24
20001394:	20000ccd 	andcs	r0, r0, sp, asr #25
20001398:	20000d2d 	andcs	r0, r0, sp, lsr #26
2000139c:	20000e9f 	mulcs	r0, pc, lr	; <UNPREDICTABLE>

200013a0 <paddle_object>:
200013a0:	200012a4 	andcs	r1, r0, r4, lsr #5
	...
200013ac:	00000078 	andeq	r0, r0, r8, ror r0
200013b0:	0000001e 	andeq	r0, r0, lr, lsl r0
200013b4:	20000c6d 	andcs	r0, r0, sp, ror #24
200013b8:	20000ccd 	andcs	r0, r0, sp, asr #25
200013bc:	20000e23 	andcs	r0, r0, r3, lsr #28
200013c0:	20000e9f 	mulcs	r0, pc, lr	; <UNPREDICTABLE>

200013c4 <paddle2_object>:
200013c4:	200012a4 	andcs	r1, r0, r4, lsr #5
	...
200013d0:	00000005 	andeq	r0, r0, r5
200013d4:	0000001e 	andeq	r0, r0, lr, lsl r0
200013d8:	20000c6d 	andcs	r0, r0, sp, ror #24
200013dc:	20000ccd 	andcs	r0, r0, sp, asr #25
200013e0:	20000e23 	andcs	r0, r0, r3, lsr #28
200013e4:	20000e9f 	mulcs	r0, pc, lr	; <UNPREDICTABLE>

200013e8 <object_G>:
200013e8:	200012ec 	andcs	r1, r0, ip, ror #5
	...
200013f4:	00000037 	andeq	r0, r0, r7, lsr r0
200013f8:	0000001e 	andeq	r0, r0, lr, lsl r0
200013fc:	20000c6d 	andcs	r0, r0, sp, ror #24
20001400:	20000ccd 	andcs	r0, r0, sp, asr #25
20001404:	20000d2d 	andcs	r0, r0, sp, lsr #26
20001408:	20000e9f 	mulcs	r0, pc, lr	; <UNPREDICTABLE>

2000140c <object_O>:
2000140c:	20001334 	andcs	r1, r0, r4, lsr r3
	...
20001418:	00000041 	andeq	r0, r0, r1, asr #32
2000141c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001420:	20000c6d 	andcs	r0, r0, sp, ror #24
20001424:	20000ccd 	andcs	r0, r0, sp, asr #25
20001428:	20000d2d 	andcs	r0, r0, sp, lsr #26
2000142c:	20000e9f 	mulcs	r0, pc, lr	; <UNPREDICTABLE>

20001430 <g_l>:
20001430:	200013e8 	andcs	r1, r0, r8, ror #7

20001434 <o_l>:
20001434:	2000140c 	andcs	r1, r0, ip, lsl #8
20001438:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
2000143c:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001440:	6e695720 	cdpvs	7, 6, cr5, cr9, cr0, {1}
20001444:	20212173 	eorcs	r2, r1, r3, ror r1
20001448:	00002020 	andeq	r2, r0, r0, lsr #32
2000144c:	73657250 	cmnvc	r5, #80, 4
20001450:	20352073 	eorscs	r2, r5, r3, ror r0
20001454:	20726f66 	rsbscs	r6, r2, r6, ror #30
20001458:	616d6572 	smcvs	54866	; 0xd652
2000145c:	21686374 	smccs	34356	; 0x8634
20001460:	00000000 	andeq	r0, r0, r0
20001464:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001468:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
2000146c:	6e695720 	cdpvs	7, 6, cr5, cr9, cr0, {1}
20001470:	20212173 	eorcs	r2, r1, r3, ror r1
20001474:	00002020 	andeq	r2, r0, r0, lsr #32
20001478:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
2000147c:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001480:	0000003a 	andeq	r0, r0, sl, lsr r0
20001484:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001488:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
2000148c:	0000003a 	andeq	r0, r0, sl, lsr r0
20001490:	696f7020 	stmdbvs	pc!, {r5, ip, sp, lr}^	; <UNPREDICTABLE>
20001494:	0073746e 	rsbseq	r7, r3, lr, ror #8
20001498:	2000055e 	andcs	r0, r0, lr, asr r5
2000149c:	2000053e 	andcs	r0, r0, lr, lsr r5
200014a0:	20000546 	andcs	r0, r0, r6, asr #10
200014a4:	2000054e 	andcs	r0, r0, lr, asr #10
200014a8:	20000556 	andcs	r0, r0, r6, asr r5
200014ac:	0a030201 	beq	200c1cb8 <end_game+0xc07a8>
200014b0:	0b060504 	bleq	201828c8 <end_game+0x1813b8>
200014b4:	0c090807 	stceq	8, cr0, [r9], {7}
200014b8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001488 <o_l+0x54>
200014bc:	20776f48 	rsbscs	r6, r7, r8, asr #30
200014c0:	38207369 	stmdacc	r0!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}
200014c4:	343d382b 	ldrtcc	r3, [sp], #-2091	; 0xfffff7d5
200014c8:	0000003f 	andeq	r0, r0, pc, lsr r0
200014cc:	61746f52 	cmnvs	r4, r2, asr pc
200014d0:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
200014d4:	63206568 			; <UNDEFINED> instruction: 0x63206568
200014d8:	6b636f6c 	blvs	218dd290 <end_game+0x18dbd80>
200014dc:	0000002e 	andeq	r0, r0, lr, lsr #32
200014e0:	20000f06 	andcs	r0, r0, r6, lsl #30
200014e4:	20000f9e 	mulcs	r0, lr, pc	; <UNPREDICTABLE>
200014e8:	20000f06 	andcs	r0, r0, r6, lsl #30
200014ec:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
200014f0:	20000f06 	andcs	r0, r0, r6, lsl #30
200014f4:	20000f7a 	andcs	r0, r0, sl, ror pc
200014f8:	20000f06 	andcs	r0, r0, r6, lsl #30
200014fc:	20000fae 	andcs	r0, r0, lr, lsr #31
20001500:	20000f06 	andcs	r0, r0, r6, lsl #30
20001504:	20000fcc 	andcs	r0, r0, ip, asr #31

20001508 <player1_points>:
20001508:	00000000 	andeq	r0, r0, r0

2000150c <player2_points>:
2000150c:	00000000 	andeq	r0, r0, r0

20001510 <end_game>:
20001510:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000003e3 	andeq	r0, r0, r3, ror #7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000125 	andeq	r0, r0, r5, lsr #2
      10:	0001cf0c 	andeq	ip, r1, ip, lsl #30
      14:	00005300 	andeq	r5, r0, r0, lsl #6
      18:	00002000 	andeq	r2, r0, r0
      1c:	0003fc20 	andeq	pc, r3, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	00440200 	subeq	r0, r4, r0, lsl #4
      28:	06020000 	streq	r0, [r2], -r0
      2c:	0000310c 	andeq	r3, r0, ip, lsl #2
      30:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      34:	00746e69 	rsbseq	r6, r4, r9, ror #28
      38:	00022602 	andeq	r2, r2, r2, lsl #12
      3c:	0c070200 	sfmeq	f0, 4, [r7], {-0}
      40:	00000031 	andeq	r0, r0, r1, lsr r0
      44:	0001a102 	andeq	sl, r1, r2, lsl #2
      48:	0c0f0300 	stceq	3, cr0, [pc], {-0}
      4c:	00000031 	andeq	r0, r0, r1, lsr r0
      50:	fc080104 	stc2	1, cr0, [r8], {4}
      54:	04000002 	streq	r0, [r0], #-2
      58:	00f20704 	rscseq	r0, r2, r4, lsl #14
      5c:	25050000 	strcs	r0, [r5, #-0]
      60:	01000000 	mrseq	r0, (UNDEF: 0)
      64:	03050507 	movweq	r0, #21767	; 0x5507
      68:	20001508 	andcs	r1, r0, r8, lsl #10
      6c:	00003805 	andeq	r3, r0, r5, lsl #16
      70:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
      74:	150c0305 	strne	r0, [ip, #-773]	; 0xfffffcfb
      78:	8f062000 	svchi	0x00062000
      7c:	01000000 	mrseq	r0, (UNDEF: 0)
      80:	00310595 	mlaseq	r1, r5, r5, r0
      84:	03980000 	orrseq	r0, r8, #0, 0
      88:	00842000 	addeq	r2, r4, r0
      8c:	9c010000 	stcls	0, cr0, [r1], {-0}
      90:	00000102 	andeq	r0, r0, r2, lsl #2
      94:	0000a707 	andeq	sl, r0, r7, lsl #14
      98:	17950100 	ldrne	r0, [r5, r0, lsl #2]
      9c:	00000031 	andeq	r0, r0, r1, lsr r0
      a0:	7fac9103 	svcvc	0x00ac9103
      a4:	00023d07 	andeq	r3, r2, r7, lsl #26
      a8:	26950100 	ldrcs	r0, [r5], r0, lsl #2
      ac:	00000031 	andeq	r0, r0, r1, lsr r0
      b0:	7fa89103 	svcvc	0x00a89103
      b4:	00003708 	andeq	r3, r0, r8, lsl #14
      b8:	0a9a0100 	beq	fe6804c0 <end_game+0xde67efb0>
      bc:	00000102 	andeq	r0, r0, r2, lsl #2
      c0:	085c9102 	ldmdaeq	ip, {r1, r8, ip, pc}^
      c4:	00000019 	andeq	r0, r0, r9, lsl r0
      c8:	120a9b01 	andne	r9, sl, #1024	; 0x400
      cc:	02000001 	andeq	r0, r0, #1, 0
      d0:	6c094891 	stcvs	8, cr4, [r9], {145}	; 0x91
      d4:	01006e65 	tsteq	r0, r5, ror #28
      d8:	0031099d 	mlaseq	r1, sp, r9, r0
      dc:	91020000 	mrsls	r0, (UNDEF: 2)
      e0:	011c0844 	tsteq	ip, r4, asr #16
      e4:	a4010000 	strge	r0, [r1], #-0
      e8:	0001220a 	andeq	r2, r1, sl, lsl #4
      ec:	bc910300 	ldclt	3, cr0, [r1], {0}
      f0:	00e7087f 	rsceq	r0, r7, pc, ror r8
      f4:	b1010000 	mrslt	r0, (UNDEF: 1)
      f8:	0001320a 	andeq	r3, r1, sl, lsl #4
      fc:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     100:	500a007f 	andpl	r0, sl, pc, ror r0
     104:	12000000 	andne	r0, r0, #0, 0
     108:	0b000001 	bleq	114 <ascii_startup-0x1ffffeec>
     10c:	00000057 	andeq	r0, r0, r7, asr r0
     110:	500a0009 	andpl	r0, sl, r9
     114:	22000000 	andcs	r0, r0, #0, 0
     118:	0b000001 	bleq	124 <ascii_startup-0x1ffffedc>
     11c:	00000057 	andeq	r0, r0, r7, asr r0
     120:	500a0013 	andpl	r0, sl, r3, lsl r0
     124:	32000000 	andcc	r0, r0, #0, 0
     128:	0b000001 	bleq	134 <ascii_startup-0x1ffffecc>
     12c:	00000057 	andeq	r0, r0, r7, asr r0
     130:	500a0004 	andpl	r0, sl, r4
     134:	42000000 	andmi	r0, r0, #0, 0
     138:	0b000001 	bleq	144 <ascii_startup-0x1ffffebc>
     13c:	00000057 	andeq	r0, r0, r7, asr r0
     140:	d50c0007 	strle	r0, [ip, #-7]
     144:	01000000 	mrseq	r0, (UNDEF: 0)
     148:	0284066b 	addeq	r0, r4, #112197632	; 0x6b00000
     14c:	01142000 	tsteq	r4, r0
     150:	9c010000 	stcls	0, cr0, [r1], {-0}
     154:	000001e6 	andeq	r0, r0, r6, ror #3
     158:	0000ce07 	andeq	ip, r0, r7, lsl #28
     15c:	1c6b0100 	stfnee	f0, [fp], #-0
     160:	00000031 	andeq	r0, r0, r1, lsr r0
     164:	7f9c9103 	svcvc	0x009c9103
     168:	0000b107 	andeq	fp, r0, r7, lsl #2
     16c:	286b0100 	stmdacs	fp!, {r8}^
     170:	00000031 	andeq	r0, r0, r1, lsr r0
     174:	7f989103 	svcvc	0x00989103
     178:	0001b308 	andeq	fp, r1, r8, lsl #6
     17c:	0a6c0100 	beq	1b00584 <ascii_startup-0x1e4ffa7c>
     180:	00000102 	andeq	r0, r0, r2, lsl #2
     184:	08589102 	ldmdaeq	r8, {r1, r8, ip, pc}^
     188:	000001c1 	andeq	r0, r0, r1, asr #3
     18c:	020a6d01 	andeq	r6, sl, #64	; 0x40
     190:	02000001 	andeq	r0, r0, #1, 0
     194:	c2084c91 	andgt	r4, r8, #37120	; 0x9100
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	01120a6e 	tsteq	r2, lr, ror #20
     1a0:	91030000 	mrsls	r0, (UNDEF: 3)
     1a4:	6c097fb8 	stcvs	15, cr7, [r9], {184}	; 0xb8
     1a8:	01006e65 	tsteq	r0, r5, ror #28
     1ac:	0031096f 	eorseq	r0, r1, pc, ror #18
     1b0:	91030000 	mrsls	r0, (UNDEF: 3)
     1b4:	1c087fb4 	stcne	15, cr7, [r8], {180}	; 0xb4
     1b8:	01000001 	tsteq	r0, r1
     1bc:	01220a76 			; <UNDEFINED> instruction: 0x01220a76
     1c0:	91030000 	mrsls	r0, (UNDEF: 3)
     1c4:	aa087fac 	bge	22007c <ascii_startup-0x1fddff84>
     1c8:	01000001 	tsteq	r0, r1
     1cc:	00310977 	eorseq	r0, r1, r7, ror r9
     1d0:	91020000 	mrsls	r0, (UNDEF: 2)
     1d4:	00e70864 	rsceq	r0, r7, r4, ror #16
     1d8:	87010000 	strhi	r0, [r1, -r0]
     1dc:	0001320a 	andeq	r3, r1, sl, lsl #4
     1e0:	a4910300 	ldrge	r0, [r1], #768	; 0x300
     1e4:	000d007f 	andeq	r0, sp, pc, ror r0
     1e8:	01000000 	mrseq	r0, (UNDEF: 0)
     1ec:	02500662 	subseq	r0, r0, #102760448	; 0x6200000
     1f0:	00342000 	eorseq	r2, r4, r0
     1f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1f8:	00010b0e 	andeq	r0, r1, lr, lsl #22
     1fc:	06410100 	strbeq	r0, [r1], -r0, lsl #2
     200:	20000174 	andcs	r0, r0, r4, ror r1
     204:	000000dc 	ldrdeq	r0, [r0], -ip
     208:	02899c01 	addeq	r9, r9, #256	; 0x100
     20c:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
     210:	46200001 	strtmi	r0, [r0], -r1
     214:	4c000000 	stcmi	0, cr0, [r0], {-0}
     218:	10000002 	andne	r0, r0, r2
     21c:	00000021 	andeq	r0, r0, r1, lsr #32
     220:	310d4701 	tstcc	sp, r1, lsl #14
     224:	2d000000 	stccs	0, cr0, [r0, #-0]
     228:	11000002 	tstne	r0, r2
     22c:	02350800 	eorseq	r0, r5, #0, 16
     230:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     234:	00028912 	andeq	r8, r2, r2, lsl r9
     238:	5c910200 	lfmpl	f0, 4, [r1], {0}
     23c:	00021b08 	andeq	r1, r2, r8, lsl #22
     240:	124c0100 	subne	r0, ip, #0
     244:	00000299 	muleq	r0, r9, r2
     248:	00449102 	subeq	r9, r4, r2, lsl #2
     24c:	0001ec12 	andeq	lr, r1, r2, lsl ip
     250:	00004420 	andeq	r4, r0, r0, lsr #8
     254:	00211000 	eoreq	r1, r1, r0
     258:	47010000 	strmi	r0, [r1, -r0]
     25c:	0000310d 	andeq	r3, r0, sp, lsl #2
     260:	00026700 	andeq	r6, r2, r0, lsl #14
     264:	08001100 	stmdaeq	r0, {r8, ip}
     268:	00000235 	andeq	r0, r0, r5, lsr r2
     26c:	89125801 	ldmdbhi	r2, {r0, fp, ip, lr}
     270:	03000002 	movweq	r0, #2
     274:	087fb091 	ldmdaeq	pc!, {r0, r4, r7, ip, sp, pc}^	; <UNPREDICTABLE>
     278:	0000021b 	andeq	r0, r0, fp, lsl r2
     27c:	99125b01 	ldmdbls	r2, {r0, r8, r9, fp, ip, lr}
     280:	03000002 	movweq	r0, #2
     284:	007f9891 			; <UNDEFINED> instruction: 0x007f9891
     288:	00500a00 	subseq	r0, r0, r0, lsl #20
     28c:	02990000 	addseq	r0, r9, #0, 0
     290:	570b0000 	strpl	r0, [fp, -r0]
     294:	12000000 	andne	r0, r0, #0, 0
     298:	00500a00 	subseq	r0, r0, r0, lsl #20
     29c:	02a90000 	adceq	r0, r9, #0, 0
     2a0:	570b0000 	strpl	r0, [fp, -r0]
     2a4:	14000000 	strne	r0, [r0], #-0
     2a8:	00b70c00 	adcseq	r0, r7, r0, lsl #24
     2ac:	31010000 	mrscc	r0, (UNDEF: 1)
     2b0:	00012806 	andeq	r2, r1, r6, lsl #16
     2b4:	00004c20 	andeq	r4, r0, r0, lsr #24
     2b8:	dd9c0100 	ldfles	f0, [ip]
     2bc:	07000002 	streq	r0, [r0, -r2]
     2c0:	000000ce 	andeq	r0, r0, lr, asr #1
     2c4:	31153101 	tstcc	r5, r1, lsl #2
     2c8:	02000000 	andeq	r0, r0, #0, 0
     2cc:	0b137491 	bleq	4dd518 <ascii_startup-0x1fb22ae8>
     2d0:	01000001 	tsteq	r0, r1
     2d4:	0031053c 	eorseq	r0, r1, ip, lsr r5
     2d8:	00110000 	andseq	r0, r1, r0
     2dc:	00290c00 	eoreq	r0, r9, r0, lsl #24
     2e0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     2e4:	0000d806 	andeq	sp, r0, r6, lsl #16
     2e8:	00005020 	andeq	r5, r0, r0, lsr #32
     2ec:	389c0100 	ldmcc	ip, {r8}
     2f0:	14000003 	strne	r0, [r0], #-3
     2f4:	006e656c 	rsbeq	r6, lr, ip, ror #10
     2f8:	38192901 	ldmdacc	r9, {r0, r8, fp, sp}
     2fc:	02000003 	andeq	r0, r0, #3, 0
     300:	eb076c91 	bl	1db54c <ascii_startup-0x1fe24ab4>
     304:	01000000 	mrseq	r0, (UNDEF: 0)
     308:	033e2429 	teqeq	lr, #687865856	; 0x29000000
     30c:	91020000 	mrsls	r0, (UNDEF: 2)
     310:	00980768 	addseq	r0, r8, r8, ror #14
     314:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     318:	00033e32 	andeq	r3, r3, r2, lsr lr
     31c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     320:	0000e412 	andeq	lr, r0, r2, lsl r4
     324:	00003a20 	andeq	r3, r0, r0, lsr #20
     328:	00690900 	rsbeq	r0, r9, r0, lsl #18
     32c:	310e2b01 	tstcc	lr, r1, lsl #22
     330:	02000000 	andeq	r0, r0, #0, 0
     334:	00007491 	muleq	r0, r1, r4
     338:	00310415 	eorseq	r0, r1, r5, lsl r4
     33c:	04150000 	ldreq	r0, [r5], #-0
     340:	00000050 	andeq	r0, r0, r0, asr r0
     344:	0000ff0c 	andeq	pc, r0, ip, lsl #30
     348:	06150100 	ldreq	r0, [r5], -r0, lsl #2
     34c:	2000004c 	andcs	r0, r0, ip, asr #32
     350:	0000008c 	andeq	r0, r0, ip, lsl #1
     354:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
     358:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
     35c:	01006d75 	tsteq	r0, r5, ror sp
     360:	00311615 	eorseq	r1, r1, r5, lsl r6
     364:	91020000 	mrsls	r0, (UNDEF: 2)
     368:	74731464 	ldrbtvc	r1, [r3], #-1124	; 0xfffffb9c
     36c:	15010072 	strne	r0, [r1, #-114]	; 0xffffff8e
     370:	00033e21 	andeq	r3, r3, r1, lsr #28
     374:	60910200 	addsvs	r0, r1, r0, lsl #4
     378:	01006909 	tsteq	r0, r9, lsl #18
     37c:	00310916 	eorseq	r0, r1, r6, lsl r9
     380:	91020000 	mrsls	r0, (UNDEF: 2)
     384:	65720974 	ldrbvs	r0, [r2, #-2420]!	; 0xfffff68c
     388:	1601006d 	strne	r0, [r1], -sp, rrx
     38c:	00003110 	andeq	r3, r0, r0, lsl r1
     390:	68910200 	ldmvs	r1, {r9}
     394:	6e656c09 	cdpvs	12, 6, cr6, cr5, cr9, {0}
     398:	15160100 	ldrne	r0, [r6, #-256]	; 0xffffff00
     39c:	00000031 	andeq	r0, r0, r1, lsr r0
     3a0:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
     3a4:	1601006e 	strne	r0, [r1], -lr, rrx
     3a8:	0000311e 	andeq	r3, r0, lr, lsl r1
     3ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
     3b0:	009d1600 	addseq	r1, sp, r0, lsl #12
     3b4:	0b010000 	bleq	403bc <ascii_startup-0x1ffbfc44>
     3b8:	00003105 	andeq	r3, r0, r5, lsl #2
     3bc:	00002000 	andeq	r2, r0, r0
     3c0:	00002c20 	andeq	r2, r0, r0, lsr #24
     3c4:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     3c8:	00727473 	rsbseq	r7, r2, r3, ror r4
     3cc:	3e150b01 	vnmlscc.f64	d0, d5, d1
     3d0:	02000003 	andeq	r0, r0, #3, 0
     3d4:	6c096c91 	stcvs	12, cr6, [r9], {145}	; 0x91
     3d8:	01006e65 	tsteq	r0, r5, ror #28
     3dc:	0031090c 	eorseq	r0, r1, ip, lsl #18
     3e0:	91020000 	mrsls	r0, (UNDEF: 2)
     3e4:	e9000074 	stmdb	r0, {r2, r4, r5, r6}
     3e8:	04000003 	streq	r0, [r0], #-3
     3ec:	00017400 	andeq	r7, r1, r0, lsl #8
     3f0:	25010400 	strcs	r0, [r1, #-1024]	; 0xfffffc00
     3f4:	0c000001 	stceq	0, cr0, [r0], {1}
     3f8:	000002a4 	andeq	r0, r0, r4, lsr #5
     3fc:	00000053 	andeq	r0, r0, r3, asr r0
     400:	2000041c 	andcs	r0, r0, ip, lsl r4
     404:	00000302 	andeq	r0, r0, r2, lsl #6
     408:	0000027f 	andeq	r0, r0, pc, ror r2
     40c:	00004402 	andeq	r4, r0, r2, lsl #8
     410:	0c060200 	sfmeq	f0, 4, [r6], {-0}
     414:	00000031 	andeq	r0, r0, r1, lsr r0
     418:	69050403 	stmdbvs	r5, {r0, r1, sl}
     41c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     420:	00000226 	andeq	r0, r0, r6, lsr #4
     424:	310c0702 	tstcc	ip, r2, lsl #14
     428:	02000000 	andeq	r0, r0, #0, 0
     42c:	000001a1 	andeq	r0, r0, r1, lsr #3
     430:	310c0f03 	tstcc	ip, r3, lsl #30
     434:	04000000 	streq	r0, [r0], #-0
     438:	09110302 	ldmdbeq	r1, {r1, r8, r9}
     43c:	00000070 	andeq	r0, r0, r0, ror r0
     440:	03007805 	movweq	r7, #2053	; 0x805
     444:	00700a12 	rsbseq	r0, r0, r2, lsl sl
     448:	05000000 	streq	r0, [r0, #-0]
     44c:	12030079 	andne	r0, r3, #121, 0	; 0x79
     450:	0000700c 	andeq	r7, r0, ip
     454:	06000100 	streq	r0, [r0], -r0, lsl #2
     458:	02fc0801 	rscseq	r0, ip, #65536	; 0x10000
     45c:	ed070000 	stc	0, cr0, [r7, #-0]
     460:	03000002 	movweq	r0, #2
     464:	00500313 	subseq	r0, r0, r3, lsl r3
     468:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     46c:	c0091d03 	andgt	r1, r9, r3, lsl #26
     470:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     474:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
     478:	31091e03 	tstcc	r9, r3, lsl #28
     47c:	00000000 	andeq	r0, r0, r0
     480:	00034908 	andeq	r4, r3, r8, lsl #18
     484:	091f0300 	ldmdbeq	pc, {r8, r9}	; <UNPREDICTABLE>
     488:	00000031 	andeq	r0, r0, r1, lsr r0
     48c:	034f0804 	movteq	r0, #63492	; 0xf804
     490:	20030000 	andcs	r0, r3, r0
     494:	00003109 	andeq	r3, r0, r9, lsl #2
     498:	70050800 	andvc	r0, r5, r0, lsl #16
     49c:	21030078 	tstcs	r3, r8, ror r0
     4a0:	0000c00b 	andeq	ip, r0, fp
     4a4:	09000c00 	stmdbeq	r0, {sl, fp}
     4a8:	00000077 	andeq	r0, r0, r7, ror r0
     4ac:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4b0:	0000d00a 	andeq	sp, r0, sl
     4b4:	06001d00 	streq	r1, [r0], -r0, lsl #26
     4b8:	00f20704 	rscseq	r0, r2, r4, lsl #14
     4bc:	47070000 	strmi	r0, [r7, -r0]
     4c0:	03000002 	movweq	r0, #2
     4c4:	00e30e22 	rsceq	r0, r3, r2, lsr #28
     4c8:	040b0000 	streq	r0, [fp], #-0
     4cc:	00000083 	andeq	r0, r0, r3, lsl #1
     4d0:	0003b10c 	andeq	fp, r3, ip, lsl #2
     4d4:	24032400 	strcs	r2, [r3], #-1024	; 0xfffffc00
     4d8:	00016c10 	andeq	r6, r1, r0, lsl ip
     4dc:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
     4e0:	2503006f 	strcs	r0, [r3, #-111]	; 0xffffff91
     4e4:	0000d70f 	andeq	sp, r0, pc, lsl #14
     4e8:	83080000 	movwhi	r0, #32768	; 0x8000
     4ec:	03000002 	movweq	r0, #2
     4f0:	00310926 	eorseq	r0, r1, r6, lsr #18
     4f4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     4f8:	00000288 	andeq	r0, r0, r8, lsl #5
     4fc:	310e2603 	tstcc	lr, r3, lsl #12
     500:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     504:	00030b08 	andeq	r0, r3, r8, lsl #22
     508:	09270300 	stmdbeq	r7!, {r8, r9}
     50c:	00000031 	andeq	r0, r0, r1, lsr r0
     510:	0310080c 	tsteq	r0, #12, 16	; 0xc0000
     514:	27030000 	strcs	r0, [r3, -r0]
     518:	0000310e 	andeq	r3, r0, lr, lsl #2
     51c:	55081000 	strpl	r1, [r8, #-0]
     520:	03000003 	movweq	r0, #3
     524:	017d0c28 	cmneq	sp, r8, lsr #24
     528:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
     52c:	000005d8 	ldrdeq	r0, [r0], -r8
     530:	7d0c2903 	vstrvc.16	s4, [ip, #-6]	; <UNPREDICTABLE>
     534:	18000001 	stmdane	r0, {r0}
     538:	00027108 	andeq	r7, r2, r8, lsl #2
     53c:	0c2a0300 	stceq	3, cr0, [sl], #-0
     540:	0000017d 	andeq	r0, r0, sp, ror r1
     544:	0301081c 	movweq	r0, #6172	; 0x181c
     548:	2b030000 	blcs	c0550 <ascii_startup-0x1ff3fab0>
     54c:	0001980c 	andeq	r9, r1, ip, lsl #16
     550:	0d002000 	stceq	0, cr2, [r0, #-0]
     554:	00000177 	andeq	r0, r0, r7, ror r1
     558:	0001770e 	andeq	r7, r1, lr, lsl #14
     55c:	040b0000 	streq	r0, [fp], #-0
     560:	000000e9 	andeq	r0, r0, r9, ror #1
     564:	016c040b 	cmneq	ip, fp, lsl #8
     568:	980d0000 	stmdals	sp, {}	; <UNPREDICTABLE>
     56c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     570:	00000177 	andeq	r0, r0, r7, ror r1
     574:	0000310e 	andeq	r3, r0, lr, lsl #2
     578:	00310e00 	eorseq	r0, r1, r0, lsl #28
     57c:	0b000000 	bleq	584 <ascii_startup-0x1ffffa7c>
     580:	00018304 	andeq	r8, r1, r4, lsl #6
     584:	03a90700 			; <UNDEFINED> instruction: 0x03a90700
     588:	2c030000 	stccs	0, cr0, [r3], {-0}
     58c:	0001770a 	andeq	r7, r1, sl, lsl #14
     590:	02510f00 	subseq	r0, r1, #0, 30
     594:	86010000 	strhi	r0, [r1], -r0
     598:	00003105 	andeq	r3, r0, r5, lsl #2
     59c:	0006ea00 	andeq	lr, r6, r0, lsl #20
     5a0:	00003420 	andeq	r3, r0, r0, lsr #8
     5a4:	e19c0100 	orrs	r0, ip, r0, lsl #2
     5a8:	10000001 	andne	r0, r0, r1
     5ac:	01003170 	tsteq	r0, r0, ror r1
     5b0:	00771a86 	rsbseq	r1, r7, r6, lsl #21
     5b4:	91020000 	mrsls	r0, (UNDEF: 2)
     5b8:	32701074 	rsbscc	r1, r0, #116, 0	; 0x74
     5bc:	24860100 	strcs	r0, [r6], #256	; 0x100
     5c0:	00000077 	andeq	r0, r0, r7, ror r0
     5c4:	00709102 	rsbseq	r9, r0, r2, lsl #2
     5c8:	0002600f 	andeq	r6, r2, pc
     5cc:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
     5d0:	00000031 	andeq	r0, r0, r1, lsr r0
     5d4:	20000624 	andcs	r0, r0, r4, lsr #12
     5d8:	000000c6 	andeq	r0, r0, r6, asr #1
     5dc:	02829c01 	addeq	r9, r2, #256	; 0x100
     5e0:	70100000 	andsvc	r0, r0, r0
     5e4:	1e730100 	rpwnes	f0, f3, f0
     5e8:	0000019e 	muleq	r0, lr, r1
     5ec:	105c9102 	subsne	r9, ip, r2, lsl #2
     5f0:	73010062 	movwvc	r0, #4194	; 0x1062
     5f4:	00019e29 	andeq	r9, r1, r9, lsr #28
     5f8:	58910200 	ldmpl	r1, {r9}
     5fc:	00029211 	andeq	r9, r2, r1, lsl r2
     600:	09750100 	ldmdbeq	r5!, {r8}^
     604:	00000031 	andeq	r0, r0, r1, lsr r0
     608:	11709102 	cmnne	r0, r2, lsl #2
     60c:	00000315 	andeq	r0, r0, r5, lsl r3
     610:	31097601 	tstcc	r9, r1, lsl #12
     614:	02000000 	andeq	r0, r0, #0, 0
     618:	76116c91 			; <UNDEFINED> instruction: 0x76116c91
     61c:	01000002 	tsteq	r0, r2
     620:	00310977 	eorseq	r0, r1, r7, ror r9
     624:	91020000 	mrsls	r0, (UNDEF: 2)
     628:	03221168 			; <UNDEFINED> instruction: 0x03221168
     62c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     630:	00003109 	andeq	r3, r0, r9, lsl #2
     634:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     638:	00065612 	andeq	r5, r6, r2, lsl r6
     63c:	00008a20 	andeq	r8, r0, r0, lsr #20
     640:	00691300 	rsbeq	r1, r9, r0, lsl #6
     644:	310e7a01 	tstcc	lr, r1, lsl #20
     648:	02000000 	andeq	r0, r0, #0, 0
     64c:	5c127491 	cfldrspl	mvf7, [r2], {145}	; 0x91
     650:	72200006 	eorvc	r0, r0, #6, 0
     654:	11000000 	mrsne	r0, (UNDEF: 0)
     658:	0000038b 	andeq	r0, r0, fp, lsl #7
     65c:	770f7b01 	strvc	r7, [pc, -r1, lsl #22]
     660:	02000000 	andeq	r0, r0, #0, 0
     664:	00006091 	muleq	r0, r1, r0
     668:	035a1400 	cmpeq	sl, #0, 8
     66c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     670:	0002ca0f 	andeq	ip, r2, pc, lsl #20
     674:	0005c400 	andeq	ip, r5, r0, lsl #8
     678:	00006020 	andeq	r6, r0, r0, lsr #32
     67c:	ca9c0100 	bgt	fe700a84 <end_game+0xde6ff574>
     680:	13000002 	movwne	r0, #2
     684:	0079656b 	rsbseq	r6, r9, fp, ror #10
     688:	d1136001 	tstle	r3, r1
     68c:	02000002 	andeq	r0, r0, #2, 0
     690:	72135891 	andsvc	r5, r3, #9502720	; 0x910000
     694:	0100776f 	tsteq	r0, pc, ror #14
     698:	00310963 	eorseq	r0, r1, r3, ror #18
     69c:	91020000 	mrsls	r0, (UNDEF: 2)
     6a0:	6f63136c 	svcvs	0x0063136c
     6a4:	6301006c 	movwvs	r0, #4204	; 0x106c
     6a8:	0000310e 	andeq	r3, r0, lr, lsl #2
     6ac:	68910200 	ldmvs	r1, {r9}
     6b0:	08010600 	stmdaeq	r1, {r9, sl}
     6b4:	000002f3 	strdeq	r0, [r0], -r3
     6b8:	0002ca09 	andeq	ip, r2, r9, lsl #20
     6bc:	0002e100 	andeq	lr, r2, r0, lsl #2
     6c0:	00d00a00 	sbcseq	r0, r0, r0, lsl #20
     6c4:	000f0000 	andeq	r0, pc, r0
     6c8:	0003810f 	andeq	r8, r3, pc, lsl #2
     6cc:	05530100 	ldrbeq	r0, [r3, #-256]	; 0xffffff00
     6d0:	00000031 	andeq	r0, r0, r1, lsr r0
     6d4:	20000578 	andcs	r0, r0, r8, ror r5
     6d8:	0000004c 	andeq	r0, r0, ip, asr #32
     6dc:	03099c01 	movweq	r9, #39937	; 0x9c01
     6e0:	63130000 	tstvs	r3, #0, 0
     6e4:	12550100 	subsne	r0, r5, #0
     6e8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6f0:	00036915 	andeq	r6, r3, r5, lsl r9
     6f4:	063c0100 	ldrteq	r0, [ip], -r0, lsl #2
     6f8:	20000524 	andcs	r0, r0, r4, lsr #10
     6fc:	00000054 	andeq	r0, r0, r4, asr r0
     700:	032f9c01 			; <UNDEFINED> instruction: 0x032f9c01
     704:	72100000 	andsvc	r0, r0, #0, 0
     708:	0100776f 	tsteq	r0, pc, ror #14
     70c:	00d01f3c 	sbcseq	r1, r0, ip, lsr pc
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	92160074 	andsls	r0, r6, #116, 0	; 0x74
     718:	01000003 	tsteq	r0, r3
     71c:	049c0622 	ldreq	r0, [ip], #1570	; 0x622
     720:	00882000 	addeq	r2, r8, r0
     724:	9c010000 	stcls	0, cr0, [r1], {-0}
     728:	0000038c 	andeq	r0, r0, ip, lsl #7
     72c:	01007010 	tsteq	r0, r0, lsl r0
     730:	019e1b22 	orrseq	r1, lr, r2, lsr #22
     734:	91020000 	mrsls	r0, (UNDEF: 2)
     738:	006f106c 	rsbeq	r1, pc, ip, rrx
     73c:	9e262201 	cdpls	2, 2, cr2, cr6, cr1, {0}
     740:	02000001 	andeq	r0, r0, #1, 0
     744:	3f116891 	svccc	0x00116891
     748:	01000003 	tsteq	r0, r3
     74c:	00310923 	eorseq	r0, r1, r3, lsr #18
     750:	91020000 	mrsls	r0, (UNDEF: 2)
     754:	03441174 	movteq	r1, #16756	; 0x4174
     758:	23010000 	movwcs	r0, #4096	; 0x1000
     75c:	0000310e 	andeq	r3, r0, lr, lsl #2
     760:	70910200 	addsvc	r0, r1, r0, lsl #4
     764:	00035f17 	andeq	r5, r3, r7, lsl pc
     768:	05180100 	ldreq	r0, [r8, #-256]	; 0xffffff00
     76c:	00000031 	andeq	r0, r0, r1, lsr r0
     770:	19000018 	stmdbne	r0, {r3, r4}
     774:	0000029b 	muleq	r0, fp, r2
     778:	1c060601 	stcne	6, cr0, [r6], {1}
     77c:	80200004 	eorhi	r0, r0, r4
     780:	01000000 	mrseq	r0, (UNDEF: 0)
     784:	032f1a9c 			; <UNDEFINED> instruction: 0x032f1a9c
     788:	06010000 	streq	r0, [r1], -r0
     78c:	00019e17 	andeq	r9, r1, r7, lsl lr
     790:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     794:	0003371a 	andeq	r3, r3, sl, lsl r7
     798:	28060100 	stmdacs	r6, {r8}
     79c:	0000019e 	muleq	r0, lr, r1
     7a0:	1a709102 	bne	1c24bb0 <ascii_startup-0x1e3db450>
     7a4:	0000028d 	andeq	r0, r0, sp, lsl #5
     7a8:	9e390601 	cfmsuba32ls	mvax0, mvax0, mvfx9, mvfx1
     7ac:	02000001 	andeq	r0, r0, #1, 0
     7b0:	5f1b6c91 	svcpl	0x001b6c91
     7b4:	01000003 	tsteq	r0, r3
     7b8:	00310518 	eorseq	r0, r1, r8, lsl r5
     7bc:	03dd0000 	bicseq	r0, sp, #0, 0
     7c0:	00180000 	andseq	r0, r8, r0
     7c4:	00037517 	andeq	r7, r3, r7, lsl r5
     7c8:	051c0100 	ldreq	r0, [ip, #-256]	; 0xffffff00
     7cc:	00000031 	andeq	r0, r0, r1, lsr r0
     7d0:	00000018 	andeq	r0, r0, r8, lsl r0
     7d4:	00000359 	andeq	r0, r0, r9, asr r3
     7d8:	03350004 	teqeq	r5, #4, 0
     7dc:	01040000 	mrseq	r0, (UNDEF: 4)
     7e0:	00000125 	andeq	r0, r0, r5, lsr #2
     7e4:	0004b40c 	andeq	fp, r4, ip, lsl #8
     7e8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     7f4:	0004ec00 	andeq	lr, r4, r0, lsl #24
     7f8:	03d80200 	bicseq	r0, r8, #0, 4
     7fc:	e6010000 	str	r0, [r1], -r0
     800:	000b1406 	andeq	r1, fp, r6, lsl #8
     804:	00006820 	andeq	r6, r0, r0, lsr #16
     808:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
     80c:	03000000 	movweq	r0, #0
     810:	e9010073 	stmdb	r1, {r0, r1, r4, r5, r6}
     814:	0000750b 	andeq	r7, r0, fp, lsl #10
     818:	6c910200 	lfmvs	f0, 4, [r1], {0}
     81c:	00048a04 	andeq	r8, r4, r4, lsl #20
     820:	0aea0100 	beq	ffa80c28 <end_game+0xdfa7f718>
     824:	00000082 	andeq	r0, r0, r2, lsl #1
     828:	045c9102 	ldrbeq	r9, [ip], #-258	; 0xfffffefe
     82c:	00000490 	muleq	r0, r0, r4
     830:	990aeb01 	stmdbls	sl, {r0, r8, r9, fp, sp, lr, pc}
     834:	02000000 	andeq	r0, r0, #0, 0
     838:	64054891 	strvs	r4, [r5], #-2193	; 0xfffff76f
     83c:	01000004 	tsteq	r0, r4
     840:	00a905ed 	adceq	r0, r9, sp, ror #11
     844:	00060000 	andeq	r0, r6, r0
     848:	7b040700 	blvc	102450 <ascii_startup-0x1fefdbb0>
     84c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     850:	02fc0801 	rscseq	r0, ip, #65536	; 0x10000
     854:	7b090000 	blvc	24085c <ascii_startup-0x1fdbf7a4>
     858:	92000000 	andls	r0, r0, #0, 0
     85c:	0a000000 	beq	864 <ascii_startup-0x1ffff79c>
     860:	00000092 	muleq	r0, r2, r0
     864:	0408000d 	streq	r0, [r8], #-13
     868:	0000f207 	andeq	pc, r0, r7, lsl #4
     86c:	007b0900 	rsbseq	r0, fp, r0, lsl #18
     870:	00a90000 	adceq	r0, r9, r0
     874:	920a0000 	andls	r0, sl, #0, 0
     878:	11000000 	mrsne	r0, (UNDEF: 0)
     87c:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
     880:	00746e69 	rsbseq	r6, r4, r9, ror #28
     884:	00046d02 	andeq	r6, r4, r2, lsl #26
     888:	06dc0100 	ldrbeq	r0, [ip], r0, lsl #2
     88c:	20000ad8 	ldrdcs	r0, [r0], -r8
     890:	0000003c 	andeq	r0, r0, ip, lsr r0
     894:	00f29c01 	rscseq	r9, r2, r1, lsl #24
     898:	980c0000 	stmdals	ip, {}	; <UNPREDICTABLE>
     89c:	01000000 	mrseq	r0, (UNDEF: 0)
     8a0:	007520dc 	ldrsbteq	r2, [r5], #-12
     8a4:	91020000 	mrsls	r0, (UNDEF: 2)
     8a8:	00b10c6c 	adcseq	r0, r1, ip, ror #24
     8ac:	dc010000 	stcle	0, cr0, [r1], {-0}
     8b0:	0000a92c 	andeq	sl, r0, ip, lsr #18
     8b4:	68910200 	ldmvs	r1, {r9}
     8b8:	01007303 	tsteq	r0, r3, lsl #6
     8bc:	00750bdf 	ldrsbteq	r0, [r5], #-191	; 0xffffff41
     8c0:	91020000 	mrsls	r0, (UNDEF: 2)
     8c4:	1c020074 	stcne	0, cr0, [r2], {116}	; 0x74
     8c8:	01000005 	tsteq	r0, r5
     8cc:	0a9c06d2 	beq	fe70241c <end_game+0xde700f0c>
     8d0:	003c2000 	eorseq	r2, ip, r0
     8d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8d8:	00000134 	andeq	r0, r0, r4, lsr r1
     8dc:	0000980c 	andeq	r9, r0, ip, lsl #16
     8e0:	1dd20100 	ldfnee	f0, [r2]
     8e4:	00000075 	andeq	r0, r0, r5, ror r0
     8e8:	0c6c9102 	stfeqp	f1, [ip], #-8
     8ec:	000000b1 	strheq	r0, [r0], -r1
     8f0:	a929d201 	stmdbge	r9!, {r0, r9, ip, lr, pc}
     8f4:	02000000 	andeq	r0, r0, #0, 0
     8f8:	73036891 	movwvc	r6, #14481	; 0x3891
     8fc:	0bd50100 	bleq	ff540d04 <end_game+0xdf53f7f4>
     900:	00000075 	andeq	r0, r0, r5, ror r0
     904:	00749102 	rsbseq	r9, r4, r2, lsl #2
     908:	0003b602 	andeq	fp, r3, r2, lsl #12
     90c:	06c60100 	strbeq	r0, [r6], r0, lsl #2
     910:	20000a42 	andcs	r0, r0, r2, asr #20
     914:	0000005a 	andeq	r0, r0, sl, asr r0
     918:	01749c01 	cmneq	r4, r1, lsl #24
     91c:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
     920:	18c60100 	stmiane	r6, {r8}^
     924:	0000007b 	andeq	r0, r0, fp, ror r0
     928:	0d6f9102 	stfeqp	f1, [pc, #-8]!	; 928 <ascii_startup-0x1ffff6d8>
     92c:	c6010079 			; <UNDEFINED> instruction: 0xc6010079
     930:	00007b20 	andeq	r7, r0, r0, lsr #22
     934:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     938:	00045c04 	andeq	r5, r4, r4, lsl #24
     93c:	0ac80100 	beq	ff200d44 <end_game+0xdf1ff834>
     940:	0000007b 	andeq	r0, r0, fp, ror r0
     944:	00779102 	rsbseq	r9, r7, r2, lsl #2
     948:	0004a602 	andeq	sl, r4, r2, lsl #12
     94c:	06b50100 	ldrteq	r0, [r5], r0, lsl #2
     950:	200009e8 	andcs	r0, r0, r8, ror #19
     954:	0000005a 	andeq	r0, r0, sl, asr r0
     958:	01b49c01 			; <UNDEFINED> instruction: 0x01b49c01
     95c:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
     960:	19b50100 	ldmibne	r5!, {r8}
     964:	0000007b 	andeq	r0, r0, fp, ror r0
     968:	0d6f9102 	stfeqp	f1, [pc, #-8]!	; 968 <ascii_startup-0x1ffff698>
     96c:	b5010079 	strlt	r0, [r1, #-121]	; 0xffffff87
     970:	00007b21 	andeq	r7, r0, r1, lsr #22
     974:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     978:	00045c04 	andeq	r5, r4, r4, lsl #24
     97c:	0ab70100 	beq	fedc0d84 <end_game+0xdedbf874>
     980:	0000007b 	andeq	r0, r0, fp, ror r0
     984:	00779102 	rsbseq	r9, r7, r2, lsl #2
     988:	00052e0e 	andeq	r2, r5, lr, lsl #28
     98c:	06960100 	ldreq	r0, [r6], r0, lsl #2
     990:	20000954 	andcs	r0, r0, r4, asr r9
     994:	00000094 	muleq	r0, r4, r0
     998:	f8029c01 			; <UNDEFINED> instruction: 0xf8029c01
     99c:	01000004 	tsteq	r0, r4
     9a0:	0914068d 	ldmdbeq	r4, {r0, r2, r3, r7, r9, sl}
     9a4:	00402000 	subeq	r2, r0, r0
     9a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     9ac:	000001f9 	strdeq	r0, [r0], -r9
     9b0:	0100630d 	tsteq	r0, sp, lsl #6
     9b4:	01f9258d 	mvnseq	r2, sp, lsl #11
     9b8:	91020000 	mrsls	r0, (UNDEF: 2)
     9bc:	00b10c77 	adcseq	r0, r1, r7, ror ip
     9c0:	8d010000 	stchi	0, cr0, [r1, #-0]
     9c4:	0000a92c 	andeq	sl, r0, ip, lsr #18
     9c8:	70910200 	addsvc	r0, r1, r0, lsl #4
     9cc:	08010800 	stmdaeq	r1, {fp}
     9d0:	000002f3 	strdeq	r0, [r0], -r3
     9d4:	00040802 	andeq	r0, r4, r2, lsl #16
     9d8:	06850100 	streq	r0, [r5], r0, lsl #2
     9dc:	200008ea 	andcs	r0, r0, sl, ror #17
     9e0:	0000002a 	andeq	r0, r0, sl, lsr #32
     9e4:	02269c01 	eoreq	r9, r6, #256	; 0x100
     9e8:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
     9ec:	01000004 	tsteq	r0, r4
     9f0:	01f92585 	mvnseq	r2, r5, lsl #11
     9f4:	91020000 	mrsls	r0, (UNDEF: 2)
     9f8:	96020077 			; <UNDEFINED> instruction: 0x96020077
     9fc:	01000004 	tsteq	r0, r4
     a00:	08c0067c 	stmiaeq	r0, {r2, r3, r4, r5, r6, r9, sl}^
     a04:	002a2000 	eoreq	r2, sl, r0
     a08:	9c010000 	stcls	0, cr0, [r1], {-0}
     a0c:	0000024c 	andeq	r0, r0, ip, asr #4
     a10:	0004820c 	andeq	r8, r4, ip, lsl #4
     a14:	247c0100 	ldrbtcs	r0, [ip], #-256	; 0xffffff00
     a18:	000001f9 	strdeq	r0, [r0], -r9
     a1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     a20:	00043d0f 	andeq	r3, r4, pc, lsl #26
     a24:	0f740100 	svceq	0x00740100
     a28:	000001f9 	strdeq	r0, [r0], -r9
     a2c:	20000898 	mulcs	r0, r8, r8
     a30:	00000028 	andeq	r0, r0, r8, lsr #32
     a34:	f6109c01 			; <UNDEFINED> instruction: 0xf6109c01
     a38:	01000003 	tsteq	r0, r3
     a3c:	007b0667 	rsbseq	r0, fp, r7, ror #12
     a40:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
     a44:	00402000 	subeq	r2, r0, r0
     a48:	9c010000 	stcls	0, cr0, [r1], {-0}
     a4c:	0000028a 	andeq	r0, r0, sl, lsl #5
     a50:	01006303 	tsteq	r0, r3, lsl #6
     a54:	007b0a68 	rsbseq	r0, fp, r8, ror #20
     a58:	91020000 	mrsls	r0, (UNDEF: 2)
     a5c:	df02006f 	svcle	0x0002006f
     a60:	01000003 	tsteq	r0, r3
     a64:	0828065e 	stmdaeq	r8!, {r1, r2, r3, r4, r6, r9, sl}
     a68:	00302000 	eorseq	r2, r0, r0
     a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     a70:	000002ae 	andeq	r0, r0, lr, lsr #5
     a74:	0100630d 	tsteq	r0, sp, lsl #6
     a78:	007b225e 	rsbseq	r2, fp, lr, asr r2
     a7c:	91020000 	mrsls	r0, (UNDEF: 2)
     a80:	27100077 			; <UNDEFINED> instruction: 0x27100077
     a84:	01000004 	tsteq	r0, r4
     a88:	007b064f 	rsbseq	r0, fp, pc, asr #12
     a8c:	07f40000 	ldrbeq	r0, [r4, r0]!
     a90:	00342000 	eorseq	r2, r4, r0
     a94:	9c010000 	stcls	0, cr0, [r1], {-0}
     a98:	000002d6 	ldrdeq	r0, [r0], -r6
     a9c:	01006303 	tsteq	r0, r3, lsl #6
     aa0:	007b0a50 	rsbseq	r0, fp, r0, asr sl
     aa4:	91020000 	mrsls	r0, (UNDEF: 2)
     aa8:	c3110077 	tstgt	r1, #119, 0	; 0x77
     aac:	01000003 	tsteq	r0, r3
     ab0:	07ac0647 	streq	r0, [ip, r7, asr #12]!
     ab4:	00482000 	subeq	r2, r8, r0
     ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
     abc:	00000307 	andeq	r0, r0, r7, lsl #6
     ac0:	0100780d 	tsteq	r0, sp, lsl #16
     ac4:	007b2047 	rsbseq	r2, fp, r7, asr #32
     ac8:	91020000 	mrsls	r0, (UNDEF: 2)
     acc:	0063036f 	rsbeq	r0, r3, pc, ror #6
     ad0:	7b0a4801 	blvc	292adc <ascii_startup-0x1fd6d524>
     ad4:	02000000 	andeq	r0, r0, #0, 0
     ad8:	11007791 			; <UNDEFINED> instruction: 0x11007791
     adc:	00000509 	andeq	r0, r0, r9, lsl #10
     ae0:	74064001 	strvc	r4, [r6], #-1
     ae4:	38200007 	stmdacc	r0!, {r0, r1, r2}
     ae8:	01000000 	mrseq	r0, (UNDEF: 0)
     aec:	0003389c 	muleq	r3, ip, r8
     af0:	00780d00 	rsbseq	r0, r8, r0, lsl #26
     af4:	7b1f4001 	blvc	7d0b00 <ascii_startup-0x1f82f500>
     af8:	02000000 	andeq	r0, r0, #0, 0
     afc:	63036f91 	movwvs	r6, #16273	; 0x3f91
     b00:	0a410100 	beq	1040f08 <ascii_startup-0x1efbf0f8>
     b04:	0000007b 	andeq	r0, r0, fp, ror r0
     b08:	00779102 	rsbseq	r9, r7, r2, lsl #2
     b0c:	00044d12 	andeq	r4, r4, r2, lsl sp
     b10:	062c0100 	strteq	r0, [ip], -r0, lsl #2
     b14:	20000720 	andcs	r0, r0, r0, lsr #14
     b18:	00000054 	andeq	r0, r0, r4, asr r0
     b1c:	19129c01 	ldmdbne	r2, {r0, sl, fp, ip, pc}
     b20:	01000004 	tsteq	r0, r4
     b24:	0000060a 	andeq	r0, r0, sl, lsl #12
     b28:	000c2000 	andeq	r2, ip, r0
     b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
     b30:	0000b100 	andeq	fp, r0, r0, lsl #2
     b34:	7a000400 	bvc	1b3c <ascii_startup-0x1fffe4c4>
     b38:	04000004 	streq	r0, [r0], #-4
     b3c:	00012501 	andeq	r2, r1, r1, lsl #10
     b40:	05390c00 	ldreq	r0, [r9, #-3072]!	; 0xfffff400
     b44:	00530000 	subseq	r0, r3, r0
     b48:	0b7c0000 	bleq	1f00b50 <ascii_startup-0x1e0ff4b0>
     b4c:	00a62000 	adceq	r2, r6, r0
     b50:	07740000 	ldrbeq	r0, [r4, -r0]!
     b54:	7d020000 	stcvc	0, cr0, [r2, #-0]
     b58:	01000005 	tsteq	r0, r5
     b5c:	0bf60617 	bleq	ffd823c0 <end_game+0xdfd80eb0>
     b60:	002c2000 	eoreq	r2, ip, r0
     b64:	9c010000 	stcls	0, cr0, [r1], {-0}
     b68:	00000058 	andeq	r0, r0, r8, asr r0
     b6c:	00736d03 	rsbseq	r6, r3, r3, lsl #26
     b70:	581f1701 	ldmdapl	pc, {r0, r8, r9, sl, ip}	; <UNPREDICTABLE>
     b74:	02000000 	andeq	r0, r0, #0, 0
     b78:	75046c91 	strvc	r6, [r4, #-3217]	; 0xfffff36f
     b7c:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
     b80:	00005f09 	andeq	r5, r0, r9, lsl #30
     b84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b88:	07040500 	streq	r0, [r4, -r0, lsl #10]
     b8c:	000000f2 	strdeq	r0, [r0], -r2
     b90:	69050406 	stmdbvs	r5, {r1, r2, sl}
     b94:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     b98:	00000375 	andeq	r0, r0, r5, ror r3
     b9c:	c0060e01 	andgt	r0, r6, r1, lsl #28
     ba0:	3620000b 	strtcc	r0, [r0], -fp
     ba4:	01000000 	mrseq	r0, (UNDEF: 0)
     ba8:	0000a29c 	muleq	r0, ip, r2
     bac:	73750300 	cmnvc	r5, #0, 6
     bb0:	1f0e0100 	svcne	0x000e0100
     bb4:	00000058 	andeq	r0, r0, r8, asr r0
     bb8:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
     bbc:	20000bca 	andcs	r0, r0, sl, asr #23
     bc0:	00000016 	andeq	r0, r0, r6, lsl r0
     bc4:	01006904 	tsteq	r0, r4, lsl #18
     bc8:	005f0b11 	subseq	r0, pc, r1, lsl fp	; <UNPREDICTABLE>
     bcc:	91020000 	mrsls	r0, (UNDEF: 2)
     bd0:	08000074 	stmdaeq	r0, {r2, r4, r5, r6}
     bd4:	00000589 	andeq	r0, r0, r9, lsl #11
     bd8:	7c060301 	stcvc	3, cr0, [r6], {1}
     bdc:	4420000b 	strtmi	r0, [r0], #-11
     be0:	01000000 	mrseq	r0, (UNDEF: 0)
     be4:	0571009c 	ldrbeq	r0, [r1, #-156]!	; 0xffffff64
     be8:	00040000 	andeq	r0, r4, r0
     bec:	00000505 	andeq	r0, r0, r5, lsl #10
     bf0:	01250104 			; <UNDEFINED> instruction: 0x01250104
     bf4:	5c0c0000 	stcpl	0, cr0, [ip], {-0}
     bf8:	53000006 	movwpl	r0, #6
     bfc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     c00:	00000000 	andeq	r0, r0, r0
     c04:	6f000000 	svcvs	0x00000000
     c08:	02000008 	andeq	r0, r0, #8, 0
     c0c:	00000044 	andeq	r0, r0, r4, asr #32
     c10:	310c0602 	tstcc	ip, r2, lsl #12
     c14:	03000000 	movweq	r0, #0
     c18:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     c1c:	26020074 			; <UNDEFINED> instruction: 0x26020074
     c20:	02000002 	andeq	r0, r0, #2, 0
     c24:	00310c07 	eorseq	r0, r1, r7, lsl #24
     c28:	a1020000 	mrsge	r0, (UNDEF: 2)
     c2c:	03000001 	movweq	r0, #1
     c30:	00310c0f 	eorseq	r0, r1, pc, lsl #24
     c34:	02040000 	andeq	r0, r4, #0, 0
     c38:	70091103 	andvc	r1, r9, r3, lsl #2
     c3c:	05000000 	streq	r0, [r0, #-0]
     c40:	12030078 	andne	r0, r3, #120, 0	; 0x78
     c44:	0000700a 	andeq	r7, r0, sl
     c48:	79050000 	stmdbvc	r5, {}	; <UNPREDICTABLE>
     c4c:	0c120300 	ldceq	3, cr0, [r2], {-0}
     c50:	00000070 	andeq	r0, r0, r0, ror r0
     c54:	01060001 	tsteq	r6, r1
     c58:	0002fc08 	andeq	pc, r2, r8, lsl #24
     c5c:	02ed0700 	rsceq	r0, sp, #0, 14
     c60:	13030000 	movwne	r0, #12288	; 0x3000
     c64:	00005003 	andeq	r5, r0, r3
     c68:	03480400 	movteq	r0, #33792	; 0x8400
     c6c:	00c0091d 	sbceq	r0, r0, sp, lsl r9
     c70:	9f080000 	svcls	0x00080000
     c74:	03000003 	movweq	r0, #3
     c78:	0031091e 	eorseq	r0, r1, lr, lsl r9
     c7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c80:	00000349 	andeq	r0, r0, r9, asr #6
     c84:	31091f03 	tstcc	r9, r3, lsl #30
     c88:	04000000 	streq	r0, [r0], #-0
     c8c:	00034f08 	andeq	r4, r3, r8, lsl #30
     c90:	09200300 	stmdbeq	r0!, {r8, r9}
     c94:	00000031 	andeq	r0, r0, r1, lsr r0
     c98:	78700508 	ldmdavc	r0!, {r3, r8, sl}^
     c9c:	0b210300 	bleq	8418a4 <ascii_startup-0x1f7be75c>
     ca0:	000000c0 	andeq	r0, r0, r0, asr #1
     ca4:	7709000c 	strvc	r0, [r9, -ip]
     ca8:	d0000000 	andle	r0, r0, r0
     cac:	0a000000 	beq	cb4 <ascii_startup-0x1ffff34c>
     cb0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cb4:	0406001d 	streq	r0, [r6], #-29	; 0xffffffe3
     cb8:	0000f207 	andeq	pc, r0, r7, lsl #4
     cbc:	02480700 	subeq	r0, r8, #0, 14
     cc0:	22030000 	andcs	r0, r3, #0, 0
     cc4:	00008303 	andeq	r8, r0, r3, lsl #6
     cc8:	02470700 	subeq	r0, r7, #0, 14
     ccc:	22030000 	andcs	r0, r3, #0, 0
     cd0:	0000ef0e 	andeq	lr, r0, lr, lsl #30
     cd4:	83040b00 	movwhi	r0, #19200	; 0x4b00
     cd8:	0c000000 	stceq	0, cr0, [r0], {-0}
     cdc:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     ce0:	10240324 	eorne	r0, r4, r4, lsr #6
     ce4:	00000178 	andeq	r0, r0, r8, ror r1
     ce8:	6f656705 	svcvs	0x00656705
     cec:	0f250300 	svceq	0x00250300
     cf0:	000000e3 	andeq	r0, r0, r3, ror #1
     cf4:	02830800 	addeq	r0, r3, #0, 16
     cf8:	26030000 	strcs	r0, [r3], -r0
     cfc:	00003109 	andeq	r3, r0, r9, lsl #2
     d00:	88080400 	stmdahi	r8, {sl}
     d04:	03000002 	movweq	r0, #2
     d08:	00310e26 	eorseq	r0, r1, r6, lsr #28
     d0c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     d10:	0000030b 	andeq	r0, r0, fp, lsl #6
     d14:	31092703 	tstcc	r9, r3, lsl #14
     d18:	0c000000 	stceq	0, cr0, [r0], {-0}
     d1c:	00031008 	andeq	r1, r3, r8
     d20:	0e270300 	cdpeq	3, 2, cr0, cr7, cr0, {0}
     d24:	00000031 	andeq	r0, r0, r1, lsr r0
     d28:	03550810 	cmpeq	r5, #16, 16	; 0x100000
     d2c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     d30:	0001890c 	andeq	r8, r1, ip, lsl #18
     d34:	d8081400 	stmdale	r8, {sl, ip}
     d38:	03000005 	movweq	r0, #5
     d3c:	01890c29 	orreq	r0, r9, r9, lsr #24
     d40:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
     d44:	00000271 	andeq	r0, r0, r1, ror r2
     d48:	890c2a03 	stmdbhi	ip, {r0, r1, r9, fp, sp}
     d4c:	1c000001 	stcne	0, cr0, [r0], {1}
     d50:	00030108 	andeq	r0, r3, r8, lsl #2
     d54:	0c2b0300 	stceq	3, cr0, [fp], #-0
     d58:	000001a4 	andeq	r0, r0, r4, lsr #3
     d5c:	830d0020 	movwhi	r0, #53280	; 0xd020
     d60:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     d64:	00000183 	andeq	r0, r0, r3, lsl #3
     d68:	f5040b00 			; <UNDEFINED> instruction: 0xf5040b00
     d6c:	0b000000 	bleq	d74 <ascii_startup-0x1ffff28c>
     d70:	00017804 	andeq	r7, r1, r4, lsl #16
     d74:	01a40d00 			; <UNDEFINED> instruction: 0x01a40d00
     d78:	830e0000 	movwhi	r0, #57344	; 0xe000
     d7c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     d80:	00000031 	andeq	r0, r0, r1, lsr r0
     d84:	0000310e 	andeq	r3, r0, lr, lsl #2
     d88:	040b0000 	streq	r0, [fp], #-0
     d8c:	0000018f 	andeq	r0, r0, pc, lsl #3
     d90:	0003aa07 	andeq	sl, r3, r7, lsl #20
     d94:	022c0300 	eoreq	r0, ip, #0, 6
     d98:	000000f5 	strdeq	r0, [r0], -r5
     d9c:	0003a907 	andeq	sl, r3, r7, lsl #18
     da0:	0a2c0300 	beq	b019a8 <ascii_startup-0x1f4fe658>
     da4:	00000183 	andeq	r0, r0, r3, lsl #3
     da8:	0000440f 	andeq	r4, r0, pc, lsl #8
     dac:	050b0100 	streq	r0, [fp, #-256]	; 0xffffff00
     db0:	15100305 	ldrne	r0, [r0, #-773]	; 0xfffffcfb
     db4:	07102000 	ldreq	r2, [r0, -r0]
     db8:	01000006 	tsteq	r0, r6
     dbc:	00d70a47 	sbcseq	r0, r7, r7, asr #20
     dc0:	03050000 	movweq	r0, #20480	; 0x5000
     dc4:	2000125c 	andcs	r1, r0, ip, asr r2
     dc8:	00062d10 	andeq	r2, r6, r0, lsl sp
     dcc:	0a4e0100 	beq	13811d4 <ascii_startup-0x1ec7ee2c>
     dd0:	000000d7 	ldrdeq	r0, [r0], -r7
     dd4:	12a40305 	adcne	r0, r4, #335544320	; 0x14000000
     dd8:	25102000 	ldrcs	r2, [r0, #-0]
     ddc:	01000007 	tsteq	r0, r7
     de0:	00d70a5c 	sbcseq	r0, r7, ip, asr sl
     de4:	03050000 	movweq	r0, #20480	; 0x5000
     de8:	200012ec 	andcs	r1, r0, ip, ror #5
     dec:	0005b110 	andeq	fp, r5, r0, lsl r1
     df0:	0a640100 	beq	19011f8 <ascii_startup-0x1e6fee08>
     df4:	000000d7 	ldrdeq	r0, [r0], -r7
     df8:	13340305 	teqne	r4, #335544320	; 0x14000000
     dfc:	a5112000 	ldrge	r2, [r1, #-0]
     e00:	01000005 	tsteq	r0, r5
     e04:	01aa0fe6 			; <UNDEFINED> instruction: 0x01aa0fe6
     e08:	03050000 	movweq	r0, #20480	; 0x5000
     e0c:	2000137c 	andcs	r1, r0, ip, ror r3
     e10:	0005bc11 	andeq	fp, r5, r1, lsl ip
     e14:	0ff20100 	svceq	0x00f20100
     e18:	000001aa 	andeq	r0, r0, sl, lsr #3
     e1c:	13a00305 	movne	r0, #335544320	; 0x14000000
     e20:	06112000 	ldreq	r2, [r1], -r0
     e24:	01000007 	tsteq	r0, r7
     e28:	01aa0ffc 	strdeq	r0, [sl, ip]!
     e2c:	03050000 	movweq	r0, #20480	; 0x5000
     e30:	200013c4 	andcs	r1, r0, r4, asr #7
     e34:	0005e912 	andeq	lr, r5, r2, lsl r9
     e38:	01060100 	mrseq	r0, (UNDEF: 22)
     e3c:	0001aa0f 	andeq	sl, r1, pc, lsl #20
     e40:	e8030500 	stmda	r3, {r8, sl}
     e44:	12200013 	eorne	r0, r0, #19, 0
     e48:	00000653 	andeq	r0, r0, r3, asr r6
     e4c:	0f011101 	svceq	0x00011101
     e50:	000001aa 	andeq	r0, r0, sl, lsr #3
     e54:	140c0305 	strne	r0, [ip], #-773	; 0xfffffcfb
     e58:	67132000 	ldrvs	r2, [r3, -r0]
     e5c:	01006c5f 	tsteq	r0, pc, asr ip
     e60:	b609015b 			; <UNDEFINED> instruction: 0xb609015b
     e64:	05000001 	streq	r0, [r0, #-1]
     e68:	00143003 	andseq	r3, r4, r3
     e6c:	5f6f1320 	svcpl	0x006f1320
     e70:	5c01006c 	stcpl	0, cr0, [r1], {108}	; 0x6c
     e74:	01b60901 			; <UNDEFINED> instruction: 0x01b60901
     e78:	03050000 	movweq	r0, #20480	; 0x5000
     e7c:	20001434 	andcs	r1, r0, r4, lsr r4
     e80:	00035f14 	andeq	r5, r3, r4, lsl pc
     e84:	016a0100 	cmneq	sl, r0, lsl #2
     e88:	00003101 	andeq	r3, r0, r1, lsl #2
     e8c:	00105400 	andseq	r5, r0, r0, lsl #8
     e90:	00003020 	andeq	r3, r0, r0, lsr #32
     e94:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     e98:	00000021 	andeq	r0, r0, r1, lsr #32
     e9c:	01015e01 	tsteq	r1, r1, lsl #28
     ea0:	00000031 	andeq	r0, r0, r1, lsr r0
     ea4:	20000ffc 	strdcs	r0, [r0], -ip
     ea8:	00000058 	andeq	r0, r0, r8, asr r0
     eac:	3d159c01 	ldccc	12, cr9, [r5, #-4]
     eb0:	01000006 	tsteq	r0, r6
     eb4:	c006011e 	andgt	r0, r6, lr, lsl r1
     eb8:	3c20000e 	stccc	0, cr0, [r0], #-56	; 0xffffffc8
     ebc:	01000001 	tsteq	r0, r1
     ec0:	0003469c 	muleq	r3, ip, r6
     ec4:	00631600 	rsbeq	r1, r3, r0, lsl #12
     ec8:	06012001 	streq	r2, [r1], -r1
     ecc:	00000070 	andeq	r0, r0, r0, ror r0
     ed0:	165b9102 	ldrbne	r9, [fp], -r2, lsl #2
     ed4:	21010070 	tstcs	r1, r0, ror r0
     ed8:	01b60901 			; <UNDEFINED> instruction: 0x01b60901
     edc:	91020000 	mrsls	r0, (UNDEF: 2)
     ee0:	06e2126c 	strbteq	r1, [r2], ip, ror #4
     ee4:	22010000 	andcs	r0, r1, #0, 0
     ee8:	01b60901 			; <UNDEFINED> instruction: 0x01b60901
     eec:	91020000 	mrsls	r0, (UNDEF: 2)
     ef0:	03371268 	teqeq	r7, #104, 4	; 0x80000006
     ef4:	24010000 	strcs	r0, [r1], #-0
     ef8:	01b60901 			; <UNDEFINED> instruction: 0x01b60901
     efc:	91020000 	mrsls	r0, (UNDEF: 2)
     f00:	0f061764 	svceq	0x00061764
     f04:	00d42000 	sbcseq	r2, r4, r0
     f08:	fb120000 	blx	480f12 <ascii_startup-0x1fb7f0ee>
     f0c:	01000006 	tsteq	r0, r6
     f10:	310d0141 	tstcc	sp, r1, asr #2
     f14:	02000000 	andeq	r0, r0, #0, 0
     f18:	de126091 	mrcle	0, 0, r6, cr2, cr1, {4}
     f1c:	01000005 	tsteq	r0, r5
     f20:	310d0142 	tstcc	sp, r2, asr #2
     f24:	02000000 	andeq	r0, r0, #0, 0
     f28:	00005c91 	muleq	r0, r1, ip
     f2c:	0005f218 	andeq	pc, r5, r8, lsl r2	; <UNPREDICTABLE>
     f30:	01dd0100 	bicseq	r0, sp, r0, lsl #2
     f34:	00000031 	andeq	r0, r0, r1, lsr r0
     f38:	20000e9e 	mulcs	r0, lr, lr
     f3c:	00000022 	andeq	r0, r0, r2, lsr #32
     f40:	038c9c01 	orreq	r9, ip, #256	; 0x100
     f44:	6f190000 	svcvs	0x00190000
     f48:	1edd0100 	cdpne	1, 13, cr0, cr13, cr0, {0}
     f4c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     f50:	1a749102 	bne	1d25360 <ascii_startup-0x1e2daca0>
     f54:	00000730 	andeq	r0, r0, r0, lsr r7
     f58:	3125dd01 			; <UNDEFINED> instruction: 0x3125dd01
     f5c:	02000000 	andeq	r0, r0, #0, 0
     f60:	a21a7091 	andsge	r7, sl, #145, 0	; 0x91
     f64:	01000006 	tsteq	r0, r6
     f68:	003130dd 	ldrsbteq	r3, [r1], -sp
     f6c:	91020000 	mrsls	r0, (UNDEF: 2)
     f70:	bb1b006c 	bllt	6c1128 <ascii_startup-0x1f93eed8>
     f74:	01000006 	tsteq	r0, r6
     f78:	0e2206c3 	cfmadda32eq	mvax6, mvax0, mvfx2, mvfx3
     f7c:	007c2000 	rsbseq	r2, ip, r0
     f80:	9c010000 	stcls	0, cr0, [r1], {-0}
     f84:	000003ce 	andeq	r0, r0, lr, asr #7
     f88:	01006f19 	tsteq	r0, r9, lsl pc
     f8c:	01b620c3 			; <UNDEFINED> instruction: 0x01b620c3
     f90:	91020000 	mrsls	r0, (UNDEF: 2)
     f94:	033f116c 	teqeq	pc, #27
     f98:	c5010000 	strgt	r0, [r1, #-0]
     f9c:	00003107 	andeq	r3, r0, r7, lsl #2
     fa0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fa4:	00034411 	andeq	r4, r3, r1, lsl r4
     fa8:	0cc50100 	stfeqe	f0, [r5], {0}
     fac:	00000031 	andeq	r0, r0, r1, lsr r0
     fb0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     fb4:	0006151b 	andeq	r1, r6, fp, lsl r5
     fb8:	06b40100 	ldrteq	r0, [r4], r0, lsl #2
     fbc:	20000ddc 	ldrdcs	r0, [r0], -ip
     fc0:	00000046 	andeq	r0, r0, r6, asr #32
     fc4:	04109c01 	ldreq	r9, [r0], #-3073	; 0xfffff3ff
     fc8:	6f190000 	svcvs	0x00190000
     fcc:	26b40100 	ldrtcs	r0, [r4], r0, lsl #2
     fd0:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     fd4:	116c9102 	cmnne	ip, r2, lsl #2
     fd8:	0000033f 	andeq	r0, r0, pc, lsr r3
     fdc:	3109b501 	tstcc	r9, r1, lsl #10
     fe0:	02000000 	andeq	r0, r0, #0, 0
     fe4:	44117491 	ldrmi	r7, [r1], #-1169	; 0xfffffb6f
     fe8:	01000003 	tsteq	r0, r3
     fec:	00310eb5 	ldrhteq	r0, [r1], -r5
     ff0:	91020000 	mrsls	r0, (UNDEF: 2)
     ff4:	151b0070 	ldrne	r0, [fp, #-112]	; 0xffffff90
     ff8:	01000007 	tsteq	r0, r7
     ffc:	0d2c0782 	stceq	7, cr0, [ip, #-520]!	; 0xfffffdf8
    1000:	00b02000 	adcseq	r2, r0, r0
    1004:	9c010000 	stcls	0, cr0, [r1], {-0}
    1008:	00000452 	andeq	r0, r0, r2, asr r4
    100c:	01006f19 	tsteq	r0, r9, lsl pc
    1010:	04521f82 	ldrbeq	r1, [r2], #-3970	; 0xfffff07e
    1014:	91020000 	mrsls	r0, (UNDEF: 2)
    1018:	033f116c 	teqeq	pc, #27
    101c:	84010000 	strhi	r0, [r1], #-0
    1020:	00003107 	andeq	r3, r0, r7, lsl #2
    1024:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1028:	00034411 	andeq	r4, r3, r1, lsl r4
    102c:	0c840100 	stfeqs	f0, [r4], {0}
    1030:	00000031 	andeq	r0, r0, r1, lsr r0
    1034:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1038:	01aa040b 			; <UNDEFINED> instruction: 0x01aa040b
    103c:	421b0000 	andsmi	r0, fp, #0, 0
    1040:	01000006 	tsteq	r0, r6
    1044:	0ccc077a 	stcleq	7, cr0, [ip], {122}	; 0x7a
    1048:	00602000 	rsbeq	r2, r0, r0
    104c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1050:	00000493 	muleq	r0, r3, r4
    1054:	01006f19 	tsteq	r0, r9, lsl pc
    1058:	01b6217a 			; <UNDEFINED> instruction: 0x01b6217a
    105c:	91020000 	mrsls	r0, (UNDEF: 2)
    1060:	0cd4176c 	ldcleq	7, cr1, [r4], {108}	; 0x6c
    1064:	004e2000 	subeq	r2, lr, r0
    1068:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    106c:	0c7b0100 	ldfeqe	f0, [fp], #-0
    1070:	00000031 	andeq	r0, r0, r1, lsr r0
    1074:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1078:	05951b00 	ldreq	r1, [r5, #2816]	; 0xb00
    107c:	73010000 	movwvc	r0, #4096	; 0x1000
    1080:	000c6c07 	andeq	r6, ip, r7, lsl #24
    1084:	00006020 	andeq	r6, r0, r0, lsr #32
    1088:	ce9c0100 	fmlgte	f0, f4, f0
    108c:	19000004 	stmdbne	r0, {r2}
    1090:	7301006f 	movwvc	r0, #4207	; 0x106f
    1094:	0001b620 	andeq	fp, r1, r0, lsr #12
    1098:	6c910200 	lfmvs	f0, 4, [r1], {0}
    109c:	000c7417 	andeq	r7, ip, r7, lsl r4
    10a0:	00004e20 	andeq	r4, r0, r0, lsr #28
    10a4:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    10a8:	310c7501 	tstcc	ip, r1, lsl #10
    10ac:	02000000 	andeq	r0, r0, #0, 0
    10b0:	00007491 	muleq	r0, r1, r4
    10b4:	0004641d 	andeq	r6, r4, sp, lsl r4
    10b8:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    10bc:	20000c3c 	andcs	r0, r0, ip, lsr ip
    10c0:	00000030 	andeq	r0, r0, r0, lsr r0
    10c4:	ca1e9c01 	bgt	7a80d0 <ascii_startup-0x1f857f30>
    10c8:	01000005 	tsteq	r0, r5
    10cc:	0c360636 	ldceq	6, cr0, [r6], #-216	; 0xffffff28
    10d0:	00062000 	andeq	r2, r6, r0
    10d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10d8:	0000050f 	andeq	r0, r0, pc, lsl #10
    10dc:	01007819 	tsteq	r0, r9, lsl r8
    10e0:	00311e36 	eorseq	r1, r1, r6, lsr lr
    10e4:	50010000 	andpl	r0, r1, r0
    10e8:	01007919 	tsteq	r0, r9, lsl r9
    10ec:	00312536 	eorseq	r2, r1, r6, lsr r5
    10f0:	51010000 	mrspl	r0, (UNDEF: 1)
    10f4:	06a91e00 	strteq	r1, [r9], r0, lsl #28
    10f8:	30010000 	andcc	r0, r1, r0
    10fc:	000c3006 	andeq	r3, ip, r6
    1100:	00000620 	andeq	r0, r0, r0, lsr #12
    1104:	3e9c0100 	fmlcce	f0, f4, f0
    1108:	19000005 	stmdbne	r0, {r0, r2}
    110c:	30010078 	andcc	r0, r1, r8, ror r0
    1110:	0000311c 	andeq	r3, r0, ip, lsl r1
    1114:	19500100 	ldmdbne	r0, {r8}^
    1118:	30010079 	andcc	r0, r1, r9, ror r0
    111c:	00003122 	andeq	r3, r0, r2, lsr #2
    1120:	00510100 	subseq	r0, r1, r0, lsl #2
    1124:	0006cd1d 	andeq	ip, r6, sp, lsl sp
    1128:	062a0100 	strteq	r0, [sl], -r0, lsl #2
    112c:	20000c2a 	andcs	r0, r0, sl, lsr #24
    1130:	00000006 	andeq	r0, r0, r6
    1134:	e91d9c01 	ldmdb	sp, {r0, sl, fp, ip, pc}
    1138:	01000006 	tsteq	r0, r6
    113c:	0c240624 	stceq	6, cr0, [r4], #-144	; 0xffffff70
    1140:	00062000 	andeq	r2, r6, r0
    1144:	9c010000 	stcls	0, cr0, [r1], {-0}
    1148:	00041f1d 	andeq	r1, r4, sp, lsl pc
    114c:	060e0100 	streq	r0, [lr], -r0, lsl #2
    1150:	20000010 	andcs	r0, r0, r0, lsl r0
    1154:	0000000c 	andeq	r0, r0, ip
    1158:	Address 0x0000000000001158 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <ascii_startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	0008030b 	andeq	r0, r8, fp, lsl #6
  30:	00240400 	eoreq	r0, r4, r0, lsl #8
  34:	0b3e0b0b 	bleq	f82c68 <ascii_startup-0x1f07d398>
  38:	00000e03 	andeq	r0, r0, r3, lsl #28
  3c:	47003405 	strmi	r3, [r0, -r5, lsl #8]
  40:	3b0b3a13 	blcc	2ce894 <ascii_startup-0x1fd3176c>
  44:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
  48:	06000018 			; <UNDEFINED> instruction: 0x06000018
  4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  50:	0b3a0e03 	bleq	e83864 <ascii_startup-0x1f17c79c>
  54:	0b390b3b 	bleq	e42d48 <ascii_startup-0x1f1bd2b8>
  58:	13491927 	movtne	r1, #39207	; 0x9927
  5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  60:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  64:	00130119 	andseq	r0, r3, r9, lsl r1
  68:	00050700 	andeq	r0, r5, r0, lsl #14
  6c:	0b3a0e03 	bleq	e83880 <ascii_startup-0x1f17c780>
  70:	0b390b3b 	bleq	e42d64 <ascii_startup-0x1f1bd29c>
  74:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  78:	34080000 	strcc	r0, [r8], #-0
  7c:	3a0e0300 	bcc	380c84 <ascii_startup-0x1fc7f37c>
  80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  88:	09000018 	stmdbeq	r0, {r3, r4}
  8c:	08030034 	stmdaeq	r3, {r2, r4, r5}
  90:	0b3b0b3a 	bleq	ec2d80 <ascii_startup-0x1f13d280>
  94:	13490b39 	movtne	r0, #39737	; 0x9b39
  98:	00001802 	andeq	r1, r0, r2, lsl #16
  9c:	4901010a 	stmdbmi	r1, {r1, r3, r8}
  a0:	00130113 	andseq	r0, r3, r3, lsl r1
  a4:	00210b00 	eoreq	r0, r1, r0, lsl #22
  a8:	0b2f1349 	bleq	bc4dd4 <ascii_startup-0x1f43b22c>
  ac:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <ascii_startup-0x1fd3170c>
  b8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  c0:	96184006 	ldrls	r4, [r8], -r6
  c4:	13011942 	movwne	r1, #6466	; 0x1942
  c8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  cc:	03193f00 	tsteq	r9, #0, 30
  d0:	3b0b3a0e 	blcc	2ce910 <ascii_startup-0x1fd316f0>
  d4:	110b390b 	tstne	fp, fp, lsl #18
  d8:	40061201 	andmi	r1, r6, r1, lsl #4
  dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  e0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  e4:	03193f01 	tsteq	r9, #1, 30
  e8:	3b0b3a0e 	blcc	2ce928 <ascii_startup-0x1fd316d8>
  ec:	110b390b 	tstne	fp, fp, lsl #18
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	11010b0f 	tstne	r1, pc, lsl #22
 100:	01061201 	tsteq	r6, r1, lsl #4
 104:	10000013 	andne	r0, r0, r3, lsl r0
 108:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 10c:	0b3a0e03 	bleq	e83920 <ascii_startup-0x1f17c6e0>
 110:	0b390b3b 	bleq	e42e04 <ascii_startup-0x1f1bd1fc>
 114:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 118:	00001301 	andeq	r1, r0, r1, lsl #6
 11c:	00001811 	andeq	r1, r0, r1, lsl r8
 120:	010b1200 	mrseq	r1, R11_fiq
 124:	06120111 			; <UNDEFINED> instruction: 0x06120111
 128:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 12c:	03193f01 	tsteq	r9, #1, 30
 130:	3b0b3a0e 	blcc	2ce970 <ascii_startup-0x1fd31690>
 134:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 138:	00193c13 	andseq	r3, r9, r3, lsl ip
 13c:	00051400 	andeq	r1, r5, r0, lsl #8
 140:	0b3a0803 	bleq	e82154 <ascii_startup-0x1f17deac>
 144:	0b390b3b 	bleq	e42e38 <ascii_startup-0x1f1bd1c8>
 148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 14c:	0f150000 	svceq	0x00150000
 150:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 154:	16000013 			; <UNDEFINED> instruction: 0x16000013
 158:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 15c:	0b3a0e03 	bleq	e83970 <ascii_startup-0x1f17c690>
 160:	0b390b3b 	bleq	e42e54 <ascii_startup-0x1f1bd1ac>
 164:	13491927 	movtne	r1, #39207	; 0x9927
 168:	06120111 			; <UNDEFINED> instruction: 0x06120111
 16c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 170:	00000019 	andeq	r0, r0, r9, lsl r0
 174:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 178:	030b130e 	movweq	r1, #45838	; 0xb30e
 17c:	110e1b0e 	tstne	lr, lr, lsl #22
 180:	10061201 	andne	r1, r6, r1, lsl #4
 184:	02000017 	andeq	r0, r0, #23, 0
 188:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 18c:	0b3b0b3a 	bleq	ec2e7c <ascii_startup-0x1f13d184>
 190:	13490b39 	movtne	r0, #39737	; 0x9b39
 194:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 198:	24030000 	strcs	r0, [r3], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01130400 	tsteq	r3, r0, lsl #8
 1a8:	0b3a0b0b 	bleq	e82ddc <ascii_startup-0x1f17d224>
 1ac:	0b390b3b 	bleq	e42ea0 <ascii_startup-0x1f1bd160>
 1b0:	00001301 	andeq	r1, r0, r1, lsl #6
 1b4:	03000d05 	movweq	r0, #3333	; 0xd05
 1b8:	3b0b3a08 	blcc	2ce9e0 <ascii_startup-0x1fd31620>
 1bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1c0:	000b3813 	andeq	r3, fp, r3, lsl r8
 1c4:	00240600 	eoreq	r0, r4, r0, lsl #12
 1c8:	0b3e0b0b 	bleq	f82dfc <ascii_startup-0x1f07d204>
 1cc:	00000e03 	andeq	r0, r0, r3, lsl #28
 1d0:	03001607 	movweq	r1, #1543	; 0x607
 1d4:	3b0b3a0e 	blcc	2cea14 <ascii_startup-0x1fd315ec>
 1d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
 1e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1e4:	0b3b0b3a 	bleq	ec2ed4 <ascii_startup-0x1f13d12c>
 1e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1ec:	00000b38 	andeq	r0, r0, r8, lsr fp
 1f0:	49010109 	stmdbmi	r1, {r0, r3, r8}
 1f4:	00130113 	andseq	r0, r3, r3, lsl r1
 1f8:	00210a00 	eoreq	r0, r1, r0, lsl #20
 1fc:	0b2f1349 	bleq	bc4f28 <ascii_startup-0x1f43b0d8>
 200:	0f0b0000 	svceq	0x000b0000
 204:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 208:	0c000013 	stceq	0, cr0, [r0], {19}
 20c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 210:	0b3a0b0b 	bleq	e82e44 <ascii_startup-0x1f17d1bc>
 214:	0b390b3b 	bleq	e42f08 <ascii_startup-0x1f1bd0f8>
 218:	00001301 	andeq	r1, r0, r1, lsl #6
 21c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
 220:	00130119 	andseq	r0, r3, r9, lsl r1
 224:	00050e00 	andeq	r0, r5, r0, lsl #28
 228:	00001349 	andeq	r1, r0, r9, asr #6
 22c:	3f012e0f 	svccc	0x00012e0f
 230:	3a0e0319 	bcc	380e9c <ascii_startup-0x1fc7f164>
 234:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 238:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 23c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 240:	97184006 	ldrls	r4, [r8, -r6]
 244:	13011942 	movwne	r1, #6466	; 0x1942
 248:	05100000 	ldreq	r0, [r0, #-0]
 24c:	3a080300 	bcc	200e54 <ascii_startup-0x1fdff1ac>
 250:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 254:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 258:	11000018 	tstne	r0, r8, lsl r0
 25c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 260:	0b3b0b3a 	bleq	ec2f50 <ascii_startup-0x1f13d0b0>
 264:	13490b39 	movtne	r0, #39737	; 0x9b39
 268:	00001802 	andeq	r1, r0, r2, lsl #16
 26c:	11010b12 	tstne	r1, r2, lsl fp
 270:	00061201 	andeq	r1, r6, r1, lsl #4
 274:	00341300 	eorseq	r1, r4, r0, lsl #6
 278:	0b3a0803 	bleq	e8228c <ascii_startup-0x1f17dd74>
 27c:	0b390b3b 	bleq	e42f70 <ascii_startup-0x1f1bd090>
 280:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 284:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 288:	03193f01 	tsteq	r9, #1, 30
 28c:	3b0b3a0e 	blcc	2ceacc <ascii_startup-0x1fd31534>
 290:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 294:	11134919 	tstne	r3, r9, lsl r9
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	3f012e15 	svccc	0x00012e15
 2a8:	3a0e0319 	bcc	380f14 <ascii_startup-0x1fc7f0ec>
 2ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	1119270b 	tstne	r9, fp, lsl #14
 2b4:	40061201 	andmi	r1, r6, r1, lsl #4
 2b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2bc:	00001301 	andeq	r1, r0, r1, lsl #6
 2c0:	3f012e16 	svccc	0x00012e16
 2c4:	3a0e0319 	bcc	380f30 <ascii_startup-0x1fc7f0d0>
 2c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	1119270b 	tstne	r9, fp, lsl #14
 2d0:	40061201 	andmi	r1, r6, r1, lsl #4
 2d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d8:	00001301 	andeq	r1, r0, r1, lsl #6
 2dc:	3f012e17 	svccc	0x00012e17
 2e0:	3a0e0319 	bcc	380f4c <ascii_startup-0x1fc7f0b4>
 2e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 2ec:	18000019 	stmdane	r0, {r0, r3, r4}
 2f0:	00000018 	andeq	r0, r0, r8, lsl r0
 2f4:	3f012e19 	svccc	0x00012e19
 2f8:	3a0e0319 	bcc	380f64 <ascii_startup-0x1fc7f09c>
 2fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 300:	1119270b 	tstne	r9, fp, lsl #14
 304:	40061201 	andmi	r1, r6, r1, lsl #4
 308:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 30c:	051a0000 	ldreq	r0, [sl, #-0]
 310:	3a0e0300 	bcc	380f18 <ascii_startup-0x1fc7f0e8>
 314:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 318:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 31c:	1b000018 	blne	384 <ascii_startup-0x1ffffc7c>
 320:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 324:	0b3a0e03 	bleq	e83b38 <ascii_startup-0x1f17c4c8>
 328:	0b390b3b 	bleq	e4301c <ascii_startup-0x1f1bcfe4>
 32c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 330:	00001301 	andeq	r1, r0, r1, lsl #6
 334:	01110100 	tsteq	r1, r0, lsl #2
 338:	0b130e25 	bleq	4c3bd4 <ascii_startup-0x1fb3c42c>
 33c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 340:	01111755 	tsteq	r1, r5, asr r7
 344:	00001710 	andeq	r1, r0, r0, lsl r7
 348:	3f012e02 	svccc	0x00012e02
 34c:	3a0e0319 	bcc	380fb8 <ascii_startup-0x1fc7f048>
 350:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 354:	1119270b 	tstne	r9, fp, lsl #14
 358:	40061201 	andmi	r1, r6, r1, lsl #4
 35c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 360:	00001301 	andeq	r1, r0, r1, lsl #6
 364:	03003403 	movweq	r3, #1027	; 0x403
 368:	3b0b3a08 	blcc	2ceb90 <ascii_startup-0x1fd31470>
 36c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 370:	00180213 	andseq	r0, r8, r3, lsl r2
 374:	00340400 	eorseq	r0, r4, r0, lsl #8
 378:	0b3a0e03 	bleq	e83b8c <ascii_startup-0x1f17c474>
 37c:	0b390b3b 	bleq	e43070 <ascii_startup-0x1f1bcf90>
 380:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 384:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 388:	03193f01 	tsteq	r9, #1, 30
 38c:	3b0b3a0e 	blcc	2cebcc <ascii_startup-0x1fd31434>
 390:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 394:	00193c13 	andseq	r3, r9, r3, lsl ip
 398:	00180600 	andseq	r0, r8, r0, lsl #12
 39c:	0f070000 	svceq	0x00070000
 3a0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 3a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 3a8:	0b0b0024 	bleq	2c0440 <ascii_startup-0x1fd3fbc0>
 3ac:	0e030b3e 	vmoveq.16	d3[0], r0
 3b0:	01090000 	mrseq	r0, (UNDEF: 9)
 3b4:	01134901 	tsteq	r3, r1, lsl #18
 3b8:	0a000013 	beq	40c <ascii_startup-0x1ffffbf4>
 3bc:	13490021 	movtne	r0, #36897	; 0x9021
 3c0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3c4:	0b00240b 	bleq	93f8 <ascii_startup-0x1fff6c08>
 3c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3cc:	0c000008 	stceq	0, cr0, [r0], {8}
 3d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3d4:	0b3b0b3a 	bleq	ec30c4 <ascii_startup-0x1f13cf3c>
 3d8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3dc:	00001802 	andeq	r1, r0, r2, lsl #16
 3e0:	0300050d 	movweq	r0, #1293	; 0x50d
 3e4:	3b0b3a08 	blcc	2cec0c <ascii_startup-0x1fd313f4>
 3e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3ec:	00180213 	andseq	r0, r8, r3, lsl r2
 3f0:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 3f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3f8:	0b3b0b3a 	bleq	ec30e8 <ascii_startup-0x1f13cf18>
 3fc:	01110b39 	tsteq	r1, r9, lsr fp
 400:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 404:	00194296 	mulseq	r9, r6, r2
 408:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 40c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 410:	0b3b0b3a 	bleq	ec3100 <ascii_startup-0x1f13cf00>
 414:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 418:	01111349 	tsteq	r1, r9, asr #6
 41c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 420:	00194296 	mulseq	r9, r6, r2
 424:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 428:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 42c:	0b3b0b3a 	bleq	ec311c <ascii_startup-0x1f13cee4>
 430:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 434:	01111349 	tsteq	r1, r9, asr #6
 438:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 43c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 440:	11000013 	tstne	r0, r3, lsl r0
 444:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 448:	0b3a0e03 	bleq	e83c5c <ascii_startup-0x1f17c3a4>
 44c:	0b390b3b 	bleq	e43140 <ascii_startup-0x1f1bcec0>
 450:	01111927 	tsteq	r1, r7, lsr #18
 454:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 458:	01194297 			; <UNDEFINED> instruction: 0x01194297
 45c:	12000013 	andne	r0, r0, #19, 0
 460:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 464:	0b3a0e03 	bleq	e83c78 <ascii_startup-0x1f17c388>
 468:	0b390b3b 	bleq	e4315c <ascii_startup-0x1f1bcea4>
 46c:	01111927 	tsteq	r1, r7, lsr #18
 470:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 474:	00194297 	mulseq	r9, r7, r2
 478:	11010000 	mrsne	r0, (UNDEF: 1)
 47c:	130e2501 	movwne	r2, #58625	; 0xe501
 480:	1b0e030b 	blne	3810b4 <ascii_startup-0x1fc7ef4c>
 484:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 488:	00171006 	andseq	r1, r7, r6
 48c:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
 490:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 494:	0b3b0b3a 	bleq	ec3184 <ascii_startup-0x1f13ce7c>
 498:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 49c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4a4:	00130119 	andseq	r0, r3, r9, lsl r1
 4a8:	00050300 	andeq	r0, r5, r0, lsl #6
 4ac:	0b3a0803 	bleq	e824c0 <ascii_startup-0x1f17db40>
 4b0:	0b390b3b 	bleq	e431a4 <ascii_startup-0x1f1bce5c>
 4b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b8:	34040000 	strcc	r0, [r4], #-0
 4bc:	3a080300 	bcc	2010c4 <ascii_startup-0x1fdfef3c>
 4c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4c8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 4cc:	0b0b0024 	bleq	2c0564 <ascii_startup-0x1fd3fa9c>
 4d0:	0e030b3e 	vmoveq.16	d3[0], r0
 4d4:	24060000 	strcs	r0, [r6], #-0
 4d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4dc:	0008030b 	andeq	r0, r8, fp, lsl #6
 4e0:	010b0700 	tsteq	fp, r0, lsl #14
 4e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4e8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 4ec:	03193f00 	tsteq	r9, #0, 30
 4f0:	3b0b3a0e 	blcc	2ced30 <ascii_startup-0x1fd312d0>
 4f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 4f8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4fc:	97184006 	ldrls	r4, [r8, -r6]
 500:	00001942 	andeq	r1, r0, r2, asr #18
 504:	01110100 	tsteq	r1, r0, lsl #2
 508:	0b130e25 	bleq	4c3da4 <ascii_startup-0x1fb3c25c>
 50c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 510:	01111755 	tsteq	r1, r5, asr r7
 514:	00001710 	andeq	r1, r0, r0, lsl r7
 518:	03003402 	movweq	r3, #1026	; 0x402
 51c:	3b0b3a0e 	blcc	2ced5c <ascii_startup-0x1fd312a4>
 520:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 524:	3c193f13 	ldccc	15, cr3, [r9], {19}
 528:	03000019 	movweq	r0, #25
 52c:	0b0b0024 	bleq	2c05c4 <ascii_startup-0x1fd3fa3c>
 530:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 534:	13040000 	movwne	r0, #16384	; 0x4000
 538:	3a0b0b01 	bcc	2c3144 <ascii_startup-0x1fd3cebc>
 53c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 540:	0013010b 	andseq	r0, r3, fp, lsl #2
 544:	000d0500 	andeq	r0, sp, r0, lsl #10
 548:	0b3a0803 	bleq	e8255c <ascii_startup-0x1f17daa4>
 54c:	0b390b3b 	bleq	e43240 <ascii_startup-0x1f1bcdc0>
 550:	0b381349 	bleq	e0527c <ascii_startup-0x1f1fad84>
 554:	24060000 	strcs	r0, [r6], #-0
 558:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 55c:	000e030b 	andeq	r0, lr, fp, lsl #6
 560:	00160700 	andseq	r0, r6, r0, lsl #14
 564:	0b3a0e03 	bleq	e83d78 <ascii_startup-0x1f17c288>
 568:	0b390b3b 	bleq	e4325c <ascii_startup-0x1f1bcda4>
 56c:	00001349 	andeq	r1, r0, r9, asr #6
 570:	03000d08 	movweq	r0, #3336	; 0xd08
 574:	3b0b3a0e 	blcc	2cedb4 <ascii_startup-0x1fd3124c>
 578:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 57c:	000b3813 	andeq	r3, fp, r3, lsl r8
 580:	01010900 	tsteq	r1, r0, lsl #18
 584:	13011349 	movwne	r1, #4937	; 0x1349
 588:	210a0000 	mrscs	r0, (UNDEF: 10)
 58c:	2f134900 	svccs	0x00134900
 590:	0b00000b 	bleq	5c4 <ascii_startup-0x1ffffa3c>
 594:	0b0b000f 	bleq	2c05d8 <ascii_startup-0x1fd3fa28>
 598:	00001349 	andeq	r1, r0, r9, asr #6
 59c:	0301130c 	movweq	r1, #4876	; 0x130c
 5a0:	3a0b0b0e 	bcc	2c31e0 <ascii_startup-0x1fd3ce20>
 5a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5a8:	0013010b 	andseq	r0, r3, fp, lsl #2
 5ac:	01150d00 	tsteq	r5, r0, lsl #26
 5b0:	13011927 	movwne	r1, #6439	; 0x1927
 5b4:	050e0000 	streq	r0, [lr, #-0]
 5b8:	00134900 	andseq	r4, r3, r0, lsl #18
 5bc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 5c0:	0b3a1347 	bleq	e852e4 <ascii_startup-0x1f17ad1c>
 5c4:	0b390b3b 	bleq	e432b8 <ascii_startup-0x1f1bcd48>
 5c8:	00001802 	andeq	r1, r0, r2, lsl #16
 5cc:	03003410 	movweq	r3, #1040	; 0x410
 5d0:	3b0b3a0e 	blcc	2cee10 <ascii_startup-0x1fd311f0>
 5d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5d8:	02193f13 	andseq	r3, r9, #76	; 0x4c
 5dc:	11000018 	tstne	r0, r8, lsl r0
 5e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5e4:	0b3b0b3a 	bleq	ec32d4 <ascii_startup-0x1f13cd2c>
 5e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 5ec:	00001802 	andeq	r1, r0, r2, lsl #16
 5f0:	03003412 	movweq	r3, #1042	; 0x412
 5f4:	3b0b3a0e 	blcc	2cee34 <ascii_startup-0x1fd311cc>
 5f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 5fc:	00180213 	andseq	r0, r8, r3, lsl r2
 600:	00341300 	eorseq	r1, r4, r0, lsl #6
 604:	0b3a0803 	bleq	e82618 <ascii_startup-0x1f17d9e8>
 608:	0b39053b 	bleq	e41afc <ascii_startup-0x1f1be504>
 60c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 610:	00001802 	andeq	r1, r0, r2, lsl #16
 614:	3f002e14 	svccc	0x00002e14
 618:	3a0e0319 	bcc	381284 <ascii_startup-0x1fc7ed7c>
 61c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 620:	1113490b 	tstne	r3, fp, lsl #18
 624:	40061201 	andmi	r1, r6, r1, lsl #4
 628:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 62c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 630:	03193f01 	tsteq	r9, #1, 30
 634:	3b0b3a0e 	blcc	2cee74 <ascii_startup-0x1fd3118c>
 638:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 63c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 640:	96184006 	ldrls	r4, [r8], -r6
 644:	13011942 	movwne	r1, #6466	; 0x1942
 648:	34160000 	ldrcc	r0, [r6], #-0
 64c:	3a080300 	bcc	201254 <ascii_startup-0x1fdfedac>
 650:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 654:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 658:	17000018 	smladne	r0, r8, r0, r0
 65c:	0111010b 	tsteq	r1, fp, lsl #2
 660:	00000612 	andeq	r0, r0, r2, lsl r6
 664:	3f012e18 	svccc	0x00012e18
 668:	3a0e0319 	bcc	3812d4 <ascii_startup-0x1fc7ed2c>
 66c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 670:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 674:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 678:	97184006 	ldrls	r4, [r8, -r6]
 67c:	13011942 	movwne	r1, #6466	; 0x1942
 680:	05190000 	ldreq	r0, [r9, #-0]
 684:	3a080300 	bcc	20128c <ascii_startup-0x1fdfed74>
 688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 68c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 690:	1a000018 	bne	6f8 <ascii_startup-0x1ffff908>
 694:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 698:	0b3b0b3a 	bleq	ec3388 <ascii_startup-0x1f13cc78>
 69c:	13490b39 	movtne	r0, #39737	; 0x9b39
 6a0:	00001802 	andeq	r1, r0, r2, lsl #16
 6a4:	3f012e1b 	svccc	0x00012e1b
 6a8:	3a0e0319 	bcc	381314 <ascii_startup-0x1fc7ecec>
 6ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6b0:	1119270b 	tstne	r9, fp, lsl #14
 6b4:	40061201 	andmi	r1, r6, r1, lsl #4
 6b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6bc:	00001301 	andeq	r1, r0, r1, lsl #6
 6c0:	0300341c 	movweq	r3, #1052	; 0x41c
 6c4:	3b0b3a08 	blcc	2ceeec <ascii_startup-0x1fd31114>
 6c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6cc:	00180213 	andseq	r0, r8, r3, lsl r2
 6d0:	002e1d00 	eoreq	r1, lr, r0, lsl #26
 6d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6d8:	0b3b0b3a 	bleq	ec33c8 <ascii_startup-0x1f13cc38>
 6dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 6e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6e8:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
 6ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6f0:	0b3a0e03 	bleq	e83f04 <ascii_startup-0x1f17c0fc>
 6f4:	0b390b3b 	bleq	e433e8 <ascii_startup-0x1f1bcc18>
 6f8:	01111927 	tsteq	r1, r7, lsr #18
 6fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 700:	01194297 			; <UNDEFINED> instruction: 0x01194297
 704:	00000013 	andeq	r0, r0, r3, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000020 	andcs	r0, r0, r0, lsr #32
  14:	000003fc 	strdeq	r0, [r0], -ip
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	03e70002 	mvneq	r0, #2, 0
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000041c 	andcs	r0, r0, ip, lsl r4
  34:	00000302 	andeq	r0, r0, r2, lsl #6
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	07d40002 	ldrbeq	r0, [r4, r2]
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000720 	andcs	r0, r0, r0, lsr #14
  54:	0000045c 	andeq	r0, r0, ip, asr r4
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0b310002 	bleq	c4007c <ascii_startup-0x1f3bff84>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000b7c 	andcs	r0, r0, ip, ror fp
  7c:	000000a6 	andeq	r0, r0, r6, lsr #1
	...
  88:	00000024 	andeq	r0, r0, r4, lsr #32
  8c:	0be60002 	bleq	ff98009c <end_game+0xdf97eb8c>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c24 	andcs	r0, r0, r4, lsr #24
  9c:	00000460 	andeq	r0, r0, r0, ror #8
  a0:	20000010 	andcs	r0, r0, r0, lsl r0
  a4:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000027b 	andeq	r0, r0, fp, ror r2
   4:	00850003 	addeq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6e612f73 	mcrvs	15, 3, r2, cr1, cr3, {3}
  24:	61657264 	cmnvs	r5, r4, ror #4
  28:	756a6c73 	strbvc	r6, [sl, #-3187]!	; 0xfffff38d
  2c:	442f676e 	strtmi	r6, [pc], #-1902	; 34 <ascii_startup-0x1fffffcc>
  30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  34:	442f706f 	strtmi	r7, [pc], #-111	; 3c <ascii_startup-0x1fffffc4>
  38:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  3c:	6f432f30 	svcvs	0x00432f30
  40:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  44:	4c5f6574 	cfldr64mi	mvdx6, [pc], {116}	; 0x74
  48:	2f626261 	svccs	0x00626261
  4c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
  50:	6f706c65 	svcvs	0x00706c65
  54:	0000676e 	andeq	r6, r0, lr, ror #14
  58:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  5c:	705f7265 	subsvc	r7, pc, r5, ror #4
  60:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  64:	00632e73 	rsbeq	r2, r3, r3, ror lr
  68:	70000001 	andvc	r0, r0, r1
  6c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
  70:	6f705f72 	svcvs	0x00705f72
  74:	73746e69 	cmnvc	r4, #1680	; 0x690
  78:	0100682e 	tsteq	r0, lr, lsr #16
  7c:	61670000 	cmnvs	r7, r0
  80:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
  84:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
  88:	0100682e 	tsteq	r0, lr, lsr #16
  8c:	05000000 	streq	r0, [r0, #-0]
  90:	0205001a 	andeq	r0, r5, #26, 0
  94:	20000020 	andcs	r0, r0, r0, lsr #32
  98:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
  9c:	0b054b09 	bleq	152cc8 <ascii_startup-0x1fead338>
  a0:	210c052f 	tstcs	ip, pc, lsr #10
  a4:	0b053a3d 	bleq	14e9a0 <ascii_startup-0x1feb1660>
  a8:	320c052e 	andcc	r0, ip, #192937984	; 0xb800000
  ac:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
  b0:	09054d26 	stmdbeq	r5, {r1, r2, r5, r8, sl, fp, lr}
  b4:	2e150559 	mrccs	5, 0, r0, cr5, cr9, {2}
  b8:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
  bc:	0c05310b 	stfeqs	f3, [r5], {11}
  c0:	3d0b0521 	cfstr32cc	mvfx0, [fp, #-132]	; 0xffffff7c
  c4:	420c0572 	andmi	r0, ip, #478150656	; 0x1c800000
  c8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
  cc:	0402000d 	streq	r0, [r2], #-13
  d0:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
  d4:	05750304 	ldrbeq	r0, [r5, #-772]!	; 0xfffffcfc
  d8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
  dc:	16057503 	strne	r7, [r5], -r3, lsl #10
  e0:	03040200 	movweq	r0, #16896	; 0x4200
  e4:	0011052e 	andseq	r0, r1, lr, lsr #10
  e8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
  ec:	02000c05 	andeq	r0, r0, #1280	; 0x500
  f0:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
  f4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
  f8:	1c052e03 	stcne	14, cr2, [r5], {3}
  fc:	03040200 	movweq	r0, #16896	; 0x4200
 100:	001b052e 	andseq	r0, fp, lr, lsr #10
 104:	1d030402 	cfstrsne	mvf0, [r3, #-8]
 108:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 10c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 110:	0e054f08 	cdpeq	15, 0, cr4, cr5, cr8, {0}
 114:	2f01053c 	svccs	0x0001053c
 118:	054c3805 	strbeq	r3, [ip, #-2053]	; 0xfffff7fb
 11c:	0505680e 	streq	r6, [r5, #-2062]	; 0xfffff7f2
 120:	001e052e 	andseq	r0, lr, lr, lsr #10
 124:	21030402 	tstcs	r3, r2, lsl #8
 128:	02000f05 	andeq	r0, r0, #5, 30
 12c:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 130:	0402000d 	streq	r0, [r2], #-13
 134:	1e053c03 	cdpne	12, 0, cr3, cr5, cr3, {0}
 138:	03040200 	movweq	r0, #16896	; 0x4200
 13c:	0016052e 	andseq	r0, r6, lr, lsr #10
 140:	20030402 	andcs	r0, r3, r2, lsl #8
 144:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 148:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 14c:	0402000f 	streq	r0, [r2], #-15
 150:	2d052e03 	stccs	14, cr2, [r5, #-12]
 154:	03040200 	movweq	r0, #16896	; 0x4200
 158:	0019053a 	andseq	r0, r9, sl, lsr r5
 15c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 160:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 164:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 168:	1d054001 	stcne	0, cr4, [r5, #-4]
 16c:	4b08055a 	blmi	2016dc <ascii_startup-0x1fdfe924>
 170:	053e1705 	ldreq	r1, [lr, #-1797]!	; 0xfffff8fb
 174:	08055909 	stmdaeq	r5, {r0, r3, r8, fp, ip, lr}
 178:	3d17054c 	cfldr32cc	mvfx0, [r7, #-304]	; 0xfffffed0
 17c:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 180:	01054d05 	tsteq	r5, r5, lsl #26
 184:	84190531 	ldrhi	r0, [r9], #-1329	; 0xfffffacf
 188:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 18c:	2f052e08 	svccs	0x00052e08
 190:	01040200 	mrseq	r0, R12_usr
 194:	001d052e 	andseq	r0, sp, lr, lsr #10
 198:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 19c:	05301c05 	ldreq	r1, [r0, #-3077]!	; 0xfffff3fb
 1a0:	1605580c 	strne	r5, [r5], -ip, lsl #16
 1a4:	3d0d0530 	cfstr32cc	mvfx0, [sp, #-192]	; 0xffffff40
 1a8:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
 1ac:	1205ad0d 	andne	sl, r5, #832	; 0x340
 1b0:	910d055a 	tstls	sp, sl, asr r5
 1b4:	055e1c05 	ldrbeq	r1, [lr, #-3077]	; 0xfffff3fb
 1b8:	1605580c 	strne	r5, [r5], -ip, lsl #16
 1bc:	3d0d0530 	cfstr32cc	mvfx0, [sp, #-192]	; 0xffffff40
 1c0:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
 1c4:	1205ad0d 	andne	sl, r5, #832	; 0x340
 1c8:	830d055a 	movwhi	r0, #54618	; 0xd55a
 1cc:	055c0105 	ldrbeq	r0, [ip, #-261]	; 0xfffffefb
 1d0:	0505f421 	streq	pc, [r5, #-1057]	; 0xfffffbdf
 1d4:	2f14052f 	svccs	0x0014052f
 1d8:	3e06053d 	mcrcc	5, 0, r0, cr6, cr13, {1}
 1dc:	4b01054b 	blmi	41710 <ascii_startup-0x1ffbe8f0>
 1e0:	05842f05 	streq	r2, [r4, #3845]	; 0xf05
 1e4:	0575590a 	ldrbeq	r5, [r5, #-2314]!	; 0xfffff6f6
 1e8:	08057609 	stmdaeq	r5, {r0, r3, r9, sl, ip, sp, lr}
 1ec:	00160530 	andseq	r0, r6, r0, lsr r5
 1f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1f4:	05830805 	streq	r0, [r3, #2053]	; 0x805
 1f8:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 1fc:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
 200:	001f0596 	mulseq	pc, r6, r5	; <UNPREDICTABLE>
 204:	3c010402 	cfstrscc	mvf0, [r1], {2}
 208:	053d0805 	ldreq	r0, [sp, #-2053]!	; 0xfffff7fb
 20c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 210:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
 214:	3d15053e 	cfldr32cc	mvfx0, [r5, #-248]	; 0xffffff08
 218:	4c09054b 	cfstr32mi	mvfx0, [r9], {75}	; 0x4b
 21c:	05781005 	ldrbeq	r1, [r8, #-5]!
 220:	08052016 	stmdaeq	r5, {r1, r2, r4, sp}
 224:	3d05054b 	cfstr32cc	mvfx0, [r5, #-300]	; 0xfffffed4
 228:	05840a05 	streq	r0, [r4, #2565]	; 0xa05
 22c:	10055905 	andne	r5, r5, r5, lsl #18
 230:	20160568 	andscs	r0, r6, r8, ror #10
 234:	053f0805 	ldreq	r0, [pc, #-2053]!	; fffffa37 <end_game+0xdfffe527>
 238:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 23c:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
 240:	00160567 	andseq	r0, r6, r7, ror #10
 244:	3c010402 	cfstrscc	mvf0, [r1], {2}
 248:	05760105 	ldrbeq	r0, [r6, #-261]!	; 0xfffffefb
 24c:	0a05db31 	beq	176f18 <ascii_startup-0x1fe890e8>
 250:	7709055d 	smlsdvc	r9, sp, r5, r0
 254:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 258:	1205870c 	andne	r8, r5, #12, 14	; 0x300000
 25c:	3d080520 	cfstr32cc	mvfx0, [r8, #-128]	; 0xffffff80
 260:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 264:	05057b0a 	streq	r7, [r5, #-2826]	; 0xfffff4f6
 268:	6e0c0559 	cfrshl32vs	mvfx12, mvfx9, r0
 26c:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 270:	0c053e05 	stceq	14, cr3, [r5], {5}
 274:	03010559 	movweq	r0, #5465	; 0x1559
 278:	0902200f 	stmdbeq	r2, {r0, r1, r2, r3, sp}
 27c:	69010100 	stmdbvs	r1, {r8}
 280:	03000002 	movweq	r0, #2
 284:	00008200 	andeq	r8, r0, r0, lsl #4
 288:	fb010200 	blx	40a92 <ascii_startup-0x1ffbf56e>
 28c:	01000d0e 	tsteq	r0, lr, lsl #26
 290:	00010101 	andeq	r0, r1, r1, lsl #2
 294:	00010000 	andeq	r0, r1, r0
 298:	552f0100 	strpl	r0, [pc, #-256]!	; 1a0 <ascii_startup-0x1ffffe60>
 29c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2a0:	646e612f 	strbtvs	r6, [lr], #-303	; 0xfffffed1
 2a4:	73616572 	cmnvc	r1, #478150656	; 0x1c800000
 2a8:	6e756a6c 	vsubvs.f32	s13, s10, s25
 2ac:	65442f67 	strbvs	r2, [r4, #-3943]	; 0xfffff099
 2b0:	6f746b73 	svcvs	0x00746b73
 2b4:	41442f70 	hvcmi	17136	; 0x42f0
 2b8:	30393354 	eorscc	r3, r9, r4, asr r3
 2bc:	646f432f 	strbtvs	r4, [pc], #-815	; 2c4 <ascii_startup-0x1ffffd3c>
 2c0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 2c4:	614c5f65 	cmpvs	ip, r5, ror #30
 2c8:	732f6262 			; <UNDEFINED> instruction: 0x732f6262
 2cc:	65676e69 	strbvs	r6, [r7, #-3689]!	; 0xfffff197
 2d0:	6e6f706c 	cdpvs	0, 6, cr7, cr15, cr12, {3}
 2d4:	67000067 	strvs	r0, [r0, -r7, rrx]
 2d8:	5f656d61 	svcpl	0x00656d61
 2dc:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 2e0:	00632e63 	rsbeq	r2, r3, r3, ror #28
 2e4:	70000001 	andvc	r0, r0, r1
 2e8:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 2ec:	6f705f72 	svcvs	0x00705f72
 2f0:	73746e69 	cmnvc	r4, #1680	; 0x690
 2f4:	0100682e 	tsteq	r0, lr, lsr #16
 2f8:	61670000 	cmnvs	r7, r0
 2fc:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
 300:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 304:	0100682e 	tsteq	r0, lr, lsr #16
 308:	05000000 	streq	r0, [r0, #-0]
 30c:	0205003f 	andeq	r0, r5, #63, 0	; 0x3f
 310:	2000041c 	andcs	r0, r0, ip, lsl r4
 314:	67140517 			; <UNDEFINED> instruction: 0x67140517
 318:	3f0e053d 	svccc	0x000e053d
 31c:	053f0c05 	ldreq	r0, [pc, #-3077]!	; fffff71f <end_game+0xdfffe20f>
 320:	13052e05 	movwne	r2, #24069	; 0x5e05
 324:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
 328:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 32c:	05053e0c 	streq	r3, [r5, #-3596]	; 0xfffff1f4
 330:	3d12052e 	cfldr32cc	mvfx0, [r2, #-184]	; 0xffffff48
 334:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 338:	30402e05 	subcc	r2, r0, r5, lsl #28
 33c:	01053e30 	tsteq	r5, r0, lsr lr
 340:	a0290568 	eorge	r0, r9, r8, ror #10
 344:	055b0605 	ldrbeq	r0, [fp, #-1541]	; 0xfffff9fb
 348:	0b052e05 	bleq	14bb64 <ascii_startup-0x1feb449c>
 34c:	2e13053d 	mrccs	5, 0, r0, cr3, cr13, {1}
 350:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 354:	13052f0b 	movwne	r2, #24331	; 0x5f0b
 358:	2e09052e 	cfsh32cs	mvfx0, mvfx9, #30
 35c:	2f300a05 	svccs	0x00300a05
 360:	3d320d05 	ldccc	13, cr0, [r2, #-20]!	; 0xffffffec
 364:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 368:	18052e05 	stmdane	r5, {r0, r2, r9, sl, fp, sp}
 36c:	4a08053e 	bmi	20186c <ascii_startup-0x1fdfe794>
 370:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff973 <end_game+0xdfffe463>
 374:	0a052e09 	beq	14bba0 <ascii_startup-0x1feb4460>
 378:	2e09055a 	cfrshl32cs	mvfx9, mvfx10, r0
 37c:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
 380:	05932f01 	ldreq	r2, [r3, #3841]	; 0xf01
 384:	1c05cc0d 	stcne	12, cr12, [r5], {13}
 388:	2f0d0520 	svccs	0x000d0520
 38c:	201c0522 	andscs	r0, ip, r2, lsr #10
 390:	222f0d05 	eorcs	r0, pc, #320	; 0x140
 394:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 398:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
 39c:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
 3a0:	1c05222f 	sfmne	f2, 4, [r5], {47}	; 0x2f
 3a4:	2f0d0520 	svccs	0x000d0520
 3a8:	94220105 	strtls	r0, [r2], #-261	; 0xfffffefb
 3ac:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
 3b0:	0b053c07 	bleq	14f3d4 <ascii_startup-0x1feb0c2c>
 3b4:	3c080521 	cfstr32cc	mvfx0, [r8], {33}	; 0x21
 3b8:	02001905 	andeq	r1, r0, #81920	; 0x14000
 3bc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3c0:	08052f0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
 3c4:	0019053c 	andseq	r0, r9, ip, lsr r5
 3c8:	20010402 	andcs	r0, r1, r2, lsl #8
 3cc:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff8cf <end_game+0xdfffe3bf>
 3d0:	19053c08 	stmdbne	r5, {r3, sl, fp, ip, sp}
 3d4:	01040200 	mrseq	r0, R12_usr
 3d8:	2f0b0520 	svccs	0x000b0520
 3dc:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 3e0:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 3e4:	0c052001 	stceq	0, cr2, [r5], {1}
 3e8:	2101052f 	tstcs	r1, pc, lsr #10
 3ec:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 3f0:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
 3f4:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 3f8:	4b140522 	blmi	501888 <ascii_startup-0x1fafe778>
 3fc:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
 400:	1a053e20 	bne	14fc88 <ascii_startup-0x1feb0378>
 404:	202c052e 	eorcs	r0, ip, lr, lsr #10
 408:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
 40c:	20052017 	andcs	r2, r5, r7, lsl r0
 410:	02040200 	andeq	r0, r4, #0, 4
 414:	00050537 	andeq	r0, r5, r7, lsr r5
 418:	3c010402 	cfstrscc	mvf0, [r1], {2}
 41c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 420:	01053d0c 	tsteq	r5, ip, lsl #26
 424:	01040200 	mrseq	r0, R12_usr
 428:	6a2c0521 	bvs	b018b4 <ascii_startup-0x1f4fe74c>
 42c:	055a0905 	ldrbeq	r0, [sl, #-2309]	; 0xfffff6fb
 430:	23053d19 	movwcs	r3, #23833	; 0x5d19
 434:	2e28052e 	cfsh64cs	mvdx0, mvdx8, #30
 438:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 43c:	1e052f19 	mcrne	15, 0, r2, cr5, cr9, {0}
 440:	2029052e 	eorcs	r0, r9, lr, lsr #10
 444:	2f2e0905 	svccs	0x002e0905
 448:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 44c:	1a052e05 	bne	14bc68 <ascii_startup-0x1feb4398>
 450:	2e260521 	cfsh64cs	mvdx0, mvdx6, #17
 454:	05662c05 	strbeq	r2, [r6, #-3077]!	; 0xfffff3fb
 458:	0f052e29 	svceq	0x00052e29
 45c:	3c35053c 	cfldr32cc	mvfx0, [r5], #-240	; 0xffffff10
 460:	052e4105 	streq	r4, [lr, #-261]!	; 0xfffffefb
 464:	43056645 	movwmi	r6, #22085	; 0x5645
 468:	3c0f052e 	cfstr32cc	mvfx0, [pc], {46}	; 0x2e
 46c:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 470:	2b053c0c 	blcs	14f4a8 <ascii_startup-0x1feb0b58>
 474:	01040200 	mrseq	r0, R12_usr
 478:	0022053c 	eoreq	r0, r2, ip, lsr r5
 47c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 480:	02004705 	andeq	r4, r0, #1310720	; 0x140000
 484:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 488:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 48c:	63053c02 	movwvs	r3, #23554	; 0x5c02
 490:	03040200 	movweq	r0, #16896	; 0x4200
 494:	005a053c 	subseq	r0, sl, ip, lsr r5
 498:	3c030402 	cfstrscc	mvf0, [r3], {2}
 49c:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
 4a0:	1a052a2d 	bne	14ad5c <ascii_startup-0x1feb52a4>
 4a4:	01040200 	mrseq	r0, R12_usr
 4a8:	001f053c 	andseq	r0, pc, ip, lsr r5	; <UNPREDICTABLE>
 4ac:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4b0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 4b4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4b8:	3c09030c 	stccc	3, cr0, [r9], {12}
 4bc:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 4c0:	0b054c28 	bleq	153568 <ascii_startup-0x1feaca98>
 4c4:	2e130575 	mrccs	5, 0, r0, cr3, cr5, {3}
 4c8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 4cc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 4d0:	23052e01 	movwcs	r2, #24065	; 0x5e01
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	0016052e 	andseq	r0, r6, lr, lsr #10
 4dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4e0:	302f1005 	eorcc	r1, pc, r5
 4e4:	02220105 	eoreq	r0, r2, #1073741825	; 0x40000001
 4e8:	01010004 	tsteq	r1, r4
 4ec:	00000284 	andeq	r0, r0, r4, lsl #5
 4f0:	005a0003 	subseq	r0, sl, r3
 4f4:	01020000 	mrseq	r0, (UNDEF: 2)
 4f8:	000d0efb 	strdeq	r0, [sp], -fp
 4fc:	01010101 	tsteq	r1, r1, lsl #2
 500:	01000000 	mrseq	r0, (UNDEF: 0)
 504:	2f010000 	svccs	0x00010000
 508:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 50c:	6e612f73 	mcrvs	15, 3, r2, cr1, cr3, {3}
 510:	61657264 	cmnvs	r5, r4, ror #4
 514:	756a6c73 	strbvc	r6, [sl, #-3187]!	; 0xfffff38d
 518:	442f676e 	strtmi	r6, [pc], #-1902	; 520 <ascii_startup-0x1ffffae0>
 51c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 520:	442f706f 	strtmi	r7, [pc], #-111	; 528 <ascii_startup-0x1ffffad8>
 524:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 528:	6f432f30 	svcvs	0x00432f30
 52c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 530:	4c5f6574 	cfldr64mi	mvdx6, [pc], {116}	; 0x74
 534:	2f626261 	svccs	0x00626261
 538:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 53c:	6f706c65 	svcvs	0x00706c65
 540:	0000676e 	andeq	r6, r0, lr, ror #14
 544:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 548:	00632e69 	rsbeq	r2, r3, r9, ror #28
 54c:	00000001 	andeq	r0, r0, r1
 550:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 554:	00000002 	andeq	r0, r0, r2
 558:	010a0320 	tsteq	sl, r0, lsr #6
 55c:	2f212113 	svccs	0x00212113
 560:	02201903 	eoreq	r1, r0, #49152	; 0xc000
 564:	01010003 	tsteq	r1, r3
 568:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
 56c:	00072002 	andeq	r2, r7, r2
 570:	012b0320 			; <UNDEFINED> instruction: 0x012b0320
 574:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
 578:	01052023 	tsteq	r5, r3, lsr #32
 57c:	20280532 	eorcs	r0, r8, r2, lsr r5
 580:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 584:	02052010 	andeq	r2, r5, #16, 0
 588:	200d052f 	andcs	r0, sp, pc, lsr #10
 58c:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff68f <end_game+0xdfffe17f>
 590:	13055905 	movwne	r5, #22789	; 0x5905
 594:	2f010520 	svccs	0x00010520
 598:	41082305 	tstmi	r8, r5, lsl #6
 59c:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
 5a0:	12052007 	andne	r2, r5, #7, 0
 5a4:	6605054b 	strvs	r0, [r5], -fp, asr #10
 5a8:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 5ac:	23054b01 	movwcs	r4, #23297	; 0x5b01
 5b0:	68090569 	stmdavs	r9, {r0, r3, r5, r6, r8, sl}
 5b4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 5b8:	07054b0b 	streq	r4, [r5, -fp, lsl #22]
 5bc:	2f05059e 	svccs	0x0005059e
 5c0:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 5c4:	22056701 	andcs	r6, r5, #262144	; 0x40000
 5c8:	3e050569 	cfsh32cc	mvfx0, mvfx5, #57
 5cc:	09052f3e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 5d0:	20070530 	andcs	r0, r7, r0, lsr r5
 5d4:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 5d8:	01053e0c 	tsteq	r5, ip, lsl #28
 5dc:	7725052f 	strvc	r0, [r5, -pc, lsr #10]!
 5e0:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 5e4:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 5e8:	052f3d05 	streq	r3, [pc, #-3333]!	; fffff8eb <end_game+0xdfffe3db>
 5ec:	1e053e01 	cdpne	14, 0, cr3, cr5, cr1, {0}
 5f0:	3e050569 	cfsh32cc	mvfx0, mvfx5, #57
 5f4:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 5f8:	053d2f05 	ldreq	r2, [sp, #-3845]!	; 0xfffff0fb
 5fc:	05053d09 	streq	r3, [r5, #-3337]	; 0xfffff2f7
 600:	2011055a 	andscs	r0, r1, sl, asr r5
 604:	052f0c05 	streq	r0, [pc, #-3077]!	; fffffa07 <end_game+0xdfffe4f7>
 608:	25052f01 	strcs	r2, [r5, #-3841]	; 0xfffff0ff
 60c:	2f0505a2 	svccs	0x000505a2
 610:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 614:	053d3005 	ldreq	r3, [sp, #-5]!
 618:	2d053d01 	stccs	13, cr3, [r5, #-4]
 61c:	68050593 	stmdavs	r5, {r0, r1, r4, r7, r8, sl}
 620:	01053e3d 	tsteq	r5, sp, lsr lr
 624:	4d2b0559 	cfstr32mi	mvfx0, [fp, #-356]!	; 0xfffffe9c
 628:	3d680505 	cfstr64cc	mvdx0, [r8, #-20]!	; 0xffffffec
 62c:	5901053e 	stmdbpl	r1, {r1, r2, r3, r4, r5, r8, sl}
 630:	750b054d 	strvc	r0, [fp, #-1357]	; 0xfffffab3
 634:	02000d05 	andeq	r0, r0, #320	; 0x140
 638:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 63c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 640:	0b053c01 	bleq	14f64c <ascii_startup-0x1feb09b4>
 644:	01040200 	mrseq	r0, R12_usr
 648:	2f05053c 	svccs	0x0005053c
 64c:	0105593e 	tsteq	r5, lr, lsr r9
 650:	0b054d4b 	bleq	153b84 <ascii_startup-0x1feac47c>
 654:	000d0530 	andeq	r0, sp, r0, lsr r5
 658:	20010402 	andcs	r0, r1, r2, lsl #8
 65c:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 660:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 664:	0402000b 	streq	r0, [r2], #-11
 668:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 66c:	053d3e2f 	ldreq	r3, [sp, #-3631]!	; 0xfffff1d1
 670:	0d053d0b 	stceq	13, cr3, [r5, #-44]	; 0xffffffd4
 674:	01040200 	mrseq	r0, R12_usr
 678:	00210520 	eoreq	r0, r1, r0, lsr #10
 67c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 680:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 684:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 688:	3d3f2f05 	ldccc	15, cr2, [pc, #-20]!	; 67c <ascii_startup-0x1ffff984>
 68c:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 690:	0402000d 	streq	r0, [r2], #-13
 694:	21052001 	tstcs	r5, r1
 698:	01040200 	mrseq	r0, R12_usr
 69c:	000b053c 	andeq	r0, fp, ip, lsr r5
 6a0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6a4:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 6a8:	0d05400b 	stceq	0, cr4, [r5, #-44]	; 0xffffffd4
 6ac:	01040200 	mrseq	r0, R12_usr
 6b0:	00210520 	eoreq	r0, r1, r0, lsr #10
 6b4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6b8:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 6bc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6c0:	3d3d3005 	ldccc	0, cr3, [sp, #-20]!	; 0xffffffec
 6c4:	3e01053f 	mcrcc	5, 0, r0, cr1, cr15, {1}
 6c8:	9308053f 	movwls	r0, #34111	; 0x853f
 6cc:	054d1d05 	strbeq	r1, [sp, #-3333]	; 0xfffff2fb
 6d0:	11055818 	tstne	r5, r8, lsl r8
 6d4:	05054e3c 	streq	r4, [r5, #-3644]	; 0xfffff1c4
 6d8:	9f010569 	svcls	0x00010569
 6dc:	9408054d 	strls	r0, [r8], #-1357	; 0xfffffab3
 6e0:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 6e4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
 6e8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 6ec:	1a055801 	bne	1566f8 <ascii_startup-0x1fea9908>
 6f0:	01040200 	mrseq	r0, R12_usr
 6f4:	4b12053c 	blmi	481bec <ascii_startup-0x1fb7e414>
 6f8:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 6fc:	3005a001 	andcc	sl, r5, r1
 700:	5a05054c 	bpl	141c38 <ascii_startup-0x1febe3c8>
 704:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
 708:	1c052f0a 	stcne	15, cr2, [r5], {10}
 70c:	3c090521 	cfstr32cc	mvfx0, [r9], {33}	; 0x21
 710:	05650b05 	strbeq	r0, [r5, #-2821]!	; 0xfffff4fb
 714:	01052e0a 	tsteq	r5, sl, lsl #28
 718:	5a330531 	bpl	cc1be4 <ascii_startup-0x1f33e41c>
 71c:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
 720:	0a054c07 	beq	153744 <ascii_startup-0x1feac8bc>
 724:	211c052f 	tstcs	ip, pc, lsr #10
 728:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 72c:	0a05650b 	beq	159b60 <ascii_startup-0x1fea64a0>
 730:	3101052e 	tstcc	r1, lr, lsr #10
 734:	3f0a055b 	svccc	0x000a055b
 738:	84050575 	strhi	r0, [r5], #-1397	; 0xfffffa8b
 73c:	07052f30 	smladxeq	r5, r0, pc, r2	; <UNPREDICTABLE>
 740:	2f0a054b 	svccs	0x000a054b
 744:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 748:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 74c:	0402000a 	streq	r0, [r2], #-10
 750:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
 754:	4b060531 	blmi	181c20 <ascii_startup-0x1fe7e3e0>
 758:	052f0a05 	streq	r0, [pc, #-2565]!	; fffffd5b <end_game+0xdfffe84b>
 75c:	0402000b 	streq	r0, [r2], #-11
 760:	0a052001 	beq	14876c <ascii_startup-0x1feb7894>
 764:	01040200 	mrseq	r0, R12_usr
 768:	310c052e 	tstcc	ip, lr, lsr #10
 76c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 770:	01010007 	tsteq	r1, r7
 774:	000000f7 	strdeq	r0, [r0], -r7
 778:	005a0003 	subseq	r0, sl, r3
 77c:	01020000 	mrseq	r0, (UNDEF: 2)
 780:	000d0efb 	strdeq	r0, [sp], -fp
 784:	01010101 	tsteq	r1, r1, lsl #2
 788:	01000000 	mrseq	r0, (UNDEF: 0)
 78c:	2f010000 	svccs	0x00010000
 790:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 794:	6e612f73 	mcrvs	15, 3, r2, cr1, cr3, {3}
 798:	61657264 	cmnvs	r5, r4, ror #4
 79c:	756a6c73 	strbvc	r6, [sl, #-3187]!	; 0xfffff38d
 7a0:	442f676e 	strtmi	r6, [pc], #-1902	; 7a8 <ascii_startup-0x1ffff858>
 7a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 7a8:	442f706f 	strtmi	r7, [pc], #-111	; 7b0 <ascii_startup-0x1ffff850>
 7ac:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 7b0:	6f432f30 	svcvs	0x00432f30
 7b4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 7b8:	4c5f6574 	cfldr64mi	mvdx6, [pc], {116}	; 0x74
 7bc:	2f626261 	svccs	0x00626261
 7c0:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 7c4:	6f706c65 	svcvs	0x00706c65
 7c8:	0000676e 	andeq	r6, r0, lr, ror #14
 7cc:	616c6564 	cmnvs	ip, r4, ror #10
 7d0:	00632e79 	rsbeq	r2, r3, r9, ror lr
 7d4:	00000001 	andeq	r0, r0, r1
 7d8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
 7dc:	000b7c02 	andeq	r7, fp, r2, lsl #24
 7e0:	02051420 	andeq	r1, r5, #32, 8	; 0x20000000
 7e4:	200c0530 	andcs	r0, ip, r0, lsr r5
 7e8:	052f0205 	streq	r0, [pc, #-517]!	; 5eb <ascii_startup-0x1ffffa15>
 7ec:	0205200c 	andeq	r2, r5, #12, 0
 7f0:	200a052f 	andcs	r0, sl, pc, lsr #10
 7f4:	052f0205 	streq	r0, [pc, #-517]!	; 5f7 <ascii_startup-0x1ffffa09>
 7f8:	0705200c 	streq	r2, [r5, -ip]
 7fc:	0009052f 	andeq	r0, r9, pc, lsr #10
 800:	20010402 	andcs	r0, r1, r2, lsl #8
 804:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 808:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 80c:	04020007 	streq	r0, [r2], #-7
 810:	03053c01 	movweq	r3, #23553	; 0x5c01
 814:	200d0521 	andcs	r0, sp, r1, lsr #10
 818:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
 81c:	0205a022 	andeq	sl, r5, #34, 0	; 0x22
 820:	210b054c 	tstcs	fp, ip, asr #10
 824:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 828:	04020004 	streq	r0, [r2], #-4
 82c:	14052103 	strne	r2, [r5], #-259	; 0xfffffefd
 830:	03040200 	movweq	r0, #16896	; 0x4200
 834:	0003052d 	andeq	r0, r3, sp, lsr #10
 838:	3c010402 	cfstrscc	mvf0, [r1], {2}
 83c:	053b1105 	ldreq	r1, [fp, #-261]!	; 0xfffffefb
 840:	04020002 	streq	r0, [r2], #-2
 844:	01053c01 	tsteq	r5, r1, lsl #24
 848:	5a220541 	bpl	881d54 <ascii_startup-0x1f77e2ac>
 84c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 850:	09053605 	stmdbeq	r5, {r0, r2, r9, sl, ip, sp}
 854:	02040200 	andeq	r0, r4, #0, 4
 858:	00130521 	andseq	r0, r3, r1, lsr #10
 85c:	49020402 	stmdbmi	r2, {r1, sl}
 860:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 864:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 868:	05023f01 	streq	r3, [r2, #-3841]	; 0xfffff0ff
 86c:	4c010100 	stfmis	f0, [r1], {-0}
 870:	03000003 	movweq	r0, #3
 874:	00007f00 	andeq	r7, r0, r0, lsl #30
 878:	fb010200 	blx	41082 <ascii_startup-0x1ffbef7e>
 87c:	01000d0e 	tsteq	r0, lr, lsl #26
 880:	00010101 	andeq	r0, r1, r1, lsl #2
 884:	00010000 	andeq	r0, r1, r0
 888:	552f0100 	strpl	r0, [pc, #-256]!	; 790 <ascii_startup-0x1ffff870>
 88c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 890:	646e612f 	strbtvs	r6, [lr], #-303	; 0xfffffed1
 894:	73616572 	cmnvc	r1, #478150656	; 0x1c800000
 898:	6e756a6c 	vsubvs.f32	s13, s10, s25
 89c:	65442f67 	strbvs	r2, [r4, #-3943]	; 0xfffff099
 8a0:	6f746b73 	svcvs	0x00746b73
 8a4:	41442f70 	hvcmi	17136	; 0x42f0
 8a8:	30393354 	eorscc	r3, r9, r4, asr r3
 8ac:	646f432f 	strbtvs	r4, [pc], #-815	; 8b4 <ascii_startup-0x1ffff74c>
 8b0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 8b4:	614c5f65 	cmpvs	ip, r5, ror #30
 8b8:	732f6262 			; <UNDEFINED> instruction: 0x732f6262
 8bc:	65676e69 	strbvs	r6, [r7, #-3689]!	; 0xfffff197
 8c0:	6e6f706c 	cdpvs	0, 6, cr7, cr15, cr12, {3}
 8c4:	73000067 	movwvc	r0, #103	; 0x67
 8c8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 8cc:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 8d0:	00000100 	andeq	r0, r0, r0, lsl #2
 8d4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8d8:	705f7265 	subsvc	r7, pc, r5, ror #4
 8dc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 8e0:	00682e73 	rsbeq	r2, r8, r3, ror lr
 8e4:	67000001 	strvs	r0, [r0, -r1]
 8e8:	5f656d61 	svcpl	0x00656d61
 8ec:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8f0:	00682e63 	rsbeq	r2, r8, r3, ror #28
 8f4:	00000001 	andeq	r0, r0, r1
 8f8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 8fc:	00001002 	andeq	r1, r0, r2
 900:	010e0320 	tsteq	lr, r0, lsr #6
 904:	2f212113 	svccs	0x00212113
 908:	02200c03 	eoreq	r0, r0, #768	; 0x300
 90c:	01010003 	tsteq	r1, r3
 910:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
 914:	000c2402 	andeq	r2, ip, r2, lsl #8
 918:	01230320 			; <UNDEFINED> instruction: 0x01230320
 91c:	13210205 			; <UNDEFINED> instruction: 0x13210205
 920:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 924:	02052320 	andeq	r2, r5, #32, 6	; 0x80000000
 928:	01051321 	tsteq	r5, r1, lsr #6
 92c:	23240521 			; <UNDEFINED> instruction: 0x23240521
 930:	13210205 			; <UNDEFINED> instruction: 0x13210205
 934:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 938:	02052327 	andeq	r2, r5, #-1677721600	; 0x9c000000
 93c:	01051321 	tsteq	r5, r1, lsr #6
 940:	05052321 	streq	r2, [r5, #-801]	; 0xfffffcdf
 944:	20250530 	eorcs	r0, r5, r0, lsr r5
 948:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 94c:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 950:	20110530 	andscs	r0, r1, r0, lsr r5
 954:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 958:	ba300322 	blt	c015e8 <ascii_startup-0x1f3fea18>
 95c:	054c0c05 	strbeq	r0, [ip, #-3077]	; 0xfffff3fb
 960:	17052e03 	strne	r2, [r5, -r3, lsl #28]
 964:	03040200 	movweq	r0, #16896	; 0x4200
 968:	00240521 	eoreq	r0, r4, r1, lsr #10
 96c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 970:	02002805 	andeq	r2, r0, #327680	; 0x50000
 974:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 978:	04020003 	streq	r0, [r2], #-3
 97c:	30052e03 	andcc	r2, r5, r3, lsl #28
 980:	03040200 	movweq	r0, #16896	; 0x4200
 984:	003c0520 	eorseq	r0, ip, r0, lsr #10
 988:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 98c:	02004005 	andeq	r4, r0, #5, 0
 990:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 994:	04020003 	streq	r0, [r2], #-3
 998:	29052e03 	stmdbcs	r5, {r0, r1, r9, sl, fp, sp}
 99c:	03040200 	movweq	r0, #16896	; 0x4200
 9a0:	00120549 	andseq	r0, r2, r9, asr #10
 9a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 9a8:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 9ac:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 9b0:	04020003 	streq	r0, [r2], #-3
 9b4:	02052001 	andeq	r2, r5, #1, 0
 9b8:	5a23053f 	bpl	8c1ebc <ascii_startup-0x1f73e144>
 9bc:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 9c0:	1a052e03 	bne	14c1d4 <ascii_startup-0x1feb3e2c>
 9c4:	03040200 	movweq	r0, #16896	; 0x4200
 9c8:	00280521 	eoreq	r0, r8, r1, lsr #10
 9cc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 9d0:	02002c05 	andeq	r2, r0, #1280	; 0x500
 9d4:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 9d8:	04020004 	streq	r0, [r2], #-4
 9dc:	34052e03 	strcc	r2, [r5], #-3587	; 0xfffff1fd
 9e0:	03040200 	movweq	r0, #16896	; 0x4200
 9e4:	00400520 	subeq	r0, r0, r0, lsr #10
 9e8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 9ec:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
 9f0:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 9f4:	04020004 	streq	r0, [r2], #-4
 9f8:	2a052e03 	bcs	14c20c <ascii_startup-0x1feb3df4>
 9fc:	03040200 	movweq	r0, #16896	; 0x4200
 a00:	00130549 	andseq	r0, r3, r9, asr #10
 a04:	3c010402 	cfstrscc	mvf0, [r1], {2}
 a08:	02001805 	andeq	r1, r0, #327680	; 0x50000
 a0c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 a10:	04020003 	streq	r0, [r2], #-3
 a14:	02052001 	andeq	r2, r5, #1, 0
 a18:	5c21053f 	cfstr32pl	mvfx0, [r1], #-252	; 0xffffff04
 a1c:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
 a20:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 a24:	2e11053d 	mrccs	5, 0, r0, cr1, cr13, {1}
 a28:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 a2c:	11052f09 	tstne	r5, r9, lsl #30
 a30:	2e07052e 	cfsh32cs	mvfx0, mvfx7, #30
 a34:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 a38:	0d053f0e 	stceq	15, cr3, [r5, #-56]	; 0xffffffc8
 a3c:	12054c2e 	andne	r4, r5, #11776	; 0x2e00
 a40:	05052f41 	streq	r2, [r5, #-3905]	; 0xfffff0bf
 a44:	3f0e0533 	svccc	0x000e0533
 a48:	4c2e0d05 	stcmi	13, cr0, [lr], #-20	; 0xffffffec
 a4c:	2f3d1205 	svccs	0x003d1205
 a50:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
 a54:	0c053d0e 	stceq	13, cr3, [r5], {14}
 a58:	200b052e 	andcs	r0, fp, lr, lsr #10
 a5c:	052f0805 	streq	r0, [pc, #-2053]!	; 25f <ascii_startup-0x1ffffda1>
 a60:	0e053005 	cdpeq	0, 0, cr3, cr5, cr5, {0}
 a64:	2e0c053d 	mcrcs	5, 0, r0, cr12, cr13, {1}
 a68:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 a6c:	0b052f08 	bleq	14c694 <ascii_startup-0x1feb396c>
 a70:	04053d30 	streq	r3, [r5], #-3376	; 0xfffff2d0
 a74:	2e03053d 	mcrcs	5, 0, r0, cr3, cr13, {1}
 a78:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 a7c:	06054d29 	streq	r4, [r5], -r9, lsr #26
 a80:	2e05054c 	cfsh32cs	mvfx0, mvfx5, #44
 a84:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 a88:	09052e13 	stmdbeq	r5, {r0, r1, r4, r9, sl, fp, sp}
 a8c:	2f0b052e 	svccs	0x000b052e
 a90:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 a94:	0f052e09 	svceq	0x00052e09
 a98:	2e0d0530 	cfmv64hrcs	mvdx13, r0
 a9c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 aa0:	05053306 	streq	r3, [r5, #-774]	; 0xfffffcfa
 aa4:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
 aa8:	054c2205 	strbeq	r2, [ip, #-517]	; 0xfffffdfb
 aac:	03054e04 	movweq	r4, #24068	; 0x5e04
 ab0:	3e09052e 	cfsh32cc	mvfx0, mvfx9, #30
 ab4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 ab8:	09052e07 	stmdbeq	r5, {r0, r1, r2, r9, sl, fp, sp}
 abc:	2e11052f 	cfmul64cs	mvdx0, mvdx1, mvdx15
 ac0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 ac4:	0e053105 	adfeqs	f3, f5, f5
 ac8:	2e0c053d 	mcrcs	5, 0, r0, cr12, cr13, {1}
 acc:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 ad0:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 ad4:	3d0e0530 	cfstr32cc	mvfx0, [lr, #-192]	; 0xffffff40
 ad8:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 adc:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
 ae0:	300b052f 	andcc	r0, fp, pc, lsr #10
 ae4:	3d04053d 	cfstr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 ae8:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 aec:	09053e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, ip, sp}
 af0:	4c01052e 	cfstr32mi	mvfx0, [r1], {46}	; 0x2e
 af4:	054c3705 	strbeq	r3, [ip, #-1797]	; 0xfffff8fb
 af8:	053d670a 	ldreq	r6, [sp, #-1802]!	; 0xfffff8f6
 afc:	12053f01 	andne	r3, r5, #1, 30
 b00:	05583c03 	ldrbeq	r3, [r8, #-3075]	; 0xfffff3fd
 b04:	302f3f09 	eorcc	r3, pc, r9, lsl #30
 b08:	2f300105 	svccs	0x00300105
 b0c:	3014052f 	andscc	r0, r4, pc, lsr #10
 b10:	3e15053d 	mrccc	5, 0, r0, cr5, cr13, {1}
 b14:	3e12053d 	mrccc	5, 0, r0, cr2, cr13, {1}
 b18:	4102053d 	tstmi	r2, sp, lsr r5
 b1c:	05340a05 	ldreq	r0, [r4, #-2565]!	; 0xfffff5fb
 b20:	053d2e09 	ldreq	r2, [sp, #-3593]!	; 0xfffff1f7
 b24:	09053d0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, sl, fp, ip, sp}
 b28:	3d10052e 	cfldr32cc	mvfx0, [r0, #-184]	; 0xffffff48
 b2c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 b30:	05833e1a 	streq	r3, [r3, #3610]	; 0xe1a
 b34:	1805840c 	stmdane	r5, {r2, r3, sl, pc}
 b38:	02040200 	andeq	r0, r4, #0, 4
 b3c:	0027053c 	eoreq	r0, r7, ip, lsr r5
 b40:	3c030402 	cfstrscc	mvf0, [r3], {2}
 b44:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
 b48:	1505590d 	strne	r5, [r5, #-2317]	; 0xfffff6f3
 b4c:	2e140596 	cfcmp32cs	r0, mvfx4, mvfx6
 b50:	02001f05 	andeq	r1, r0, #5, 30
 b54:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 b58:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 b5c:	16056801 	strne	r6, [r5], -r1, lsl #16
 b60:	6711051f 			; <UNDEFINED> instruction: 0x6711051f
 b64:	05221c05 	streq	r1, [r2, #-3077]!	; 0xfffff3fb
 b68:	0d052e15 	stceq	14, cr2, [r5, #-84]	; 0xffffffac
 b6c:	211c0558 	tstcs	ip, r8, asr r5
 b70:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 b74:	1b054a0d 	blne	1533b0 <ascii_startup-0x1feacc50>
 b78:	2e150522 	cfmul64cs	mvdx0, mvdx5, mvdx2
 b7c:	05580d05 	ldrbeq	r0, [r8, #-3333]	; 0xfffff2fb
 b80:	1505211b 	strne	r2, [r5, #-283]	; 0xfffffee5
 b84:	4a0d052e 	bmi	342044 <ascii_startup-0x1fcbdfbc>
 b88:	05206303 	streq	r6, [r0, #-771]!	; 0xfffffcfd
 b8c:	0826030b 	stmdaeq	r6!, {r0, r1, r3, r8, r9}
 b90:	30120512 	andscc	r0, r2, r2, lsl r5
 b94:	3d07053d 	cfstr32cc	mvfx0, [r7, #-244]	; 0xffffff0c
 b98:	053c0405 	ldreq	r0, [ip, #-1029]!	; 0xfffffbfb
 b9c:	053d4d12 	ldreq	r4, [sp, #-3346]!	; 0xfffff2ee
 ba0:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 ba4:	4b01053c 	blmi	4209c <ascii_startup-0x1ffbdf64>
 ba8:	05f40d05 	ldrbeq	r0, [r4, #3333]!	; 0xd05
 bac:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 bb0:	4b08053c 	blmi	2020a8 <ascii_startup-0x1fdfdf58>
 bb4:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 bb8:	08024b01 	stmdaeq	r2, {r0, r8, r9, fp, lr}
 bbc:	Address 0x0000000000000bbc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
   4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
   8:	705f657a 	subsvc	r6, pc, sl, ror r5	; <UNPREDICTABLE>
   c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
  10:	6f705f72 	svcvs	0x00705f72
  14:	73746e69 	cmnvc	r4, #1680	; 0x690
  18:	5f796d00 	svcpl	0x00796d00
  1c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
  20:	61726400 	cmnvs	r2, r0, lsl #8
  24:	4f475f77 	svcmi	0x00475f77
  28:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
  2c:	5f6f745f 	svcpl	0x006f745f
  30:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  34:	6900676e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  38:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  3c:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 44 <ascii_startup-0x1fffffbc>
  40:	00747865 	rsbseq	r7, r4, r5, ror #16
  44:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  48:	5f317265 	svcpl	0x00317265
  4c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  50:	2f007374 	svccs	0x00007374
  54:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  58:	6e612f73 	mcrvs	15, 3, r2, cr1, cr3, {3}
  5c:	61657264 	cmnvs	r5, r4, ror #4
  60:	756a6c73 	strbvc	r6, [sl, #-3187]!	; 0xfffff38d
  64:	442f676e 	strtmi	r6, [pc], #-1902	; 6c <ascii_startup-0x1fffff94>
  68:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  6c:	442f706f 	strtmi	r7, [pc], #-111	; 74 <ascii_startup-0x1fffff8c>
  70:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  74:	6f432f30 	svcvs	0x00432f30
  78:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  7c:	4c5f6574 	cfldr64mi	mvdx6, [pc], {116}	; 0x74
  80:	2f626261 	svccs	0x00626261
  84:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
  88:	6f706c65 	svcvs	0x00706c65
  8c:	6700676e 	strvs	r6, [r0, -lr, ror #14]
  90:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
  94:	5f657461 	svcpl	0x00657461
  98:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
  9c:	72747300 	rsbsvc	r7, r4, #0, 6
  a0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
  a4:	70006874 	andvc	r6, r0, r4, ror r8
  a8:	6f705f31 	svcvs	0x00705f31
  ac:	73746e69 	cmnvc	r4, #1680	; 0x690
  b0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  b4:	61007961 	tstvs	r0, r1, ror #18
  b8:	705f6464 	subsvc	r6, pc, r4, ror #8
  bc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  c0:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
  c4:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
  c8:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
  cc:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
  d0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
  d4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  d8:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
  dc:	5f726579 	svcpl	0x00726579
  e0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  e4:	65007374 	strvs	r7, [r0, #-884]	; 0xfffffc8c
  e8:	735f646e 	cmpvc	pc, #1845493760	; 0x6e000000
  ec:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
  f0:	6e750067 	cdpvs	0, 7, cr0, cr5, cr7, {3}
  f4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  f8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  fc:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 100:	6f54746e 	svcvs	0x0054746e
 104:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 108:	6300676e 	movwvs	r6, #1902	; 0x76e
 10c:	6b636568 	blvs	18d96b4 <ascii_startup-0x1e72694c>
 110:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
 114:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
 118:	0072656e 	rsbseq	r6, r2, lr, ror #10
 11c:	6f705f73 	svcvs	0x00705f73
 120:	73746e69 	cmnvc	r4, #1680	; 0x690
 124:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 128:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 12c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 130:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 134:	31393130 	teqcc	r9, r0, lsr r1
 138:	20353230 	eorscs	r3, r5, r0, lsr r2
 13c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 140:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 144:	415b2029 	cmpmi	fp, r9, lsr #32
 148:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 14c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 150:	6172622d 	cmnvs	r2, sp, lsr #4
 154:	2068636e 	rsbcs	r6, r8, lr, ror #6
 158:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 15c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 160:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 164:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 168:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 16c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 170:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 174:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 178:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 17c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 180:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 184:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 188:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 18c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 190:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 194:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 198:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 19c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 1a0:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
 1a4:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
 1a8:	5f700065 	svcpl	0x00700065
 1ac:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1b0:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
 1b4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 1b8:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 1c0 <ascii_startup-0x1ffffe40>
 1bc:	31747865 	cmncc	r4, r5, ror #16
 1c0:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 1c4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 1c8:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
 1cc:	2f003274 	svccs	0x00003274
 1d0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1d4:	6e612f73 	mcrvs	15, 3, r2, cr1, cr3, {3}
 1d8:	61657264 	cmnvs	r5, r4, ror #4
 1dc:	756a6c73 	strbvc	r6, [sl, #-3187]!	; 0xfffff38d
 1e0:	442f676e 	strtmi	r6, [pc], #-1902	; 1e8 <ascii_startup-0x1ffffe18>
 1e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 1e8:	442f706f 	strtmi	r7, [pc], #-111	; 1f0 <ascii_startup-0x1ffffe10>
 1ec:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 1f0:	6f432f30 	svcvs	0x00432f30
 1f4:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 1f8:	4c5f6574 	cfldr64mi	mvdx6, [pc], {116}	; 0x74
 1fc:	2f626261 	svccs	0x00626261
 200:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 204:	6f706c65 	svcvs	0x00706c65
 208:	702f676e 	eorvc	r6, pc, lr, ror #14
 20c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 210:	6f705f72 	svcvs	0x00705f72
 214:	73746e69 	cmnvc	r4, #1680	; 0x690
 218:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
 21c:	6f74746f 	svcvs	0x0074746f
 220:	6f725f6d 	svcvs	0x00725f6d
 224:	6c700077 	ldclvs	0, cr0, [r0], #-476	; 0xfffffe24
 228:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 22c:	6f705f32 	svcvs	0x00705f32
 230:	73746e69 	cmnvc	r4, #1680	; 0x690
 234:	706f7400 	rsbvc	r7, pc, r0, lsl #8
 238:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
 23c:	5f327000 	svcpl	0x00327000
 240:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 244:	50007374 	andpl	r7, r0, r4, ror r3
 248:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 134 <ascii_startup-0x1ffffecc>
 24c:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 250:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 258 <ascii_startup-0x1ffffda8>
 254:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
 258:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 25c:	0073746e 	rsbseq	r7, r3, lr, ror #8
 260:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 264:	695f7463 	ldmdbvs	pc, {r0, r1, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 268:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 26c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
 270:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 274:	61700065 	cmnvs	r0, r5, rrx
 278:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 27c:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
 280:	6400795f 	strvs	r7, [r0], #-2399	; 0xfffff6a1
 284:	00787269 	rsbseq	r7, r8, r9, ror #4
 288:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 28c:	6c616200 	sfmvs	f6, 2, [r1], #-0
 290:	6170006c 	cmnvs	r0, ip, rrx
 294:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 298:	6e00785f 	mcrvs	8, 0, r7, cr0, cr15, {2}
 29c:	675f7765 	ldrbvs	r7, [pc, -r5, ror #14]
 2a0:	00656d61 	rsbeq	r6, r5, r1, ror #26
 2a4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2a8:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
 2ac:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 2b0:	6a6c7361 	bvs	1b1d03c <ascii_startup-0x1e4e2fc4>
 2b4:	2f676e75 	svccs	0x00676e75
 2b8:	6b736544 	blvs	1cd97d0 <ascii_startup-0x1e326830>
 2bc:	2f706f74 	svccs	0x00706f74
 2c0:	33544144 	cmpcc	r4, #17
 2c4:	432f3039 			; <UNDEFINED> instruction: 0x432f3039
 2c8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 2cc:	5f657469 	svcpl	0x00657469
 2d0:	6262614c 	rsbvs	r6, r2, #19
 2d4:	6e69732f 	cdpvs	3, 6, cr7, cr9, cr15, {1}
 2d8:	706c6567 	rsbvc	r6, ip, r7, ror #10
 2dc:	2f676e6f 	svccs	0x00676e6f
 2e0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 2e4:	676f6c5f 			; <UNDEFINED> instruction: 0x676f6c5f
 2e8:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 2ec:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 2f0:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
 2f4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2f8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2fc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 300:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 304:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 308:	70006465 	andvc	r6, r0, r5, ror #8
 30c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 310:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 314:	64617000 	strbtvs	r7, [r1], #-0
 318:	5f656c64 	svcpl	0x00656c64
 31c:	5f6e696d 	svcpl	0x006e696d
 320:	61700078 	cmnvs	r0, r8, ror r0
 324:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 328:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
 32c:	7000795f 	andvc	r7, r0, pc, asr r9
 330:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 334:	70003165 	andvc	r3, r0, r5, ror #2
 338:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 33c:	6e003265 	cdpvs	2, 0, cr3, cr0, cr5, {3}
 340:	00787765 	rsbseq	r7, r8, r5, ror #14
 344:	7977656e 	ldmdbvc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 348:	7a697300 	bvc	1a5cf50 <ascii_startup-0x1e5a30b0>
 34c:	73007865 	movwvc	r7, #2149	; 0x865
 350:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 354:	61726400 	cmnvs	r2, r0, lsl #8
 358:	656b0077 	strbvs	r0, [fp, #-119]!	; 0xffffff89
 35c:	72006279 	andvc	r6, r0, #-1879048185	; 0x90000007
 360:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
 364:	4f475f65 	svcmi	0x00475f65
 368:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 36c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 370:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 374:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 378:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2be <ascii_startup-0x1ffffd42>	; <UNPREDICTABLE>
 37c:	6f726b69 	svcvs	0x00726b69
 380:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 384:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 388:	62006c6f 	andvs	r6, r0, #28416	; 0x6f00
 38c:	5f6c6c61 	svcpl	0x006c6c61
 390:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
 394:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 398:	61675f74 	smcvs	30196	; 0x75f4
 39c:	6e00656d 	cfsh32vs	mvfx6, mvfx0, #61
 3a0:	6f706d75 	svcvs	0x00706d75
 3a4:	73746e69 	cmnvc	r4, #1680	; 0x690
 3a8:	424f5000 	submi	r5, pc, #0, 0
 3ac:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 3b0:	626f7400 	rsbvs	r7, pc, #0, 8
 3b4:	7361006a 	cmnvc	r1, #106, 0	; 0x6a
 3b8:	5f696963 	svcpl	0x00696963
 3bc:	6f746f67 	svcvs	0x00746f67
 3c0:	61007978 	tstvs	r0, r8, ror r9
 3c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3c8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 3cc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 3d0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 3d4:	00726165 	rsbseq	r6, r2, r5, ror #2
 3d8:	6e69616d 	powvsez	f6, f1, #5.0
 3dc:	6100315f 	tstvs	r0, pc, asr r1
 3e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3e4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3e8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3ec:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 3f0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 3f4:	73610072 	cmnvc	r1, #114, 0	; 0x72
 3f8:	5f696963 	svcpl	0x00696963
 3fc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 400:	6174735f 	cmnvs	r4, pc, asr r3
 404:	00737574 	rsbseq	r7, r3, r4, ror r5
 408:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 40c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 410:	5f657469 	svcpl	0x00657469
 414:	61746164 	cmnvs	r4, r4, ror #2
 418:	63736100 	cmnvs	r3, #0
 41c:	735f6969 	cmpvc	pc, #1720320	; 0x1a4000
 420:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 424:	61007075 	tstvs	r0, r5, ror r0
 428:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 42c:	6165725f 	cmnvs	r5, pc, asr r2
 430:	6f635f64 	svcvs	0x00635f64
 434:	6f72746e 	svcvs	0x0072746e
 438:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 43c:	63736100 	cmnvs	r3, #0
 440:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 444:	5f646165 	svcpl	0x00646165
 448:	61746164 	cmnvs	r4, r4, ror #2
 44c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 450:	73615f74 	cmnvc	r1, #116, 30	; 0x1d0
 454:	5f696963 	svcpl	0x00696963
 458:	00707061 	rsbseq	r7, r0, r1, rrx
 45c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 460:	00737365 	rsbseq	r7, r3, r5, ror #6
 464:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 468:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 46c:	69727700 	ldmdbvs	r2!, {r8, r9, sl, ip, sp, lr}^
 470:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
 474:	6f74746f 	svcvs	0x0074746f
 478:	69645f6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 47c:	616c7073 	smcvs	50947	; 0xc703
 480:	6f630079 	svcvs	0x00630079
 484:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 488:	65740064 	ldrbvs	r0, [r4, #-100]!	; 0xffffff9c
 48c:	00317473 	eorseq	r7, r1, r3, ror r4
 490:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 494:	73610032 	cmnvc	r1, #50, 0	; 0x32
 498:	5f696963 	svcpl	0x00696963
 49c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4a0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 4a4:	73610064 	cmnvc	r1, #100, 0	; 0x64
 4a8:	5f696963 	svcpl	0x00696963
 4ac:	6f746f67 	svcvs	0x00746f67
 4b0:	00317978 	eorseq	r7, r1, r8, ror r9
 4b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4b8:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
 4bc:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 4c0:	6a6c7361 	bvs	1b1d24c <ascii_startup-0x1e4e2db4>
 4c4:	2f676e75 	svccs	0x00676e75
 4c8:	6b736544 	blvs	1cd99e0 <ascii_startup-0x1e326620>
 4cc:	2f706f74 	svccs	0x00706f74
 4d0:	33544144 	cmpcc	r4, #17
 4d4:	432f3039 			; <UNDEFINED> instruction: 0x432f3039
 4d8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 4dc:	5f657469 	svcpl	0x00657469
 4e0:	6262614c 	rsbvs	r6, r2, #19
 4e4:	6e69732f 	cdpvs	3, 6, cr7, cr9, cr15, {1}
 4e8:	706c6567 	rsbvc	r6, ip, r7, ror #10
 4ec:	2f676e6f 	svccs	0x00676e6f
 4f0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4f4:	00632e69 	rsbeq	r2, r3, r9, ror #28
 4f8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4fc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 500:	5f657469 	svcpl	0x00657469
 504:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 508:	63736100 	cmnvs	r3, #0
 50c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 510:	5f6c7274 	svcpl	0x006c7274
 514:	5f746962 	svcpl	0x00746962
 518:	00746573 	rsbseq	r6, r4, r3, ror r5
 51c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 520:	6f745f65 	svcvs	0x00745f65
 524:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 528:	616c7073 	smcvs	50947	; 0xc703
 52c:	73610079 	cmnvc	r1, #121, 0	; 0x79
 530:	5f696963 	svcpl	0x00696963
 534:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 538:	73552f00 	cmpvc	r5, #0, 30
 53c:	2f737265 	svccs	0x00737265
 540:	72646e61 	rsbvc	r6, r4, #1552	; 0x610
 544:	6c736165 	ldfvse	f6, [r3], #-404	; 0xfffffe6c
 548:	676e756a 	strbvs	r7, [lr, -sl, ror #10]!
 54c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 550:	706f746b 	rsbvc	r7, pc, fp, ror #8
 554:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 558:	2f303933 	svccs	0x00303933
 55c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 560:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 564:	62614c5f 	rsbvs	r4, r1, #24320	; 0x5f00
 568:	69732f62 	ldmdbvs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
 56c:	6c65676e 	stclvs	7, cr6, [r5], #-440	; 0xfffffe48
 570:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 574:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 578:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 57c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 580:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 4c6 <ascii_startup-0x1ffffb3a>	; <UNPREDICTABLE>
 584:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 588:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 58c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 590:	736e3035 	cmnvc	lr, #53, 0	; 0x35
 594:	61726400 	cmnvs	r2, r0, lsl #8
 598:	61625f77 	smcvs	9719	; 0x25f7
 59c:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 5a0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5a4:	6c616200 	sfmvs	f6, 2, [r1], #-0
 5a8:	626f5f6c 	rsbvs	r5, pc, #108, 30	; 0x1b0
 5ac:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5b0:	6f656700 	svcvs	0x00656700
 5b4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 5b8:	004f5f79 	subeq	r5, pc, r9, ror pc	; <UNPREDICTABLE>
 5bc:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 5c0:	6f5f656c 	svcvs	0x005f656c
 5c4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 5c8:	72670074 	rsbvc	r0, r7, #116, 0	; 0x74
 5cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5d0:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 5d4:	5f6c6578 	svcpl	0x006c6578
 5d8:	61656c63 	cmnvs	r5, r3, ror #24
 5dc:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 5e0:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 5e4:	32746365 	rsbscc	r6, r4, #-1811939327	; 0x94000001
 5e8:	6a626f00 	bvs	189c1f0 <ascii_startup-0x1e763e10>
 5ec:	5f746365 	svcpl	0x00746365
 5f0:	65730047 	ldrbvs	r0, [r3, #-71]!	; 0xffffffb9
 5f4:	61625f74 	smcvs	9716	; 0x25f4
 5f8:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 5fc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 600:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 604:	62006465 	andvs	r6, r0, #1694498816	; 0x65000000
 608:	5f6c6c61 	svcpl	0x006c6c61
 60c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 478 <ascii_startup-0x1ffffb88>
 610:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 614:	76657200 	strbtvc	r7, [r5], -r0, lsl #4
 618:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 61c:	6a626f5f 	bvs	189c3a0 <ascii_startup-0x1e763c60>
 620:	5f746365 	svcpl	0x00746365
 624:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 628:	6e6f7463 	cdpvs	4, 6, cr7, cr15, cr3, {3}
 62c:	64617000 	strbtvs	r7, [r1], #-0
 630:	5f656c64 	svcpl	0x00656c64
 634:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 4a0 <ascii_startup-0x1ffffb60>
 638:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 63c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 640:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
 644:	5f726165 	svcpl	0x00726165
 648:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 64c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 650:	6f007463 	svcvs	0x00007463
 654:	63656a62 	cmnvs	r5, #401408	; 0x62000
 658:	004f5f74 	subeq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
 65c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 660:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
 664:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 668:	6a6c7361 	bvs	1b1d3f4 <ascii_startup-0x1e4e2c0c>
 66c:	2f676e75 	svccs	0x00676e75
 670:	6b736544 	blvs	1cd9b88 <ascii_startup-0x1e326478>
 674:	2f706f74 	svccs	0x00706f74
 678:	33544144 	cmpcc	r4, #17
 67c:	432f3039 			; <UNDEFINED> instruction: 0x432f3039
 680:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 684:	5f657469 	svcpl	0x00657469
 688:	6262614c 	rsbvs	r6, r2, #19
 68c:	6e69732f 	cdpvs	3, 6, cr7, cr9, cr15, {1}
 690:	706c6567 	rsbvc	r6, ip, r7, ror #10
 694:	2f676e6f 	svccs	0x00676e6f
 698:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 69c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 6a0:	70730063 	rsbsvc	r0, r3, r3, rrx
 6a4:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 6a8:	61726700 	cmnvs	r2, r0, lsl #14
 6ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6b0:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 6b4:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 6b8:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 6bc:	5f65766f 	svcpl	0x0065766f
 6c0:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 6c4:	626f656c 	rsbvs	r6, pc, #108, 10	; 0x1b000000
 6c8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 6cc:	61726700 	cmnvs	r2, r0, lsl #14
 6d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6d4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 6d8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 6dc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 6e0:	6170006e 	cmnvs	r0, lr, rrx
 6e4:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 6e8:	61726700 	cmnvs	r2, r0, lsl #14
 6ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6f0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 6f4:	696c6174 	stmdbvs	ip!, {r2, r4, r5, r6, r8, sp, lr}^
 6f8:	6900657a 	stmdbvs	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
 6fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 700:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
 704:	61700031 	cmnvs	r0, r1, lsr r0
 708:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 70c:	626f5f32 	rsbvs	r5, pc, #200	; 0xc8
 710:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 714:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 718:	61625f65 	cmnvs	r2, r5, ror #30
 71c:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 720:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 724:	6f656700 	svcvs	0x00656700
 728:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 72c:	00475f79 	subeq	r5, r7, r9, ror pc
 730:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 734:	Address 0x0000000000000734 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <ascii_startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000020 	andcs	r0, r0, r0, lsr #32
  1c:	0000002c 	andeq	r0, r0, ip, lsr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000004c 	andcs	r0, r0, ip, asr #32
  3c:	0000008c 	andeq	r0, r0, ip, lsl #1
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000d8 	ldrdcs	r0, [r0], -r8
  5c:	00000050 	andeq	r0, r0, r0, asr r0
  60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  64:	41018e02 	tstmi	r1, r2, lsl #28
  68:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
  6c:	00000007 	andeq	r0, r0, r7
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000128 	andcs	r0, r0, r8, lsr #2
  7c:	0000004c 	andeq	r0, r0, ip, asr #32
  80:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  84:	41018e02 	tstmi	r1, r2, lsl #28
  88:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  8c:	00000007 	andeq	r0, r0, r7
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	20000174 	andcs	r0, r0, r4, ror r1
  9c:	000000dc 	ldrdeq	r0, [r0], -ip
  a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  a4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  a8:	41018e02 	tstmi	r1, r2, lsl #28
  ac:	0d41680e 	stcleq	8, cr6, [r1, #-56]	; 0xffffffc8
  b0:	00000007 	andeq	r0, r0, r7
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	20000250 	andcs	r0, r0, r0, asr r2
  c0:	00000034 	andeq	r0, r0, r4, lsr r0
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0000070d 	andeq	r0, r0, sp, lsl #14
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000284 	andcs	r0, r0, r4, lsl #5
  dc:	00000114 	andeq	r0, r0, r4, lsl r1
  e0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
  e4:	86048505 	strhi	r8, [r4], -r5, lsl #10
  e8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  ec:	680e4101 	stmdavs	lr, {r0, r8, lr}
  f0:	00070d41 	andeq	r0, r7, r1, asr #26
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	00000000 	andeq	r0, r0, r0
  fc:	20000398 	mulcs	r0, r8, r3
 100:	00000084 	andeq	r0, r0, r4, lsl #1
 104:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 108:	86048505 	strhi	r8, [r4], -r5, lsl #10
 10c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 110:	580e4101 	stmdapl	lr, {r0, r8, lr}
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000000c 	andeq	r0, r0, ip
 11c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 120:	7c020001 	stcvc	0, cr0, [r2], {1}
 124:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000118 	andeq	r0, r0, r8, lsl r1
 130:	2000041c 	andcs	r0, r0, ip, lsl r4
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000118 	andeq	r0, r0, r8, lsl r1
 150:	2000049c 	mulcs	r0, ip, r4
 154:	00000088 	andeq	r0, r0, r8, lsl #1
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000118 	andeq	r0, r0, r8, lsl r1
 170:	20000524 	andcs	r0, r0, r4, lsr #10
 174:	00000054 	andeq	r0, r0, r4, asr r0
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000118 	andeq	r0, r0, r8, lsl r1
 190:	20000578 	andcs	r0, r0, r8, ror r5
 194:	0000004c 	andeq	r0, r0, ip, asr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000118 	andeq	r0, r0, r8, lsl r1
 1b0:	200005c4 	andcs	r0, r0, r4, asr #11
 1b4:	00000060 	andeq	r0, r0, r0, rrx
 1b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1c0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	00000118 	andeq	r0, r0, r8, lsl r1
 1d0:	20000624 	andcs	r0, r0, r4, lsr #12
 1d4:	000000c6 	andeq	r0, r0, r6, asr #1
 1d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1dc:	41018e02 	tstmi	r1, r2, lsl #28
 1e0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 1e4:	00000007 	andeq	r0, r0, r7
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	00000118 	andeq	r0, r0, r8, lsl r1
 1f0:	200006ea 	andcs	r0, r0, sl, ror #13
 1f4:	00000034 	andeq	r0, r0, r4, lsr r0
 1f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1fc:	41018e02 	tstmi	r1, r2, lsl #28
 200:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 204:	00000007 	andeq	r0, r0, r7
 208:	0000000c 	andeq	r0, r0, ip
 20c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 210:	7c020001 	stcvc	0, cr0, [r2], {1}
 214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 218:	0000000c 	andeq	r0, r0, ip
 21c:	00000208 	andeq	r0, r0, r8, lsl #4
 220:	20000000 	andcs	r0, r0, r0
 224:	0000000c 	andeq	r0, r0, ip
 228:	00000018 	andeq	r0, r0, r8, lsl r0
 22c:	00000208 	andeq	r0, r0, r8, lsl #4
 230:	20000720 	andcs	r0, r0, r0, lsr #14
 234:	00000054 	andeq	r0, r0, r4, asr r0
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0000070d 	andeq	r0, r0, sp, lsl #14
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000208 	andeq	r0, r0, r8, lsl #4
 24c:	20000774 	andcs	r0, r0, r4, ror r7
 250:	00000038 	andeq	r0, r0, r8, lsr r0
 254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 258:	41018e02 	tstmi	r1, r2, lsl #28
 25c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 260:	00000007 	andeq	r0, r0, r7
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000208 	andeq	r0, r0, r8, lsl #4
 26c:	200007ac 	andcs	r0, r0, ip, lsr #15
 270:	00000048 	andeq	r0, r0, r8, asr #32
 274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 278:	41018e02 	tstmi	r1, r2, lsl #28
 27c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 280:	00000007 	andeq	r0, r0, r7
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000208 	andeq	r0, r0, r8, lsl #4
 28c:	200007f4 	strdcs	r0, [r0], -r4
 290:	00000034 	andeq	r0, r0, r4, lsr r0
 294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 298:	41018e02 	tstmi	r1, r2, lsl #28
 29c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2a0:	00000007 	andeq	r0, r0, r7
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000208 	andeq	r0, r0, r8, lsl #4
 2ac:	20000828 	andcs	r0, r0, r8, lsr #16
 2b0:	00000030 	andeq	r0, r0, r0, lsr r0
 2b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b8:	41018e02 	tstmi	r1, r2, lsl #28
 2bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c0:	00000007 	andeq	r0, r0, r7
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000208 	andeq	r0, r0, r8, lsl #4
 2cc:	20000858 	andcs	r0, r0, r8, asr r8
 2d0:	00000040 	andeq	r0, r0, r0, asr #32
 2d4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	00000208 	andeq	r0, r0, r8, lsl #4
 2ec:	20000898 	mulcs	r0, r8, r8
 2f0:	00000028 	andeq	r0, r0, r8, lsr #32
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000208 	andeq	r0, r0, r8, lsl #4
 308:	200008c0 	andcs	r0, r0, r0, asr #17
 30c:	0000002a 	andeq	r0, r0, sl, lsr #32
 310:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 314:	41018e02 	tstmi	r1, r2, lsl #28
 318:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 31c:	00000007 	andeq	r0, r0, r7
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000208 	andeq	r0, r0, r8, lsl #4
 328:	200008ea 	andcs	r0, r0, sl, ror #17
 32c:	0000002a 	andeq	r0, r0, sl, lsr #32
 330:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 334:	41018e02 	tstmi	r1, r2, lsl #28
 338:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 33c:	00000007 	andeq	r0, r0, r7
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000208 	andeq	r0, r0, r8, lsl #4
 348:	20000914 	andcs	r0, r0, r4, lsl r9
 34c:	00000040 	andeq	r0, r0, r0, asr #32
 350:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 354:	41018e02 	tstmi	r1, r2, lsl #28
 358:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 35c:	00000007 	andeq	r0, r0, r7
 360:	00000018 	andeq	r0, r0, r8, lsl r0
 364:	00000208 	andeq	r0, r0, r8, lsl #4
 368:	20000954 	andcs	r0, r0, r4, asr r9
 36c:	00000094 	muleq	r0, r4, r0
 370:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 374:	41018e02 	tstmi	r1, r2, lsl #28
 378:	0000070d 	andeq	r0, r0, sp, lsl #14
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000208 	andeq	r0, r0, r8, lsl #4
 384:	200009e8 	andcs	r0, r0, r8, ror #19
 388:	0000005a 	andeq	r0, r0, sl, asr r0
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000208 	andeq	r0, r0, r8, lsl #4
 3a4:	20000a42 	andcs	r0, r0, r2, asr #20
 3a8:	0000005a 	andeq	r0, r0, sl, asr r0
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b8:	00000007 	andeq	r0, r0, r7
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000208 	andeq	r0, r0, r8, lsl #4
 3c4:	20000a9c 	mulcs	r0, ip, sl
 3c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d8:	00000007 	andeq	r0, r0, r7
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000208 	andeq	r0, r0, r8, lsl #4
 3e4:	20000ad8 	ldrdcs	r0, [r0], -r8
 3e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f0:	41018e02 	tstmi	r1, r2, lsl #28
 3f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f8:	00000007 	andeq	r0, r0, r7
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	00000208 	andeq	r0, r0, r8, lsl #4
 404:	20000b14 	andcs	r0, r0, r4, lsl fp
 408:	00000068 	andeq	r0, r0, r8, rrx
 40c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 410:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 414:	41018e02 	tstmi	r1, r2, lsl #28
 418:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 41c:	00000007 	andeq	r0, r0, r7
 420:	0000000c 	andeq	r0, r0, ip
 424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 428:	7c020001 	stcvc	0, cr0, [r2], {1}
 42c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 430:	00000018 	andeq	r0, r0, r8, lsl r0
 434:	00000420 	andeq	r0, r0, r0, lsr #8
 438:	20000b7c 	andcs	r0, r0, ip, ror fp
 43c:	00000044 	andeq	r0, r0, r4, asr #32
 440:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 444:	41018e02 	tstmi	r1, r2, lsl #28
 448:	0000070d 	andeq	r0, r0, sp, lsl #14
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000420 	andeq	r0, r0, r0, lsr #8
 454:	20000bc0 	andcs	r0, r0, r0, asr #23
 458:	00000036 	andeq	r0, r0, r6, lsr r0
 45c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 460:	41018e02 	tstmi	r1, r2, lsl #28
 464:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 468:	00000007 	andeq	r0, r0, r7
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000420 	andeq	r0, r0, r0, lsr #8
 474:	20000bf6 	strdcs	r0, [r0], -r6
 478:	0000002c 	andeq	r0, r0, ip, lsr #32
 47c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 480:	41018e02 	tstmi	r1, r2, lsl #28
 484:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 488:	00000007 	andeq	r0, r0, r7
 48c:	0000000c 	andeq	r0, r0, ip
 490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 494:	7c020001 	stcvc	0, cr0, [r2], {1}
 498:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4a4:	20000010 	andcs	r0, r0, r0, lsl r0
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	0000000c 	andeq	r0, r0, ip
 4b0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4b4:	20000c24 	andcs	r0, r0, r4, lsr #24
 4b8:	00000006 	andeq	r0, r0, r6
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4c4:	20000c2a 	andcs	r0, r0, sl, lsr #24
 4c8:	00000006 	andeq	r0, r0, r6
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4d4:	20000c30 	andcs	r0, r0, r0, lsr ip
 4d8:	00000006 	andeq	r0, r0, r6
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4e4:	20000c36 	andcs	r0, r0, r6, lsr ip
 4e8:	00000006 	andeq	r0, r0, r6
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	0000048c 	andeq	r0, r0, ip, lsl #9
 4f4:	20000c3c 	andcs	r0, r0, ip, lsr ip
 4f8:	00000030 	andeq	r0, r0, r0, lsr r0
 4fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 500:	41018e02 	tstmi	r1, r2, lsl #28
 504:	0000070d 	andeq	r0, r0, sp, lsl #14
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	0000048c 	andeq	r0, r0, ip, lsl #9
 510:	20000c6c 	andcs	r0, r0, ip, ror #24
 514:	00000060 	andeq	r0, r0, r0, rrx
 518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 51c:	41018e02 	tstmi	r1, r2, lsl #28
 520:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 524:	00000007 	andeq	r0, r0, r7
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	0000048c 	andeq	r0, r0, ip, lsl #9
 530:	20000ccc 	andcs	r0, r0, ip, asr #25
 534:	00000060 	andeq	r0, r0, r0, rrx
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	0000048c 	andeq	r0, r0, ip, lsl #9
 550:	20000d2c 	andcs	r0, r0, ip, lsr #26
 554:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 564:	00000007 	andeq	r0, r0, r7
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	0000048c 	andeq	r0, r0, ip, lsl #9
 570:	20000ddc 	ldrdcs	r0, [r0], -ip
 574:	00000046 	andeq	r0, r0, r6, asr #32
 578:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 57c:	41018e02 	tstmi	r1, r2, lsl #28
 580:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 584:	00000007 	andeq	r0, r0, r7
 588:	0000001c 	andeq	r0, r0, ip, lsl r0
 58c:	0000048c 	andeq	r0, r0, ip, lsl #9
 590:	20000e22 	andcs	r0, r0, r2, lsr #28
 594:	0000007c 	andeq	r0, r0, ip, ror r0
 598:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 59c:	41018e02 	tstmi	r1, r2, lsl #28
 5a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 5a4:	00000007 	andeq	r0, r0, r7
 5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ac:	0000048c 	andeq	r0, r0, ip, lsl #9
 5b0:	20000e9e 	mulcs	r0, lr, lr
 5b4:	00000022 	andeq	r0, r0, r2, lsr #32
 5b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5cc:	0000048c 	andeq	r0, r0, ip, lsl #9
 5d0:	20000ec0 	andcs	r0, r0, r0, asr #29
 5d4:	0000013c 	andeq	r0, r0, ip, lsr r1
 5d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 5dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 5e0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 5e4:	00070d41 	andeq	r0, r7, r1, asr #26
 5e8:	00000018 	andeq	r0, r0, r8, lsl r0
 5ec:	0000048c 	andeq	r0, r0, ip, lsl #9
 5f0:	20000ffc 	strdcs	r0, [r0], -ip
 5f4:	00000058 	andeq	r0, r0, r8, asr r0
 5f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5fc:	41018e02 	tstmi	r1, r2, lsl #28
 600:	0000070d 	andeq	r0, r0, sp, lsl #14
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	0000048c 	andeq	r0, r0, ip, lsl #9
 60c:	20001054 	andcs	r1, r0, r4, asr r0
 610:	00000030 	andeq	r0, r0, r0, lsr r0
 614:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 618:	41018e02 	tstmi	r1, r2, lsl #28
 61c:	0000070d 	andeq	r0, r0, sp, lsl #14
 620:	0000000c 	andeq	r0, r0, ip
 624:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 628:	7c010001 	stcvc	0, cr0, [r1], {1}
 62c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 630:	0000000c 	andeq	r0, r0, ip
 634:	00000620 	andeq	r0, r0, r0, lsr #12
 638:	20001085 	andcs	r1, r0, r5, lsl #1
 63c:	000001cc 	andeq	r0, r0, ip, asr #3

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000720 	andcs	r0, r0, r0, lsr #14
   4:	20000b7c 	andcs	r0, r0, ip, ror fp
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
  18:	20000c24 	andcs	r0, r0, r4, lsr #24
  1c:	20001084 	andcs	r1, r0, r4, lsl #1
  20:	20000010 	andcs	r0, r0, r0, lsl r0
  24:	2000001c 	andcs	r0, r0, ip, lsl r0
	...
